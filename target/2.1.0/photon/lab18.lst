
c:/Users/USER/Desktop/lab18/target/2.1.0/photon/lab18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008350  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a8370  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001d8  20000000  080a8374  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000061c  200001d8  200001d8  000401d8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a854c  080a854c  0003854c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a8574  080a8574  00038574  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c184c  00000000  00000000  00038578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001da72  00000000  00000000  001f9dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002b748  00000000  00000000  00217836  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002a98  00000000  00000000  00242f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000068a8  00000000  00000000  00245a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000330fa  00000000  00000000  0024c2be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00044cd9  00000000  00000000  0027f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ba7f5  00000000  00000000  002c4091  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008068  00000000  00000000  0037e888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 ffdf 	bl	80a4ff4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 ffe7 	bl	80a5010 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a8374 	.word	0x080a8374
 80a0050:	200001d8 	.word	0x200001d8
 80a0054:	200001d8 	.word	0x200001d8
 80a0058:	200007f4 	.word	0x200007f4
 80a005c:	200007f4 	.word	0x200007f4

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f003 fd37 	bl	80a3ad4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a834c 	.word	0x080a834c
 80a0084:	080a836c 	.word	0x080a836c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bcbc 	b.w	80a0a04 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fde7 	bl	80a0c60 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f003 bcdf 	b.w	80a3a58 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f002 becd 	b.w	80a2e38 <malloc>

080a009e <_Znaj>:
 80a009e:	f002 becb 	b.w	80a2e38 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f002 bed1 	b.w	80a2e48 <free>

080a00a6 <_ZdaPv>:
 80a00a6:	f002 becf 	b.w	80a2e48 <free>
	...

080a00ac <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ac:	2100      	movs	r1, #0
 80a00ae:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00b0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00b2:	4a02      	ldr	r2, [pc, #8]	; (80a00bc <__cxa_pure_virtual+0x10>)
 80a00b4:	f002 fe0c 	bl	80a2cd0 <panic_>
  while (1);
 80a00b8:	e7fe      	b.n	80a00b8 <__cxa_pure_virtual+0xc>
 80a00ba:	bf00      	nop
 80a00bc:	080a298d 	.word	0x080a298d

080a00c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00c0:	7800      	ldrb	r0, [r0, #0]
 80a00c2:	fab0 f080 	clz	r0, r0
 80a00c6:	0940      	lsrs	r0, r0, #5
 80a00c8:	4770      	bx	lr

080a00ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ca:	2301      	movs	r3, #1
 80a00cc:	7003      	strb	r3, [r0, #0]
 80a00ce:	4770      	bx	lr

080a00d0 <_ZN10BlynkParam3addEPKc.part.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
 80a00d0:	b570      	push	{r4, r5, r6, lr}
 80a00d2:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
 80a00d4:	4608      	mov	r0, r1
void BlynkParam::add(const char* str)
 80a00d6:	460e      	mov	r6, r1
    add(str, strlen(str)+1);
 80a00d8:	f004 ffd0 	bl	80a507c <strlen>
    if (len + l > buff_size)
 80a00dc:	6863      	ldr	r3, [r4, #4]
 80a00de:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
 80a00e0:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
 80a00e2:	18e9      	adds	r1, r5, r3
 80a00e4:	4291      	cmp	r1, r2
 80a00e6:	d808      	bhi.n	80a00fa <_ZN10BlynkParam3addEPKc.part.0+0x2a>
    memcpy(buff+len, b, l);
 80a00e8:	6820      	ldr	r0, [r4, #0]
 80a00ea:	462a      	mov	r2, r5
 80a00ec:	4631      	mov	r1, r6
 80a00ee:	4418      	add	r0, r3
 80a00f0:	f004 ff80 	bl	80a4ff4 <memcpy>
    len += l;
 80a00f4:	6860      	ldr	r0, [r4, #4]
 80a00f6:	4428      	add	r0, r5
 80a00f8:	6060      	str	r0, [r4, #4]
}
 80a00fa:	bd70      	pop	{r4, r5, r6, pc}

080a00fc <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
 80a00fc:	b538      	push	{r3, r4, r5, lr}
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a00fe:	4b0b      	ldr	r3, [pc, #44]	; (80a012c <_ZN22BlynkTransportParticleD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0100:	6984      	ldr	r4, [r0, #24]
 80a0102:	4605      	mov	r5, r0
 80a0104:	6003      	str	r3, [r0, #0]
 80a0106:	b17c      	cbz	r4, 80a0128 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a0108:	6863      	ldr	r3, [r4, #4]
 80a010a:	3b01      	subs	r3, #1
 80a010c:	6063      	str	r3, [r4, #4]
 80a010e:	b95b      	cbnz	r3, 80a0128 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
 80a0110:	6823      	ldr	r3, [r4, #0]
 80a0112:	4620      	mov	r0, r4
 80a0114:	689b      	ldr	r3, [r3, #8]
 80a0116:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0118:	68a3      	ldr	r3, [r4, #8]
 80a011a:	3b01      	subs	r3, #1
 80a011c:	60a3      	str	r3, [r4, #8]
 80a011e:	b91b      	cbnz	r3, 80a0128 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
 80a0120:	6823      	ldr	r3, [r4, #0]
 80a0122:	4620      	mov	r0, r4
 80a0124:	68db      	ldr	r3, [r3, #12]
 80a0126:	4798      	blx	r3
 80a0128:	4628      	mov	r0, r5
 80a012a:	bd38      	pop	{r3, r4, r5, pc}
 80a012c:	080a7e64 	.word	0x080a7e64

080a0130 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0130:	b40e      	push	{r1, r2, r3}
 80a0132:	b503      	push	{r0, r1, lr}
 80a0134:	ab03      	add	r3, sp, #12
 80a0136:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80a013a:	2100      	movs	r1, #0
        va_start(args, format);
 80a013c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a013e:	f003 fbc5 	bl	80a38cc <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a0142:	b002      	add	sp, #8
 80a0144:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0148:	b003      	add	sp, #12
 80a014a:	4770      	bx	lr

080a014c <_Z8callbackPcPhj>:
  Serial.begin(9600); 
  Blynk.begin("Puld8oY50QyXB59WD30IhNaYZct4IxYt", IPAddress(167, 172, 234, 162), 9090); 
  
}
void callback(char* topic, byte* payload, unsigned int length)
{
 80a014c:	b5f0      	push	{r4, r5, r6, r7, lr}
  //checks which topic and sets lat an long accordingly, getting the value from mqtt
  char p[length + 1];
 80a014e:	f102 0308 	add.w	r3, r2, #8
{
 80a0152:	b08b      	sub	sp, #44	; 0x2c
  char p[length + 1];
 80a0154:	f023 0307 	bic.w	r3, r3, #7
{
 80a0158:	af02      	add	r7, sp, #8
  char p[length + 1];
 80a015a:	ebad 0d03 	sub.w	sp, sp, r3
 80a015e:	ac02      	add	r4, sp, #8
{
 80a0160:	4605      	mov	r5, r0
  memcpy(p, payload, length);
 80a0162:	4620      	mov	r0, r4
{
 80a0164:	4616      	mov	r6, r2
  memcpy(p, payload, length);
 80a0166:	f004 ff45 	bl	80a4ff4 <memcpy>
  p[length] = NULL;
 80a016a:	2300      	movs	r3, #0
 80a016c:	55a3      	strb	r3, [r4, r6]
  Serial.println(topic);
 80a016e:	f003 fdc5 	bl	80a3cfc <_Z16_fetch_usbserialv>
 80a0172:	4629      	mov	r1, r5
 80a0174:	f003 fab5 	bl	80a36e2 <_ZN5Print7printlnEPKc>
  String s = p;
 80a0178:	4621      	mov	r1, r4
 80a017a:	4638      	mov	r0, r7
 80a017c:	f003 fa38 	bl	80a35f0 <_ZN6StringC1EPKc>
  if((String)topic == "noderedlong"){
 80a0180:	4629      	mov	r1, r5
 80a0182:	f107 0010 	add.w	r0, r7, #16
 80a0186:	f003 fa33 	bl	80a35f0 <_ZN6StringC1EPKc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a018a:	4930      	ldr	r1, [pc, #192]	; (80a024c <_Z8callbackPcPhj+0x100>)
 80a018c:	f107 0010 	add.w	r0, r7, #16
 80a0190:	f003 fa52 	bl	80a3638 <_ZNK6String6equalsEPKc>
 80a0194:	4606      	mov	r6, r0
 80a0196:	f107 0010 	add.w	r0, r7, #16
 80a019a:	f003 f9df 	bl	80a355c <_ZN6StringD1Ev>
 80a019e:	b1ee      	cbz	r6, 80a01dc <_Z8callbackPcPhj+0x90>
    longitude = s.toFloat();
 80a01a0:	4638      	mov	r0, r7
 80a01a2:	f003 fa5b 	bl	80a365c <_ZNK6String7toFloatEv>
 80a01a6:	f004 fb4d 	bl	80a4844 <__aeabi_f2d>
 80a01aa:	4e29      	ldr	r6, [pc, #164]	; (80a0250 <_Z8callbackPcPhj+0x104>)
 80a01ac:	e9c6 0100 	strd	r0, r1, [r6]
    Serial.printf("%s",p);
 80a01b0:	f003 fda4 	bl	80a3cfc <_Z16_fetch_usbserialv>
 80a01b4:	4622      	mov	r2, r4
 80a01b6:	4927      	ldr	r1, [pc, #156]	; (80a0254 <_Z8callbackPcPhj+0x108>)
 80a01b8:	f7ff ffba 	bl	80a0130 <_ZN5Print6printfEPKcz>
    Serial.println();
 80a01bc:	f003 fd9e 	bl	80a3cfc <_Z16_fetch_usbserialv>
 80a01c0:	f003 fa83 	bl	80a36ca <_ZN5Print7printlnEv>
    Serial.println(longitude);
 80a01c4:	f003 fd9a 	bl	80a3cfc <_Z16_fetch_usbserialv>
 80a01c8:	2302      	movs	r3, #2
 80a01ca:	9300      	str	r3, [sp, #0]
 80a01cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a01d0:	f003 fb6e 	bl	80a38b0 <_ZN5Print7printlnEdi>
    delay(1000);
 80a01d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01d8:	f003 fbe8 	bl	80a39ac <delay>
  }
  
  Serial.println();
 80a01dc:	f003 fd8e 	bl	80a3cfc <_Z16_fetch_usbserialv>
 80a01e0:	f003 fa73 	bl	80a36ca <_ZN5Print7printlnEv>
  if((String)topic == "noderedlat"){
 80a01e4:	4629      	mov	r1, r5
 80a01e6:	f107 0010 	add.w	r0, r7, #16
 80a01ea:	f003 fa01 	bl	80a35f0 <_ZN6StringC1EPKc>
 80a01ee:	491a      	ldr	r1, [pc, #104]	; (80a0258 <_Z8callbackPcPhj+0x10c>)
 80a01f0:	f107 0010 	add.w	r0, r7, #16
 80a01f4:	f003 fa20 	bl	80a3638 <_ZNK6String6equalsEPKc>
 80a01f8:	4605      	mov	r5, r0
 80a01fa:	f107 0010 	add.w	r0, r7, #16
 80a01fe:	f003 f9ad 	bl	80a355c <_ZN6StringD1Ev>
 80a0202:	b1ed      	cbz	r5, 80a0240 <_Z8callbackPcPhj+0xf4>
    latitude = s.toFloat();
 80a0204:	4638      	mov	r0, r7
 80a0206:	f003 fa29 	bl	80a365c <_ZNK6String7toFloatEv>
 80a020a:	f004 fb1b 	bl	80a4844 <__aeabi_f2d>
 80a020e:	4d13      	ldr	r5, [pc, #76]	; (80a025c <_Z8callbackPcPhj+0x110>)
 80a0210:	e9c5 0100 	strd	r0, r1, [r5]
    Serial.printf("%s",p);
 80a0214:	f003 fd72 	bl	80a3cfc <_Z16_fetch_usbserialv>
 80a0218:	4622      	mov	r2, r4
 80a021a:	490e      	ldr	r1, [pc, #56]	; (80a0254 <_Z8callbackPcPhj+0x108>)
 80a021c:	f7ff ff88 	bl	80a0130 <_ZN5Print6printfEPKcz>
    Serial.println();
 80a0220:	f003 fd6c 	bl	80a3cfc <_Z16_fetch_usbserialv>
 80a0224:	f003 fa51 	bl	80a36ca <_ZN5Print7printlnEv>
    Serial.println(latitude);
 80a0228:	f003 fd68 	bl	80a3cfc <_Z16_fetch_usbserialv>
 80a022c:	2302      	movs	r3, #2
 80a022e:	9300      	str	r3, [sp, #0]
 80a0230:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a0234:	f003 fb3c 	bl	80a38b0 <_ZN5Print7printlnEdi>
    delay(1000);
 80a0238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a023c:	f003 fbb6 	bl	80a39ac <delay>
  String s = p;
 80a0240:	4638      	mov	r0, r7
 80a0242:	f003 f98b 	bl	80a355c <_ZN6StringD1Ev>
  }  

  


}  
 80a0246:	3724      	adds	r7, #36	; 0x24
 80a0248:	46bd      	mov	sp, r7
 80a024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a024c:	080a6dec 	.word	0x080a6dec
 80a0250:	20000310 	.word	0x20000310
 80a0254:	080a6df8 	.word	0x080a6df8
 80a0258:	080a6dfb 	.word	0x080a6dfb
 80a025c:	20000308 	.word	0x20000308

080a0260 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
 80a0260:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0262:	f002 fb9b 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0266:	4b03      	ldr	r3, [pc, #12]	; (80a0274 <_ZN10CloudClass7processEv+0x14>)
 80a0268:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a026a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 80a026e:	f002 bdcb 	b.w	80a2e08 <spark_process>
 80a0272:	bf00      	nop
 80a0274:	200007c0 	.word	0x200007c0

080a0278 <_ZNK10BlynkParam8iterator5asIntEv>:
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a0278:	4603      	mov	r3, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a027a:	6800      	ldr	r0, [r0, #0]
 80a027c:	b120      	cbz	r0, 80a0288 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
 80a027e:	685b      	ldr	r3, [r3, #4]
 80a0280:	4298      	cmp	r0, r3
 80a0282:	d201      	bcs.n	80a0288 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
 80a0284:	f004 be9f 	b.w	80a4fc6 <atoi>
 80a0288:	2000      	movs	r0, #0
 80a028a:	4770      	bx	lr

080a028c <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
 80a028c:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a028e:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
 80a0290:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0292:	b145      	cbz	r5, 80a02a6 <_ZN10BlynkParam8iteratorppEv+0x1a>
 80a0294:	6843      	ldr	r3, [r0, #4]
 80a0296:	429d      	cmp	r5, r3
 80a0298:	d205      	bcs.n	80a02a6 <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
 80a029a:	4628      	mov	r0, r5
 80a029c:	f004 feee 	bl	80a507c <strlen>
 80a02a0:	3001      	adds	r0, #1
 80a02a2:	4405      	add	r5, r0
 80a02a4:	6025      	str	r5, [r4, #0]
        }
 80a02a6:	4620      	mov	r0, r4
 80a02a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a02ac <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
 80a02ac:	b538      	push	{r3, r4, r5, lr}
 80a02ae:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a02b0:	6825      	ldr	r5, [r4, #0]
    {
 80a02b2:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
 80a02b4:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80a02b8:	4a04      	ldr	r2, [pc, #16]	; (80a02cc <_ZN10BlynkParam3addEi+0x20>)
 80a02ba:	1a09      	subs	r1, r1, r0
 80a02bc:	4428      	add	r0, r5
 80a02be:	f002 fdd3 	bl	80a2e68 <snprintf>
 80a02c2:	6863      	ldr	r3, [r4, #4]
 80a02c4:	3001      	adds	r0, #1
 80a02c6:	4403      	add	r3, r0
 80a02c8:	6063      	str	r3, [r4, #4]
    }
 80a02ca:	bd38      	pop	{r3, r4, r5, pc}
 80a02cc:	080a6e06 	.word	0x080a6e06

080a02d0 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
 80a02d0:	b538      	push	{r3, r4, r5, lr}
 80a02d2:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a02d4:	6825      	ldr	r5, [r4, #0]
    {
 80a02d6:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
 80a02d8:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80a02dc:	4a04      	ldr	r2, [pc, #16]	; (80a02f0 <_ZN10BlynkParam3addEl+0x20>)
 80a02de:	1a09      	subs	r1, r1, r0
 80a02e0:	4428      	add	r0, r5
 80a02e2:	f002 fdc1 	bl	80a2e68 <snprintf>
 80a02e6:	6863      	ldr	r3, [r4, #4]
 80a02e8:	3001      	adds	r0, #1
 80a02ea:	4403      	add	r3, r0
 80a02ec:	6063      	str	r3, [r4, #4]
    }
 80a02ee:	bd38      	pop	{r3, r4, r5, pc}
 80a02f0:	080a6e09 	.word	0x080a6e09

080a02f4 <_ZN10BlynkParam3addEd>:
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
    }

    inline
    void BlynkParam::add(double value)
    {
 80a02f4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 80a02f6:	4616      	mov	r6, r2
 80a02f8:	461f      	mov	r7, r3
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
 80a02fa:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
    {
 80a02fe:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
 80a0300:	6800      	ldr	r0, [r0, #0]
 80a0302:	1ac9      	subs	r1, r1, r3
 80a0304:	e9cd 6700 	strd	r6, r7, [sp]
 80a0308:	4a04      	ldr	r2, [pc, #16]	; (80a031c <_ZN10BlynkParam3addEd+0x28>)
 80a030a:	4418      	add	r0, r3
 80a030c:	f002 fdac 	bl	80a2e68 <snprintf>
 80a0310:	6863      	ldr	r3, [r4, #4]
 80a0312:	3001      	adds	r0, #1
 80a0314:	4403      	add	r3, r0
 80a0316:	6063      	str	r3, [r4, #4]
    }
 80a0318:	b002      	add	sp, #8
 80a031a:	bdd0      	pop	{r4, r6, r7, pc}
 80a031c:	080a6e0d 	.word	0x080a6e0d

080a0320 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
 80a0320:	b508      	push	{r3, lr}
        state = CONNECTING;
 80a0322:	2300      	movs	r3, #0
 80a0324:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
 80a0326:	6800      	ldr	r0, [r0, #0]
 80a0328:	f003 f81a 	bl	80a3360 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
 80a032c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
 80a0330:	f002 bace 	b.w	80a28d0 <BlynkNoOpCbk>

080a0334 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a0334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
 80a0338:	eb01 0902 	add.w	r9, r1, r2
 80a033c:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
 80a033e:	4549      	cmp	r1, r9
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
 80a0340:	4680      	mov	r8, r0
 80a0342:	460d      	mov	r5, r1
 80a0344:	4616      	mov	r6, r2
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a0346:	e9cd 1905 	strd	r1, r9, [sp, #20]
    if (it >= param.end())
 80a034a:	f080 8092 	bcs.w	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
 80a034e:	a805      	add	r0, sp, #20
 80a0350:	880f      	ldrh	r7, [r1, #0]
 80a0352:	f7ff ff9b 	bl	80a028c <_ZN10BlynkParam8iteratorppEv>
 80a0356:	6803      	ldr	r3, [r0, #0]
 80a0358:	4599      	cmp	r9, r3
 80a035a:	f240 808a 	bls.w	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a035e:	a805      	add	r0, sp, #20
 80a0360:	f7ff ff8a 	bl	80a0278 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
 80a0364:	f247 2376 	movw	r3, #29302	; 0x7276
 80a0368:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a036a:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
 80a036c:	f000 80a9 	beq.w	80a04c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
 80a0370:	d827      	bhi.n	80a03c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
 80a0372:	f247 2361 	movw	r3, #29281	; 0x7261
 80a0376:	429f      	cmp	r7, r3
 80a0378:	d07e      	beq.n	80a0478 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
 80a037a:	f247 2364 	movw	r3, #29284	; 0x7264
 80a037e:	429f      	cmp	r7, r3
 80a0380:	d042      	beq.n	80a0408 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
 80a0382:	f646 5370 	movw	r3, #28016	; 0x6d70
 80a0386:	429f      	cmp	r7, r3
 80a0388:	d128      	bne.n	80a03dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
 80a038a:	4e63      	ldr	r6, [pc, #396]	; (80a0518 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a038c:	4f63      	ldr	r7, [pc, #396]	; (80a051c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
 80a038e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80a0530 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
 80a0392:	9b05      	ldr	r3, [sp, #20]
 80a0394:	4599      	cmp	r9, r3
 80a0396:	d96c      	bls.n	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
 80a0398:	a805      	add	r0, sp, #20
 80a039a:	f7ff ff6d 	bl	80a0278 <_ZNK10BlynkParam8iterator5asIntEv>
 80a039e:	b2c4      	uxtb	r4, r0
            ++it;
 80a03a0:	a805      	add	r0, sp, #20
 80a03a2:	f7ff ff73 	bl	80a028c <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
 80a03a6:	9d05      	ldr	r5, [sp, #20]
 80a03a8:	4631      	mov	r1, r6
 80a03aa:	4628      	mov	r0, r5
 80a03ac:	f004 fe5c 	bl	80a5068 <strcmp>
 80a03b0:	4601      	mov	r1, r0
 80a03b2:	b9e0      	cbnz	r0, 80a03ee <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
 80a03b4:	4620      	mov	r0, r4
 80a03b6:	f003 fef1 	bl	80a419c <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
 80a03ba:	a805      	add	r0, sp, #20
 80a03bc:	f7ff ff66 	bl	80a028c <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
 80a03c0:	e7e7      	b.n	80a0392 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
 80a03c2:	f247 7364 	movw	r3, #30564	; 0x7764
 80a03c6:	429f      	cmp	r7, r3
 80a03c8:	d03f      	beq.n	80a044a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
 80a03ca:	f247 7376 	movw	r3, #30582	; 0x7776
 80a03ce:	429f      	cmp	r7, r3
 80a03d0:	f000 8087 	beq.w	80a04e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
 80a03d4:	f247 7361 	movw	r3, #30561	; 0x7761
 80a03d8:	429f      	cmp	r7, r3
 80a03da:	d05f      	beq.n	80a049c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a03dc:	2300      	movs	r3, #0
 80a03de:	2202      	movs	r2, #2
 80a03e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a03e4:	9200      	str	r2, [sp, #0]
 80a03e6:	4619      	mov	r1, r3
 80a03e8:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 80a03ec:	e029      	b.n	80a0442 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
 80a03ee:	4639      	mov	r1, r7
 80a03f0:	4628      	mov	r0, r5
 80a03f2:	f004 fe39 	bl	80a5068 <strcmp>
 80a03f6:	b128      	cbz	r0, 80a0404 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
 80a03f8:	4641      	mov	r1, r8
 80a03fa:	4628      	mov	r0, r5
 80a03fc:	f004 fe34 	bl	80a5068 <strcmp>
 80a0400:	2800      	cmp	r0, #0
 80a0402:	d1da      	bne.n	80a03ba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
 80a0404:	2101      	movs	r1, #1
 80a0406:	e7d5      	b.n	80a03b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0408:	ab0a      	add	r3, sp, #40	; 0x28
 80a040a:	9307      	str	r3, [sp, #28]
 80a040c:	2500      	movs	r5, #0
 80a040e:	2310      	movs	r3, #16
 80a0410:	4943      	ldr	r1, [pc, #268]	; (80a0520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
 80a0412:	a807      	add	r0, sp, #28
 80a0414:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
 80a0418:	f7ff fe5a 	bl	80a00d0 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
 80a041c:	a807      	add	r0, sp, #28
 80a041e:	4621      	mov	r1, r4
 80a0420:	f7ff ff44 	bl	80a02ac <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
 80a0424:	4620      	mov	r0, r4
 80a0426:	f003 fee3 	bl	80a41f0 <digitalRead>
        rsp.add(analogRead(pin));
 80a042a:	4601      	mov	r1, r0
 80a042c:	a807      	add	r0, sp, #28
 80a042e:	f7ff ff4f 	bl	80a02d0 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
 80a0432:	462a      	mov	r2, r5
 80a0434:	2114      	movs	r1, #20
 80a0436:	9b08      	ldr	r3, [sp, #32]
 80a0438:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80a043c:	3b01      	subs	r3, #1
 80a043e:	9300      	str	r3, [sp, #0]
 80a0440:	9b07      	ldr	r3, [sp, #28]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
 80a0442:	4640      	mov	r0, r8
 80a0444:	f000 fb08 	bl	80a0a58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
 80a0448:	e013      	b.n	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
 80a044a:	a805      	add	r0, sp, #20
 80a044c:	f7ff ff1e 	bl	80a028c <_ZN10BlynkParam8iteratorppEv>
 80a0450:	6803      	ldr	r3, [r0, #0]
 80a0452:	4599      	cmp	r9, r3
 80a0454:	d90d      	bls.n	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
 80a0456:	b2a4      	uxth	r4, r4
 80a0458:	2101      	movs	r1, #1
 80a045a:	4620      	mov	r0, r4
 80a045c:	f003 fe9e 	bl	80a419c <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
 80a0460:	a805      	add	r0, sp, #20
 80a0462:	f7ff ff09 	bl	80a0278 <_ZNK10BlynkParam8iterator5asIntEv>
 80a0466:	1e01      	subs	r1, r0, #0
 80a0468:	bf18      	it	ne
 80a046a:	2101      	movne	r1, #1
 80a046c:	4620      	mov	r0, r4
 80a046e:	f003 fea6 	bl	80a41be <digitalWrite>
    }
}
 80a0472:	b00f      	add	sp, #60	; 0x3c
 80a0474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0478:	ab0a      	add	r3, sp, #40	; 0x28
 80a047a:	9307      	str	r3, [sp, #28]
 80a047c:	2500      	movs	r5, #0
 80a047e:	2310      	movs	r3, #16
 80a0480:	a807      	add	r0, sp, #28
 80a0482:	4928      	ldr	r1, [pc, #160]	; (80a0524 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
 80a0484:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
 80a0488:	f7ff fe22 	bl	80a00d0 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
 80a048c:	a807      	add	r0, sp, #28
 80a048e:	4621      	mov	r1, r4
 80a0490:	f7ff ff0c 	bl	80a02ac <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
 80a0494:	4620      	mov	r0, r4
 80a0496:	f003 febe 	bl	80a4216 <analogRead>
 80a049a:	e7c6      	b.n	80a042a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
 80a049c:	a805      	add	r0, sp, #20
 80a049e:	f7ff fef5 	bl	80a028c <_ZN10BlynkParam8iteratorppEv>
 80a04a2:	6803      	ldr	r3, [r0, #0]
 80a04a4:	4599      	cmp	r9, r3
 80a04a6:	d9e4      	bls.n	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
 80a04a8:	b2a4      	uxth	r4, r4
 80a04aa:	2101      	movs	r1, #1
 80a04ac:	4620      	mov	r0, r4
 80a04ae:	f003 fe75 	bl	80a419c <pinMode>
        analogWrite(pin, it.asInt());
 80a04b2:	a805      	add	r0, sp, #20
 80a04b4:	f7ff fee0 	bl	80a0278 <_ZNK10BlynkParam8iterator5asIntEv>
 80a04b8:	4601      	mov	r1, r0
 80a04ba:	4620      	mov	r0, r4
 80a04bc:	f003 fec2 	bl	80a4244 <_Z11analogWritetm>
    } break;
 80a04c0:	e7d7      	b.n	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
 80a04c2:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
 80a04c4:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
 80a04c8:	f002 fa04 	bl	80a28d4 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
 80a04cc:	4603      	mov	r3, r0
            handler(req);
 80a04ce:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
 80a04d0:	b123      	cbz	r3, 80a04dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
 80a04d2:	4a15      	ldr	r2, [pc, #84]	; (80a0528 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
 80a04d4:	4293      	cmp	r3, r2
 80a04d6:	d001      	beq.n	80a04dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
 80a04d8:	4798      	blx	r3
 80a04da:	e7ca      	b.n	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
 80a04dc:	f002 f9f6 	bl	80a28cc <BlynkWidgetRead>
        }
    }
 80a04e0:	e7c7      	b.n	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
 80a04e2:	a805      	add	r0, sp, #20
 80a04e4:	f7ff fed2 	bl	80a028c <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
 80a04e8:	9b05      	ldr	r3, [sp, #20]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a04ea:	4620      	mov	r0, r4
        BlynkParam param2(start, len - (start - (char*)buff));
 80a04ec:	1b5d      	subs	r5, r3, r5
 80a04ee:	1b75      	subs	r5, r6, r5
        : buff((char*)addr), len(length), buff_size(length)
 80a04f0:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
 80a04f4:	950c      	str	r5, [sp, #48]	; 0x30
        BlynkReq req = { (uint8_t)pin };
 80a04f6:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
 80a04fa:	f002 f9f5 	bl	80a28e8 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
 80a04fe:	4603      	mov	r3, r0
            handler(req, param);
 80a0500:	a90a      	add	r1, sp, #40	; 0x28
 80a0502:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
 80a0504:	b123      	cbz	r3, 80a0510 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
 80a0506:	4a09      	ldr	r2, [pc, #36]	; (80a052c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
 80a0508:	4293      	cmp	r3, r2
 80a050a:	d001      	beq.n	80a0510 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
 80a050c:	4798      	blx	r3
 80a050e:	e7b0      	b.n	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
 80a0510:	f002 f9dd 	bl	80a28ce <BlynkWidgetWrite>
    } break;
 80a0514:	e7ad      	b.n	80a0472 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
 80a0516:	bf00      	nop
 80a0518:	080a6e13 	.word	0x080a6e13
 80a051c:	080a6e16 	.word	0x080a6e16
 80a0520:	080a6e1e 	.word	0x080a6e1e
 80a0524:	080a6e21 	.word	0x080a6e21
 80a0528:	080a28cd 	.word	0x080a28cd
 80a052c:	080a28cf 	.word	0x080a28cf
 80a0530:	080a6e1a 	.word	0x080a6e1a

080a0534 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
 80a0534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0538:	b08c      	sub	sp, #48	; 0x30
 80a053a:	af04      	add	r7, sp, #16
 80a053c:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
 80a053e:	2205      	movs	r2, #5
 80a0540:	6800      	ldr	r0, [r0, #0]
 80a0542:	1d39      	adds	r1, r7, #4
 80a0544:	f003 fa08 	bl	80a3958 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
 80a0548:	b3b8      	cbz	r0, 80a05ba <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
 80a054a:	2805      	cmp	r0, #5
 80a054c:	d004      	beq.n	80a0558 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
 80a054e:	2000      	movs	r0, #0
}
 80a0550:	3720      	adds	r7, #32
 80a0552:	46bd      	mov	sp, r7
 80a0554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
 80a0558:	f8b7 2005 	ldrh.w	r2, [r7, #5]
 80a055c:	0a13      	lsrs	r3, r2, #8
 80a055e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
 80a0562:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
 80a0566:	b299      	uxth	r1, r3
 80a0568:	f8a7 3005 	strh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
 80a056c:	0a13      	lsrs	r3, r2, #8
 80a056e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0572:	fa1f f883 	uxth.w	r8, r3
 80a0576:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
 80a057a:	2900      	cmp	r1, #0
 80a057c:	d0e7      	beq.n	80a054e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
 80a057e:	793b      	ldrb	r3, [r7, #4]
 80a0580:	bb23      	cbnz	r3, 80a05cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
 80a0582:	f002 f9a1 	bl	80a28c8 <_Z11BlynkMillisv>
 80a0586:	4602      	mov	r2, r0
 80a0588:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
 80a058a:	7f60      	ldrb	r0, [r4, #29]
 80a058c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a0590:	b9c0      	cbnz	r0, 80a05c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
 80a0592:	f8b7 1005 	ldrh.w	r1, [r7, #5]
 80a0596:	2901      	cmp	r1, #1
 80a0598:	d114      	bne.n	80a05c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
 80a059a:	2b09      	cmp	r3, #9
 80a059c:	d00f      	beq.n	80a05be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
 80a059e:	2bc8      	cmp	r3, #200	; 0xc8
 80a05a0:	d001      	beq.n	80a05a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
 80a05a2:	2b04      	cmp	r3, #4
 80a05a4:	d1d4      	bne.n	80a0550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
 80a05a6:	2501      	movs	r5, #1
                this->sendInfo();
 80a05a8:	4620      	mov	r0, r4
                lastHeartbeat = lastActivityIn;
 80a05aa:	6162      	str	r2, [r4, #20]
                state = CONNECTED;
 80a05ac:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
 80a05ae:	f000 fb01 	bl	80a0bb4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
 80a05b2:	f7ff fe55 	bl	80a0260 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
 80a05b6:	f002 f98b 	bl	80a28d0 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
 80a05ba:	2001      	movs	r0, #1
 80a05bc:	e7c8      	b.n	80a0550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
 80a05be:	2303      	movs	r3, #3
 80a05c0:	7763      	strb	r3, [r4, #29]
                break;
 80a05c2:	e7c5      	b.n	80a0550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
 80a05c4:	1f58      	subs	r0, r3, #5
 80a05c6:	bf18      	it	ne
 80a05c8:	2001      	movne	r0, #1
 80a05ca:	e7c1      	b.n	80a0550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
 80a05cc:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 80a05d0:	d903      	bls.n	80a05da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
 80a05d2:	4620      	mov	r0, r4
 80a05d4:	f7ff fea4 	bl	80a0320 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a05d8:	e7ef      	b.n	80a05ba <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
 80a05da:	f108 0308 	add.w	r3, r8, #8
 80a05de:	f023 0307 	bic.w	r3, r3, #7
 80a05e2:	466e      	mov	r6, sp
 80a05e4:	ebad 0d03 	sub.w	sp, sp, r3
 80a05e8:	ad04      	add	r5, sp, #16
 80a05ea:	4642      	mov	r2, r8
 80a05ec:	4629      	mov	r1, r5
 80a05ee:	6820      	ldr	r0, [r4, #0]
 80a05f0:	f003 f9b2 	bl	80a3958 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
 80a05f4:	4580      	cmp	r8, r0
 80a05f6:	f04f 0000 	mov.w	r0, #0
 80a05fa:	d17f      	bne.n	80a06fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
 80a05fc:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80a0600:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
 80a0602:	f002 f961 	bl	80a28c8 <_Z11BlynkMillisv>
    switch (hdr.type)
 80a0606:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
 80a0608:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
 80a060a:	2b14      	cmp	r3, #20
 80a060c:	f000 80a6 	beq.w	80a075c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
 80a0610:	d848      	bhi.n	80a06a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
 80a0612:	2b0f      	cmp	r3, #15
 80a0614:	f000 80a2 	beq.w	80a075c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
 80a0618:	d807      	bhi.n	80a062a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
 80a061a:	2b02      	cmp	r3, #2
 80a061c:	d048      	beq.n	80a06b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
 80a061e:	2b06      	cmp	r3, #6
 80a0620:	d051      	beq.n	80a06c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
 80a0622:	4620      	mov	r0, r4
 80a0624:	f7ff fe7c 	bl	80a0320 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
 80a0628:	e058      	b.n	80a06dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
 80a062a:	2b11      	cmp	r3, #17
 80a062c:	d1f9      	bne.n	80a0622 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
 80a062e:	2300      	movs	r3, #0
 80a0630:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
 80a0632:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
 80a0636:	442b      	add	r3, r5
        if (it >= param.end())
 80a0638:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a063a:	e9c7 5303 	strd	r5, r3, [r7, #12]
 80a063e:	d24d      	bcs.n	80a06dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
 80a0640:	f107 000c 	add.w	r0, r7, #12
 80a0644:	f8d5 8000 	ldr.w	r8, [r5]
 80a0648:	f7ff fe20 	bl	80a028c <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
 80a064c:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
 80a064e:	f8b7 1007 	ldrh.w	r1, [r7, #7]
 80a0652:	1b5d      	subs	r5, r3, r5
 80a0654:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
 80a0656:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
 80a065a:	687b      	ldr	r3, [r7, #4]
 80a065c:	61fd      	str	r5, [r7, #28]
 80a065e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80a0662:	8363      	strh	r3, [r4, #26]
 80a0664:	4b64      	ldr	r3, [pc, #400]	; (80a07f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
 80a0666:	4598      	cmp	r8, r3
 80a0668:	f000 80bf 	beq.w	80a07ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
 80a066c:	f200 808c 	bhi.w	80a0788 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
 80a0670:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80a0674:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
 80a0678:	4413      	add	r3, r2
 80a067a:	4598      	cmp	r8, r3
 80a067c:	f000 809d 	beq.w	80a07ba <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
 80a0680:	d879      	bhi.n	80a0776 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
 80a0682:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
 80a0686:	3b06      	subs	r3, #6
 80a0688:	4598      	cmp	r8, r3
 80a068a:	f000 809c 	beq.w	80a07c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
 80a068e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80a0692:	3303      	adds	r3, #3
 80a0694:	4598      	cmp	r8, r3
 80a0696:	d16b      	bne.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
 80a0698:	4638      	mov	r0, r7
 80a069a:	f107 0114 	add.w	r1, r7, #20
 80a069e:	f002 f916 	bl	80a28ce <BlynkWidgetWrite>
 80a06a2:	e065      	b.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
 80a06a4:	2b29      	cmp	r3, #41	; 0x29
 80a06a6:	d01b      	beq.n	80a06e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
 80a06a8:	2b37      	cmp	r3, #55	; 0x37
 80a06aa:	d017      	beq.n	80a06dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
 80a06ac:	2b1d      	cmp	r3, #29
 80a06ae:	d1b8      	bne.n	80a0622 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
 80a06b0:	7f63      	ldrb	r3, [r4, #29]
 80a06b2:	b943      	cbnz	r3, 80a06c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
 80a06b4:	2301      	movs	r3, #1
            this->sendInfo();
 80a06b6:	4620      	mov	r0, r4
            state = CONNECTED;
 80a06b8:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
 80a06ba:	f000 fa7b 	bl	80a0bb4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
 80a06be:	f7ff fdcf 	bl	80a0260 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
 80a06c2:	f002 f905 	bl	80a28d0 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
 80a06c6:	2300      	movs	r3, #0
 80a06c8:	21c8      	movs	r1, #200	; 0xc8
 80a06ca:	f8b7 2005 	ldrh.w	r2, [r7, #5]
 80a06ce:	4620      	mov	r0, r4
 80a06d0:	9100      	str	r1, [sp, #0]
 80a06d2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a06d6:	4619      	mov	r1, r3
 80a06d8:	f000 f9be 	bl	80a0a58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
 80a06dc:	2001      	movs	r0, #1
 80a06de:	e00d      	b.n	80a06fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
 80a06e0:	68a3      	ldr	r3, [r4, #8]
 80a06e2:	b91b      	cbnz	r3, 80a06ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
 80a06e4:	2040      	movs	r0, #64	; 0x40
 80a06e6:	f002 fba7 	bl	80a2e38 <malloc>
 80a06ea:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
 80a06ec:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
 80a06f0:	44a8      	add	r8, r5
        if (it >= param.end())
 80a06f2:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
 80a06f4:	e9c7 5805 	strd	r5, r8, [r7, #20]
 80a06f8:	d302      	bcc.n	80a0700 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
 80a06fa:	2000      	movs	r0, #0
 80a06fc:	46b5      	mov	sp, r6
 80a06fe:	e727      	b.n	80a0550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
 80a0700:	4629      	mov	r1, r5
        redir_serv[63] = '\0';
 80a0702:	2500      	movs	r5, #0
        strncpy(redir_serv, it.asStr(), 64);
 80a0704:	2240      	movs	r2, #64	; 0x40
 80a0706:	68a0      	ldr	r0, [r4, #8]
 80a0708:	f004 fcd2 	bl	80a50b0 <strncpy>
        redir_serv[63] = '\0';
 80a070c:	68a3      	ldr	r3, [r4, #8]
        if (++it < param.end())
 80a070e:	f107 0014 	add.w	r0, r7, #20
        redir_serv[63] = '\0';
 80a0712:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
 80a0716:	f7ff fdb9 	bl	80a028c <_ZN10BlynkParam8iteratorppEv>
 80a071a:	6803      	ldr	r3, [r0, #0]
 80a071c:	4543      	cmp	r3, r8
 80a071e:	d21b      	bcs.n	80a0758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
 80a0720:	6978      	ldr	r0, [r7, #20]
 80a0722:	b120      	cbz	r0, 80a072e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
 80a0724:	69bb      	ldr	r3, [r7, #24]
 80a0726:	4298      	cmp	r0, r3
 80a0728:	d214      	bcs.n	80a0754 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
 80a072a:	f004 fc50 	bl	80a4fce <atol>
            redir_port = it.asLong();
 80a072e:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
 80a0730:	6820      	ldr	r0, [r4, #0]
 80a0732:	f002 fe15 	bl	80a3360 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
 80a0736:	6823      	ldr	r3, [r4, #0]
 80a0738:	68a2      	ldr	r2, [r4, #8]
        port = p;
 80a073a:	871d      	strh	r5, [r3, #56]	; 0x38
        domain = d;
 80a073c:	635a      	str	r2, [r3, #52]	; 0x34
        state = CONNECTING;
 80a073e:	2300      	movs	r3, #0
 80a0740:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a0742:	f002 f8c1 	bl	80a28c8 <_Z11BlynkMillisv>
 80a0746:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a074a:	3808      	subs	r0, #8
 80a074c:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80a0750:	6160      	str	r0, [r4, #20]
 80a0752:	e7c3      	b.n	80a06dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
 80a0754:	4628      	mov	r0, r5
 80a0756:	e7ea      	b.n	80a072e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
 80a0758:	2550      	movs	r5, #80	; 0x50
 80a075a:	e7e9      	b.n	80a0730 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
 80a075c:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
 80a075e:	4629      	mov	r1, r5
        msgIdOutOverride = hdr.msg_id;
 80a0760:	f3c3 230f 	ubfx	r3, r3, #8, #16
        this->processCmd(inputBuffer, hdr.length);
 80a0764:	4620      	mov	r0, r4
 80a0766:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
 80a076a:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
 80a076c:	f7ff fde2 	bl	80a0334 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
 80a0770:	2300      	movs	r3, #0
 80a0772:	8363      	strh	r3, [r4, #26]
 80a0774:	e7b2      	b.n	80a06dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
 80a0776:	4b21      	ldr	r3, [pc, #132]	; (80a07fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
 80a0778:	4598      	cmp	r8, r3
 80a077a:	d1f9      	bne.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
 80a077c:	4638      	mov	r0, r7
 80a077e:	f107 0114 	add.w	r1, r7, #20
 80a0782:	f002 f8a4 	bl	80a28ce <BlynkWidgetWrite>
 80a0786:	e7f3      	b.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
 80a0788:	4b1d      	ldr	r3, [pc, #116]	; (80a0800 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
 80a078a:	4598      	cmp	r8, r3
 80a078c:	d021      	beq.n	80a07d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
 80a078e:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
 80a0792:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80a0796:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80a079a:	4598      	cmp	r8, r3
 80a079c:	d01f      	beq.n	80a07de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
 80a079e:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
 80a07a2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
 80a07a6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80a07aa:	4598      	cmp	r8, r3
 80a07ac:	d1e0      	bne.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
 80a07ae:	4638      	mov	r0, r7
 80a07b0:	f107 0114 	add.w	r1, r7, #20
 80a07b4:	f002 f88b 	bl	80a28ce <BlynkWidgetWrite>
 80a07b8:	e7da      	b.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
 80a07ba:	4638      	mov	r0, r7
 80a07bc:	f107 0114 	add.w	r1, r7, #20
 80a07c0:	f002 f885 	bl	80a28ce <BlynkWidgetWrite>
 80a07c4:	e7d4      	b.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
 80a07c6:	4638      	mov	r0, r7
 80a07c8:	f107 0114 	add.w	r1, r7, #20
 80a07cc:	f002 f87f 	bl	80a28ce <BlynkWidgetWrite>
 80a07d0:	e7ce      	b.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
 80a07d2:	4638      	mov	r0, r7
 80a07d4:	f107 0114 	add.w	r1, r7, #20
 80a07d8:	f002 f879 	bl	80a28ce <BlynkWidgetWrite>
 80a07dc:	e7c8      	b.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
 80a07de:	4638      	mov	r0, r7
 80a07e0:	f107 0114 	add.w	r1, r7, #20
 80a07e4:	f002 f873 	bl	80a28ce <BlynkWidgetWrite>
 80a07e8:	e7c2      	b.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
 80a07ea:	4638      	mov	r0, r7
 80a07ec:	f107 0114 	add.w	r1, r7, #20
 80a07f0:	f002 f86d 	bl	80a28ce <BlynkWidgetWrite>
 80a07f4:	e7bc      	b.n	80a0770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
 80a07f6:	bf00      	nop
 80a07f8:	00736676 	.word	0x00736676
 80a07fc:	00676264 	.word	0x00676264
 80a0800:	6e6f6361 	.word	0x6e6f6361

080a0804 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
 80a0804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0808:	4604      	mov	r4, r0
 80a080a:	b08a      	sub	sp, #40	; 0x28
 80a080c:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
 80a080e:	f7ff fd27 	bl	80a0260 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
 80a0812:	7f63      	ldrb	r3, [r4, #29]
 80a0814:	2b02      	cmp	r3, #2
 80a0816:	f000 80a7 	beq.w	80a0968 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x164>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
 80a081a:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
 80a081c:	8b62      	ldrh	r2, [r4, #26]
 80a081e:	3301      	adds	r3, #1
 80a0820:	b2db      	uxtb	r3, r3
 80a0822:	7723      	strb	r3, [r4, #28]
 80a0824:	b10a      	cbz	r2, 80a082a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
 80a0826:	2501      	movs	r5, #1
 80a0828:	e016      	b.n	80a0858 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
 80a082a:	2b02      	cmp	r3, #2
 80a082c:	d8fb      	bhi.n	80a0826 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
 80a082e:	6820      	ldr	r0, [r4, #0]
 80a0830:	f002 fded 	bl	80a340e <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
 80a0834:	b1b8      	cbz	r0, 80a0866 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
 80a0836:	b925      	cbnz	r5, 80a0842 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
 80a0838:	6820      	ldr	r0, [r4, #0]
 80a083a:	f002 fd57 	bl	80a32ec <_ZN9TCPClient9availableEv>
 80a083e:	2800      	cmp	r0, #0
 80a0840:	dd11      	ble.n	80a0866 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
 80a0842:	4620      	mov	r0, r4
 80a0844:	f7ff fe76 	bl	80a0534 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
 80a0848:	4605      	mov	r5, r0
 80a084a:	2800      	cmp	r0, #0
 80a084c:	d1f4      	bne.n	80a0838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
 80a084e:	6820      	ldr	r0, [r4, #0]
 80a0850:	f002 fd86 	bl	80a3360 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
 80a0854:	f002 f83c 	bl	80a28d0 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
 80a0858:	7f23      	ldrb	r3, [r4, #28]
 80a085a:	3b01      	subs	r3, #1
 80a085c:	7723      	strb	r3, [r4, #28]
}
 80a085e:	4628      	mov	r0, r5
 80a0860:	b00a      	add	sp, #40	; 0x28
 80a0862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
 80a0866:	f002 f82f 	bl	80a28c8 <_Z11BlynkMillisv>
 80a086a:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
 80a086c:	6820      	ldr	r0, [r4, #0]
 80a086e:	f002 fdce 	bl	80a340e <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
 80a0872:	7f67      	ldrb	r7, [r4, #29]
 80a0874:	4605      	mov	r5, r0
 80a0876:	2f01      	cmp	r7, #1
 80a0878:	d129      	bne.n	80a08ce <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
 80a087a:	b920      	cbnz	r0, 80a0886 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            internalReconnect();
 80a087c:	4620      	mov	r0, r4
            lastHeartbeat = t;
 80a087e:	6166      	str	r6, [r4, #20]
            internalReconnect();
 80a0880:	f7ff fd4e 	bl	80a0320 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a0884:	e7e8      	b.n	80a0858 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
 80a0886:	f24f 6218 	movw	r2, #63000	; 0xf618
 80a088a:	68e3      	ldr	r3, [r4, #12]
 80a088c:	1af3      	subs	r3, r6, r3
 80a088e:	4293      	cmp	r3, r2
 80a0890:	d904      	bls.n	80a089c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
 80a0892:	4620      	mov	r0, r4
 80a0894:	f7ff fd44 	bl	80a0320 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
 80a0898:	2500      	movs	r5, #0
 80a089a:	e7dd      	b.n	80a0858 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a089c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80a08a0:	4293      	cmp	r3, r2
 80a08a2:	d803      	bhi.n	80a08ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a08a4:	6923      	ldr	r3, [r4, #16]
 80a08a6:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
 80a08a8:	4293      	cmp	r3, r2
 80a08aa:	d9bc      	bls.n	80a0826 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a08ac:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
 80a08b0:	6963      	ldr	r3, [r4, #20]
 80a08b2:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
 80a08b4:	4293      	cmp	r3, r2
 80a08b6:	d9b6      	bls.n	80a0826 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
 80a08b8:	2300      	movs	r3, #0
 80a08ba:	2106      	movs	r1, #6
 80a08bc:	461a      	mov	r2, r3
 80a08be:	4620      	mov	r0, r4
 80a08c0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a08c4:	9300      	str	r3, [sp, #0]
 80a08c6:	f000 f8c7 	bl	80a0a58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
 80a08ca:	6166      	str	r6, [r4, #20]
 80a08cc:	e7ab      	b.n	80a0826 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
 80a08ce:	2f00      	cmp	r7, #0
 80a08d0:	d1a9      	bne.n	80a0826 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
 80a08d2:	6962      	ldr	r2, [r4, #20]
 80a08d4:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
 80a08d6:	b140      	cbz	r0, 80a08ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
 80a08d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80a08dc:	429a      	cmp	r2, r3
 80a08de:	d9a2      	bls.n	80a0826 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
 80a08e0:	6820      	ldr	r0, [r4, #0]
 80a08e2:	f002 fd3d 	bl	80a3360 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
 80a08e6:	7767      	strb	r7, [r4, #29]
 80a08e8:	e7d6      	b.n	80a0898 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
 80a08ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80a08ee:	429a      	cmp	r2, r3
 80a08f0:	d999      	bls.n	80a0826 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
 80a08f2:	6820      	ldr	r0, [r4, #0]
 80a08f4:	f002 fd34 	bl	80a3360 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
 80a08f8:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
 80a08fc:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
 80a0900:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
 80a0904:	f1be 0f00 	cmp.w	lr, #0
 80a0908:	d00b      	beq.n	80a0922 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
 80a090a:	462b      	mov	r3, r5
 80a090c:	4642      	mov	r2, r8
 80a090e:	4671      	mov	r1, lr
 80a0910:	4660      	mov	r0, ip
 80a0912:	f002 fded 	bl	80a34f0 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
 80a0916:	1e43      	subs	r3, r0, #1
 80a0918:	425d      	negs	r5, r3
 80a091a:	415d      	adcs	r5, r3
 80a091c:	b98d      	cbnz	r5, 80a0942 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
 80a091e:	6166      	str	r6, [r4, #20]
                return false;
 80a0920:	e79a      	b.n	80a0858 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0922:	4b12      	ldr	r3, [pc, #72]	; (80a096c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x168>)
 80a0924:	ad05      	add	r5, sp, #20
 80a0926:	f10c 0720 	add.w	r7, ip, #32
 80a092a:	9304      	str	r3, [sp, #16]
 80a092c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80a092e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0930:	683b      	ldr	r3, [r7, #0]
 80a0932:	4642      	mov	r2, r8
 80a0934:	702b      	strb	r3, [r5, #0]
 80a0936:	4660      	mov	r0, ip
 80a0938:	4673      	mov	r3, lr
 80a093a:	a904      	add	r1, sp, #16
 80a093c:	f002 fc66 	bl	80a320c <_ZN9TCPClient7connectE9IPAddresstm>
 80a0940:	e7e9      	b.n	80a0916 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            msgIdOut = 1;
 80a0942:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
 80a0944:	6867      	ldr	r7, [r4, #4]
            msgIdOut = 1;
 80a0946:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
 80a0948:	4638      	mov	r0, r7
 80a094a:	f004 fb97 	bl	80a507c <strlen>
 80a094e:	2300      	movs	r3, #0
 80a0950:	9000      	str	r0, [sp, #0]
 80a0952:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a0956:	4632      	mov	r2, r6
 80a0958:	463b      	mov	r3, r7
 80a095a:	211d      	movs	r1, #29
 80a095c:	4620      	mov	r0, r4
 80a095e:	f000 f87b 	bl	80a0a58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
 80a0962:	6923      	ldr	r3, [r4, #16]
 80a0964:	6163      	str	r3, [r4, #20]
            return true;
 80a0966:	e777      	b.n	80a0858 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
 80a0968:	2500      	movs	r5, #0
 80a096a:	e778      	b.n	80a085e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
 80a096c:	080a7ee0 	.word	0x080a7ee0

080a0970 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
 80a0970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0974:	4615      	mov	r5, r2
 80a0976:	4604      	mov	r4, r0
 80a0978:	460f      	mov	r7, r1
 80a097a:	b08c      	sub	sp, #48	; 0x30
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
 80a097c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a0980:	ae01      	add	r6, sp, #4
 80a0982:	3504      	adds	r5, #4
    void begin( const char* auth,
 80a0984:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
 80a0986:	f001 ff9d 	bl	80a28c4 <_Z10BlynkDelaym>
 80a098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a098c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a098e:	682b      	ldr	r3, [r5, #0]
        this->authkey = auth;
 80a0990:	6067      	str	r7, [r4, #4]
 80a0992:	7033      	strb	r3, [r6, #0]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
 80a0994:	f001 ff98 	bl	80a28c8 <_Z11BlynkMillisv>
        domain = NULL;
 80a0998:	f04f 0c00 	mov.w	ip, #0
 80a099c:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
 80a09a0:	3808      	subs	r0, #8
 80a09a2:	ae07      	add	r6, sp, #28
 80a09a4:	af01      	add	r7, sp, #4
 80a09a6:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80a09aa:	6160      	str	r0, [r4, #20]
 80a09ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80a09ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
 80a09b0:	6825      	ldr	r5, [r4, #0]
 80a09b2:	683b      	ldr	r3, [r7, #0]
        domain = NULL;
 80a09b4:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
 80a09b8:	7033      	strb	r3, [r6, #0]
        port = p;
 80a09ba:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
 80a09be:	af07      	add	r7, sp, #28
 80a09c0:	3520      	adds	r5, #32
 80a09c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        while ((state != CONNECTED) &&
 80a09c4:	f244 674f 	movw	r7, #17999	; 0x464f
 80a09c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a09ca:	6833      	ldr	r3, [r6, #0]
        state = CONNECTING;
 80a09cc:	4666      	mov	r6, ip
 80a09ce:	702b      	strb	r3, [r5, #0]
    void disconnect() { client.stop(); }
 80a09d0:	6820      	ldr	r0, [r4, #0]
 80a09d2:	f002 fcc5 	bl	80a3360 <_ZN9TCPClient4stopEv>
 80a09d6:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
 80a09d8:	f001 ff76 	bl	80a28c8 <_Z11BlynkMillisv>
 80a09dc:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
 80a09de:	7f63      	ldrb	r3, [r4, #29]
 80a09e0:	2b01      	cmp	r3, #1
 80a09e2:	d00c      	beq.n	80a09fe <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
 80a09e4:	f001 ff70 	bl	80a28c8 <_Z11BlynkMillisv>
 80a09e8:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
 80a09ea:	42b8      	cmp	r0, r7
 80a09ec:	d804      	bhi.n	80a09f8 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
 80a09ee:	2100      	movs	r1, #0
 80a09f0:	4620      	mov	r0, r4
 80a09f2:	f7ff ff07 	bl	80a0804 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
 80a09f6:	e7f2      	b.n	80a09de <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
 80a09f8:	7f63      	ldrb	r3, [r4, #29]
 80a09fa:	2b01      	cmp	r3, #1
 80a09fc:	d1e8      	bne.n	80a09d0 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
 80a09fe:	b00c      	add	sp, #48	; 0x30
 80a0a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0a04 <setup>:
void setup() {
 80a0a04:	b510      	push	{r4, lr}
  display.setup();
 80a0a06:	4c11      	ldr	r4, [pc, #68]	; (80a0a4c <setup+0x48>)
void setup() {
 80a0a08:	b088      	sub	sp, #32
  display.setup();
 80a0a0a:	4620      	mov	r0, r4
 80a0a0c:	f000 fe40 	bl	80a1690 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
 80a0a10:	4620      	mov	r0, r4
 80a0a12:	f001 fc4f 	bl	80a22b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
 80a0a16:	4620      	mov	r0, r4
 80a0a18:	f001 feba 	bl	80a2790 <_ZN16Adafruit_SSD13067displayEv>
  Serial.begin(9600); 
 80a0a1c:	f003 f96e 	bl	80a3cfc <_Z16_fetch_usbserialv>
 80a0a20:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0a24:	f003 f950 	bl	80a3cc8 <_ZN9USBSerial5beginEl>
  Blynk.begin("Puld8oY50QyXB59WD30IhNaYZct4IxYt", IPAddress(167, 172, 234, 162), 9090); 
 80a0a28:	23a2      	movs	r3, #162	; 0xa2
 80a0a2a:	22ac      	movs	r2, #172	; 0xac
 80a0a2c:	9300      	str	r3, [sp, #0]
 80a0a2e:	21a7      	movs	r1, #167	; 0xa7
 80a0a30:	23ea      	movs	r3, #234	; 0xea
 80a0a32:	a802      	add	r0, sp, #8
 80a0a34:	f003 f8d8 	bl	80a3be8 <_ZN9IPAddressC1Ehhhh>
 80a0a38:	f242 3382 	movw	r3, #9090	; 0x2382
 80a0a3c:	4904      	ldr	r1, [pc, #16]	; (80a0a50 <setup+0x4c>)
 80a0a3e:	4805      	ldr	r0, [pc, #20]	; (80a0a54 <setup+0x50>)
 80a0a40:	aa02      	add	r2, sp, #8
 80a0a42:	f7ff ff95 	bl	80a0970 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
}
 80a0a46:	b008      	add	sp, #32
 80a0a48:	bd10      	pop	{r4, pc}
 80a0a4a:	bf00      	nop
 80a0a4c:	20000298 	.word	0x20000298
 80a0a50:	080a6e24 	.word	0x080a6e24
 80a0a54:	200001dc 	.word	0x200001dc

080a0a58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a0a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0a5c:	b083      	sub	sp, #12
 80a0a5e:	4604      	mov	r4, r0
 80a0a60:	af00      	add	r7, sp, #0
    bool connected() { return client.connected(); }
 80a0a62:	6800      	ldr	r0, [r0, #0]
 80a0a64:	4688      	mov	r8, r1
 80a0a66:	4616      	mov	r6, r2
 80a0a68:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
 80a0a6a:	46eb      	mov	fp, sp
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
 80a0a6c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80a0a6e:	f002 fcce 	bl	80a340e <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
 80a0a72:	2800      	cmp	r0, #0
 80a0a74:	d07f      	beq.n	80a0b76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
 80a0a76:	f1b8 0f1d 	cmp.w	r8, #29
 80a0a7a:	d804      	bhi.n	80a0a86 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
 80a0a7c:	4b4c      	ldr	r3, [pc, #304]	; (80a0bb0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
 80a0a7e:	fa23 f308 	lsr.w	r3, r3, r8
 80a0a82:	07db      	lsls	r3, r3, #31
 80a0a84:	d402      	bmi.n	80a0a8c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
 80a0a86:	7f63      	ldrb	r3, [r4, #29]
 80a0a88:	2b01      	cmp	r3, #1
 80a0a8a:	d174      	bne.n	80a0b76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
 80a0a8c:	b946      	cbnz	r6, 80a0aa0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
 80a0a8e:	8b66      	ldrh	r6, [r4, #26]
 80a0a90:	b936      	cbnz	r6, 80a0aa0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
 80a0a92:	8b23      	ldrh	r3, [r4, #24]
 80a0a94:	3301      	adds	r3, #1
 80a0a96:	b29b      	uxth	r3, r3
 80a0a98:	2b00      	cmp	r3, #0
 80a0a9a:	d071      	beq.n	80a0b80 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
 80a0a9c:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
 80a0a9e:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
 80a0aa0:	f1a8 030c 	sub.w	r3, r8, #12
 80a0aa4:	2b08      	cmp	r3, #8
 80a0aa6:	d816      	bhi.n	80a0ad6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
 80a0aa8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80a0aac:	4293      	cmp	r3, r2
 80a0aae:	bf38      	it	cc
 80a0ab0:	4613      	movcc	r3, r2
 80a0ab2:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
 80a0ab6:	f001 ff07 	bl	80a28c8 <_Z11BlynkMillisv>
 80a0aba:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
 80a0abe:	2800      	cmp	r0, #0
 80a0ac0:	db60      	blt.n	80a0b84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
 80a0ac2:	2100      	movs	r1, #0
 80a0ac4:	4620      	mov	r0, r4
 80a0ac6:	f7ff fe9d 	bl	80a0804 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
 80a0aca:	f001 fefd 	bl	80a28c8 <_Z11BlynkMillisv>
 80a0ace:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
 80a0ad2:	2800      	cmp	r0, #0
 80a0ad4:	daf5      	bge.n	80a0ac2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a0ad6:	f1b9 0f00 	cmp.w	r9, #0
 80a0ada:	d05a      	beq.n	80a0b92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
 80a0adc:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
 80a0ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    hdr->msg_id = htons(id);
 80a0ae0:	ba76      	rev16	r6, r6
                               (data  ? length  : 0) +
 80a0ae2:	2a00      	cmp	r2, #0
 80a0ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a0ae6:	bf08      	it	eq
 80a0ae8:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a0aea:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
 80a0aee:	f10a 0307 	add.w	r3, sl, #7
 80a0af2:	f023 0307 	bic.w	r3, r3, #7
 80a0af6:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
 80a0afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
 80a0afc:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
 80a0b00:	18ea      	adds	r2, r5, r3
 80a0b02:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80a0b06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
 80a0b0a:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
 80a0b0e:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
 80a0b12:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
 80a0b16:	f1b9 0f00 	cmp.w	r9, #0
 80a0b1a:	d03c      	beq.n	80a0b96 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
 80a0b1c:	2d00      	cmp	r5, #0
 80a0b1e:	d03a      	beq.n	80a0b96 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
 80a0b20:	462a      	mov	r2, r5
 80a0b22:	4649      	mov	r1, r9
 80a0b24:	f10d 0005 	add.w	r0, sp, #5
 80a0b28:	f004 fa64 	bl	80a4ff4 <memcpy>
        pos += length;
 80a0b2c:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
 80a0b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80a0b30:	b13b      	cbz	r3, 80a0b42 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
 80a0b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a0b34:	b12b      	cbz	r3, 80a0b42 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
 80a0b36:	461a      	mov	r2, r3
 80a0b38:	687b      	ldr	r3, [r7, #4]
 80a0b3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80a0b3c:	4418      	add	r0, r3
 80a0b3e:	f004 fa59 	bl	80a4ff4 <memcpy>
    size_t pos = sizeof(BlynkHeader);
 80a0b42:	2500      	movs	r5, #0
    while (wlen < full_length) {
 80a0b44:	4555      	cmp	r5, sl
 80a0b46:	d22a      	bcs.n	80a0b9e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
 80a0b48:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
 80a0b4c:	687b      	ldr	r3, [r7, #4]
 80a0b4e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80a0b52:	bf28      	it	cs
 80a0b54:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80a0b58:	6820      	ldr	r0, [r4, #0]
 80a0b5a:	1959      	adds	r1, r3, r5
 80a0b5c:	f002 fa8b 	bl	80a3076 <_ZN9TCPClient5writeEPKhj>
 80a0b60:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
 80a0b62:	2000      	movs	r0, #0
 80a0b64:	f001 feae 	bl	80a28c4 <_Z10BlynkDelaym>
        if (w == 0) {
 80a0b68:	b9be      	cbnz	r6, 80a0b9a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
 80a0b6a:	6820      	ldr	r0, [r4, #0]
 80a0b6c:	f002 fbf8 	bl	80a3360 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
 80a0b70:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
 80a0b72:	f001 fead 	bl	80a28d0 <BlynkNoOpCbk>
 80a0b76:	46dd      	mov	sp, fp
}
 80a0b78:	370c      	adds	r7, #12
 80a0b7a:	46bd      	mov	sp, r7
 80a0b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
 80a0b80:	2301      	movs	r3, #1
 80a0b82:	e78b      	b.n	80a0a9c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
 80a0b84:	7f21      	ldrb	r1, [r4, #28]
 80a0b86:	2900      	cmp	r1, #0
 80a0b88:	d1a5      	bne.n	80a0ad6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
 80a0b8a:	4620      	mov	r0, r4
 80a0b8c:	f7ff fe3a 	bl	80a0804 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
 80a0b90:	e7a1      	b.n	80a0ad6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
 80a0b92:	2305      	movs	r3, #5
 80a0b94:	e7a3      	b.n	80a0ade <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
 80a0b96:	2005      	movs	r0, #5
 80a0b98:	e7c9      	b.n	80a0b2e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
 80a0b9a:	4435      	add	r5, r6
    while (wlen < full_length) {
 80a0b9c:	e7d2      	b.n	80a0b44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
 80a0b9e:	d003      	beq.n	80a0ba8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
 80a0ba0:	4620      	mov	r0, r4
 80a0ba2:	f7ff fbbd 	bl	80a0320 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
 80a0ba6:	e7e6      	b.n	80a0b76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
 80a0ba8:	f001 fe8e 	bl	80a28c8 <_Z11BlynkMillisv>
 80a0bac:	6120      	str	r0, [r4, #16]
 80a0bae:	e7e2      	b.n	80a0b76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
 80a0bb0:	20000045 	.word	0x20000045

080a0bb4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
 80a0bb4:	b500      	push	{lr}
 80a0bb6:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
 80a0bb8:	ab04      	add	r3, sp, #16
 80a0bba:	2200      	movs	r2, #0
 80a0bbc:	9301      	str	r3, [sp, #4]
 80a0bbe:	2350      	movs	r3, #80	; 0x50
 80a0bc0:	2111      	movs	r1, #17
 80a0bc2:	9300      	str	r3, [sp, #0]
 80a0bc4:	9202      	str	r2, [sp, #8]
 80a0bc6:	4b03      	ldr	r3, [pc, #12]	; (80a0bd4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
 80a0bc8:	f7ff ff46 	bl	80a0a58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
 80a0bcc:	b015      	add	sp, #84	; 0x54
 80a0bce:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0bd2:	bf00      	nop
 80a0bd4:	080a6e7c 	.word	0x080a6e7c

080a0bd8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiddPKcEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
 80a0bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0bda:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
 80a0bde:	ab08      	add	r3, sp, #32
 80a0be0:	460f      	mov	r7, r1
 80a0be2:	4616      	mov	r6, r2
 80a0be4:	9305      	str	r3, [sp, #20]
 80a0be6:	2200      	movs	r2, #0
 80a0be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a0bec:	491b      	ldr	r1, [pc, #108]	; (80a0c5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiddPKcEEEviDpT_+0x84>)
 80a0bee:	4604      	mov	r4, r0
 80a0bf0:	a805      	add	r0, sp, #20
 80a0bf2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a0bf6:	f8dd 5448 	ldr.w	r5, [sp, #1096]	; 0x448
 80a0bfa:	f7ff fa69 	bl	80a00d0 <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
 80a0bfe:	4639      	mov	r1, r7
 80a0c00:	a805      	add	r0, sp, #20
 80a0c02:	f7ff fb53 	bl	80a02ac <_ZN10BlynkParam3addEi>
        add(head);
 80a0c06:	4631      	mov	r1, r6
 80a0c08:	a805      	add	r0, sp, #20
 80a0c0a:	f7ff fb4f 	bl	80a02ac <_ZN10BlynkParam3addEi>
 80a0c0e:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 80a0c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c16:	a805      	add	r0, sp, #20
 80a0c18:	f7ff fb6c 	bl	80a02f4 <_ZN10BlynkParam3addEd>
 80a0c1c:	f50d 6388 	add.w	r3, sp, #1088	; 0x440
 80a0c20:	a805      	add	r0, sp, #20
 80a0c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c26:	f7ff fb65 	bl	80a02f4 <_ZN10BlynkParam3addEd>
    if (str == NULL) {
 80a0c2a:	b995      	cbnz	r5, 80a0c52 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiddPKcEEEviDpT_+0x7a>
        buff[len++] = '\0';
 80a0c2c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80a0c30:	1c59      	adds	r1, r3, #1
 80a0c32:	9106      	str	r1, [sp, #24]
 80a0c34:	54d5      	strb	r5, [r2, r3]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
 80a0c36:	2200      	movs	r2, #0
 80a0c38:	9b06      	ldr	r3, [sp, #24]
 80a0c3a:	2114      	movs	r1, #20
 80a0c3c:	3b01      	subs	r3, #1
 80a0c3e:	9300      	str	r3, [sp, #0]
 80a0c40:	4620      	mov	r0, r4
 80a0c42:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a0c46:	9b05      	ldr	r3, [sp, #20]
 80a0c48:	f7ff ff06 	bl	80a0a58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
 80a0c4c:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 80a0c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c52:	4629      	mov	r1, r5
 80a0c54:	a805      	add	r0, sp, #20
 80a0c56:	f7ff fa3b 	bl	80a00d0 <_ZN10BlynkParam3addEPKc.part.0>
 80a0c5a:	e7ec      	b.n	80a0c36 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiddPKcEEEviDpT_+0x5e>
 80a0c5c:	080a6e45 	.word	0x080a6e45

080a0c60 <loop>:
// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // The core of your code will likely live here.
  if (client.isConnected()) {
 80a0c64:	482f      	ldr	r0, [pc, #188]	; (80a0d24 <loop+0xc4>)
void loop() {
 80a0c66:	b08a      	sub	sp, #40	; 0x28
  if (client.isConnected()) {
 80a0c68:	f000 feee 	bl	80a1a48 <_ZN4MQTT11isConnectedEv>
 80a0c6c:	2800      	cmp	r0, #0
 80a0c6e:	d04e      	beq.n	80a0d0e <loop+0xae>
    client.loop();
 80a0c70:	482c      	ldr	r0, [pc, #176]	; (80a0d24 <loop+0xc4>)
 80a0c72:	f001 f831 	bl	80a1cd8 <_ZN4MQTT4loopEv>
    client.subscribe("noderedlat");
    client.subscribe("noderedlong");
    
  } 
  // displays the lat and long on oled and then on blynk shows it on the map
  display.loop();
 80a0c76:	4c2c      	ldr	r4, [pc, #176]	; (80a0d28 <loop+0xc8>)
    client.subscribe("noderedlat");
 80a0c78:	492c      	ldr	r1, [pc, #176]	; (80a0d2c <loop+0xcc>)
 80a0c7a:	482a      	ldr	r0, [pc, #168]	; (80a0d24 <loop+0xc4>)
 80a0c7c:	f001 f96e 	bl	80a1f5c <_ZN4MQTT9subscribeEPKc>
    client.subscribe("noderedlong");
 80a0c80:	492b      	ldr	r1, [pc, #172]	; (80a0d30 <loop+0xd0>)
 80a0c82:	4828      	ldr	r0, [pc, #160]	; (80a0d24 <loop+0xc4>)
 80a0c84:	f001 f96a 	bl	80a1f5c <_ZN4MQTT9subscribeEPKc>
  display.loop();
 80a0c88:	4620      	mov	r0, r4
 80a0c8a:	f000 fd2a 	bl	80a16e2 <_ZN16OledWingAdafruit4loopEv>
  Blynk.run();
 80a0c8e:	2100      	movs	r1, #0
 80a0c90:	4828      	ldr	r0, [pc, #160]	; (80a0d34 <loop+0xd4>)
 80a0c92:	f7ff fdb7 	bl	80a0804 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  display.clearDisplay();
 80a0c96:	4620      	mov	r0, r4
 80a0c98:	f001 fb0c 	bl	80a22b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
 80a0c9c:	4620      	mov	r0, r4
 80a0c9e:	2101      	movs	r1, #1
 80a0ca0:	f000 fca7 	bl	80a15f2 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80a0ca4:	2500      	movs	r5, #0
 80a0ca6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.print("Longitude: ");
  display.println(longitude);
 80a0caa:	f04f 0802 	mov.w	r8, #2
 80a0cae:	4f22      	ldr	r7, [pc, #136]	; (80a0d38 <loop+0xd8>)
  display.print("Longitude: ");
 80a0cb0:	4922      	ldr	r1, [pc, #136]	; (80a0d3c <loop+0xdc>)
 80a0cb2:	4620      	mov	r0, r4
 80a0cb4:	e9c4 5304 	strd	r5, r3, [r4, #16]
  display.print("Latitude: ");
  display.println(latitude);
 80a0cb8:	4e21      	ldr	r6, [pc, #132]	; (80a0d40 <loop+0xe0>)
  display.print("Longitude: ");
 80a0cba:	f002 fcff 	bl	80a36bc <_ZN5Print5printEPKc>
  display.println(longitude);
 80a0cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a0cc2:	4620      	mov	r0, r4
 80a0cc4:	f8cd 8000 	str.w	r8, [sp]
 80a0cc8:	f002 fdf2 	bl	80a38b0 <_ZN5Print7printlnEdi>
  display.print("Latitude: ");
 80a0ccc:	491d      	ldr	r1, [pc, #116]	; (80a0d44 <loop+0xe4>)
 80a0cce:	4620      	mov	r0, r4
 80a0cd0:	f002 fcf4 	bl	80a36bc <_ZN5Print5printEPKc>
  display.println(latitude);
 80a0cd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a0cd8:	4620      	mov	r0, r4
 80a0cda:	f8cd 8000 	str.w	r8, [sp]
 80a0cde:	f002 fde7 	bl	80a38b0 <_ZN5Print7printlnEdi>
  display.display();
 80a0ce2:	4620      	mov	r0, r4
 80a0ce4:	f001 fd54 	bl	80a2790 <_ZN16Adafruit_SSD13067displayEv>
        Blynk.virtualWrite(mPin, "clr");
    }

    template<typename T1, typename T2, typename T3, typename T4>
    void location(const T1& index, const T2& lat, const T3& lon, const T4& value) {
        Blynk.virtualWrite(mPin, index, lat, lon, value);
 80a0ce8:	4b17      	ldr	r3, [pc, #92]	; (80a0d48 <loop+0xe8>)
 80a0cea:	4812      	ldr	r0, [pc, #72]	; (80a0d34 <loop+0xd4>)
 80a0cec:	9304      	str	r3, [sp, #16]
 80a0cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a0cf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a0cf6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a0cfa:	e9cd 2300 	strd	r2, r3, [sp]
 80a0cfe:	4b13      	ldr	r3, [pc, #76]	; (80a0d4c <loop+0xec>)
 80a0d00:	462a      	mov	r2, r5
 80a0d02:	7819      	ldrb	r1, [r3, #0]
 80a0d04:	f7ff ff68 	bl	80a0bd8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiddPKcEEEviDpT_>

  testMap.location(0, latitude, longitude, "value");
 80a0d08:	b00a      	add	sp, #40	; 0x28
 80a0d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 80a0d0e:	a806      	add	r0, sp, #24
 80a0d10:	f002 f882 	bl	80a2e18 <spark_deviceID>
    client.connect(System.deviceID());
 80a0d14:	9906      	ldr	r1, [sp, #24]
 80a0d16:	4803      	ldr	r0, [pc, #12]	; (80a0d24 <loop+0xc4>)
 80a0d18:	f000 ff86 	bl	80a1c28 <_ZN4MQTT7connectEPKc>
 80a0d1c:	a806      	add	r0, sp, #24
 80a0d1e:	f002 fc1d 	bl	80a355c <_ZN6StringD1Ev>
 80a0d22:	e7a8      	b.n	80a0c76 <loop+0x16>
 80a0d24:	20000238 	.word	0x20000238
 80a0d28:	20000298 	.word	0x20000298
 80a0d2c:	080a6dfb 	.word	0x080a6dfb
 80a0d30:	080a6dec 	.word	0x080a6dec
 80a0d34:	200001dc 	.word	0x200001dc
 80a0d38:	20000310 	.word	0x20000310
 80a0d3c:	080a6e48 	.word	0x080a6e48
 80a0d40:	20000308 	.word	0x20000308
 80a0d44:	080a6e54 	.word	0x080a6e54
 80a0d48:	080a6e5f 	.word	0x080a6e5f
 80a0d4c:	20000318 	.word	0x20000318

080a0d50 <_GLOBAL__sub_I_Blynk>:
 80a0d50:	b573      	push	{r0, r1, r4, r5, r6, lr}
        : domain(NULL), port(0)
 80a0d52:	2400      	movs	r4, #0
 80a0d54:	4d1c      	ldr	r5, [pc, #112]	; (80a0dc8 <_GLOBAL__sub_I_Blynk+0x78>)
SYSTEM_THREAD(ENABLED);
 80a0d56:	2100      	movs	r1, #0
 80a0d58:	2001      	movs	r0, #1
 80a0d5a:	f001 ffd9 	bl	80a2d10 <system_thread_set_state>
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
 80a0d5e:	4e1b      	ldr	r6, [pc, #108]	; (80a0dcc <_GLOBAL__sub_I_Blynk+0x7c>)
 80a0d60:	4628      	mov	r0, r5
 80a0d62:	f002 fbad 	bl	80a34c0 <_ZN9TCPClientC1Ev>
 80a0d66:	f105 001c 	add.w	r0, r5, #28
 80a0d6a:	f002 ff07 	bl	80a3b7c <_ZN9IPAddressC1Ev>
 80a0d6e:	4632      	mov	r2, r6
 80a0d70:	636c      	str	r4, [r5, #52]	; 0x34
 80a0d72:	872c      	strh	r4, [r5, #56]	; 0x38
 80a0d74:	4628      	mov	r0, r5
 80a0d76:	4916      	ldr	r1, [pc, #88]	; (80a0dd0 <_GLOBAL__sub_I_Blynk+0x80>)
 80a0d78:	f003 fae2 	bl	80a4340 <__aeabi_atexit>
        , state(CONNECTING)
 80a0d7c:	4b15      	ldr	r3, [pc, #84]	; (80a0dd4 <_GLOBAL__sub_I_Blynk+0x84>)
MQTT client("lab.thewcl.com", 1883, callback);
 80a0d7e:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0d82:	e9c3 5400 	strd	r5, r4, [r3]
 80a0d86:	4d14      	ldr	r5, [pc, #80]	; (80a0dd8 <_GLOBAL__sub_I_Blynk+0x88>)
 80a0d88:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80a0d8c:	e9c3 4404 	strd	r4, r4, [r3, #16]
 80a0d90:	619c      	str	r4, [r3, #24]
 80a0d92:	839c      	strh	r4, [r3, #28]
 80a0d94:	4628      	mov	r0, r5
 80a0d96:	4b11      	ldr	r3, [pc, #68]	; (80a0ddc <_GLOBAL__sub_I_Blynk+0x8c>)
 80a0d98:	9400      	str	r4, [sp, #0]
 80a0d9a:	4911      	ldr	r1, [pc, #68]	; (80a0de0 <_GLOBAL__sub_I_Blynk+0x90>)
OledWingAdafruit display;
 80a0d9c:	4c11      	ldr	r4, [pc, #68]	; (80a0de4 <_GLOBAL__sub_I_Blynk+0x94>)
MQTT client("lab.thewcl.com", 1883, callback);
 80a0d9e:	f000 fd4d 	bl	80a183c <_ZN4MQTTC1EPctPFvS0_PhjEb>
 80a0da2:	4632      	mov	r2, r6
 80a0da4:	4628      	mov	r0, r5
 80a0da6:	4910      	ldr	r1, [pc, #64]	; (80a0de8 <_GLOBAL__sub_I_Blynk+0x98>)
 80a0da8:	f003 faca 	bl	80a4340 <__aeabi_atexit>
OledWingAdafruit display;
 80a0dac:	2107      	movs	r1, #7
 80a0dae:	4620      	mov	r0, r4
 80a0db0:	f000 fc40 	bl	80a1634 <_ZN16OledWingAdafruitC1Ei>
 80a0db4:	4632      	mov	r2, r6
 80a0db6:	4620      	mov	r0, r4
 80a0db8:	490c      	ldr	r1, [pc, #48]	; (80a0dec <_GLOBAL__sub_I_Blynk+0x9c>)
 80a0dba:	f003 fac1 	bl	80a4340 <__aeabi_atexit>
#include <Blynk/BlynkApi.h>

class BlynkWidgetBase
{
public:
    BlynkWidgetBase(uint8_t vPin) : mPin(vPin) {}
 80a0dbe:	2201      	movs	r2, #1
 80a0dc0:	4b0b      	ldr	r3, [pc, #44]	; (80a0df0 <_GLOBAL__sub_I_Blynk+0xa0>)
 80a0dc2:	701a      	strb	r2, [r3, #0]
 80a0dc4:	b002      	add	sp, #8
 80a0dc6:	bd70      	pop	{r4, r5, r6, pc}
 80a0dc8:	200001fc 	.word	0x200001fc
 80a0dcc:	200001d8 	.word	0x200001d8
 80a0dd0:	080a00fd 	.word	0x080a00fd
 80a0dd4:	200001dc 	.word	0x200001dc
 80a0dd8:	20000238 	.word	0x20000238
 80a0ddc:	080a014d 	.word	0x080a014d
 80a0de0:	080a6e65 	.word	0x080a6e65
 80a0de4:	20000298 	.word	0x20000298
 80a0de8:	080a1f65 	.word	0x080a1f65
 80a0dec:	080a1601 	.word	0x080a1601
 80a0df0:	20000318 	.word	0x20000318

080a0df4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 80a0df4:	4770      	bx	lr

080a0df6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 80a0df6:	b510      	push	{r4, lr}
 80a0df8:	4604      	mov	r4, r0
  }
 80a0dfa:	2110      	movs	r1, #16
 80a0dfc:	f003 faa5 	bl	80a434a <_ZdlPvj>
 80a0e00:	4620      	mov	r0, r4
 80a0e02:	bd10      	pop	{r4, pc}

080a0e04 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a0e04:	b510      	push	{r4, lr}
 80a0e06:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0e08:	6880      	ldr	r0, [r0, #8]
 80a0e0a:	b108      	cbz	r0, 80a0e10 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0e0c:	f001 fdf6 	bl	80a29fc <os_mutex_recursive_destroy>
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	bd10      	pop	{r4, pc}

080a0e14 <_ZNK8particle11SPISettings7printToER5Print>:
  virtual size_t printTo(Print& p) const
 80a0e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0e16:	4604      	mov	r4, r0
    if (default_ && clock_ == 0)
 80a0e18:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 80a0e1a:	4608      	mov	r0, r1
 80a0e1c:	68a3      	ldr	r3, [r4, #8]
    if (default_ && clock_ == 0)
 80a0e1e:	b132      	cbz	r2, 80a0e2e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 80a0e20:	b9a3      	cbnz	r3, 80a0e4c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 80a0e22:	490b      	ldr	r1, [pc, #44]	; (80a0e50 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
  }
 80a0e24:	b002      	add	sp, #8
 80a0e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 80a0e2a:	f002 bc47 	b.w	80a36bc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0e2e:	4a09      	ldr	r2, [pc, #36]	; (80a0e54 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 80a0e30:	7b26      	ldrb	r6, [r4, #12]
 80a0e32:	4d09      	ldr	r5, [pc, #36]	; (80a0e58 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 80a0e34:	4909      	ldr	r1, [pc, #36]	; (80a0e5c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 80a0e36:	7b64      	ldrb	r4, [r4, #13]
 80a0e38:	2e01      	cmp	r6, #1
 80a0e3a:	bf18      	it	ne
 80a0e3c:	4629      	movne	r1, r5
 80a0e3e:	e9cd 1400 	strd	r1, r4, [sp]
 80a0e42:	4907      	ldr	r1, [pc, #28]	; (80a0e60 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 80a0e44:	f7ff f974 	bl	80a0130 <_ZN5Print6printfEPKcz>
  }
 80a0e48:	b002      	add	sp, #8
 80a0e4a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0e4c:	4a05      	ldr	r2, [pc, #20]	; (80a0e64 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 80a0e4e:	e7ef      	b.n	80a0e30 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 80a0e50:	080a6edf 	.word	0x080a6edf
 80a0e54:	080a6e53 	.word	0x080a6e53
 80a0e58:	080a6edb 	.word	0x080a6edb
 80a0e5c:	080a6ed7 	.word	0x080a6ed7
 80a0e60:	080a6ef5 	.word	0x080a6ef5
 80a0e64:	080a6ece 	.word	0x080a6ece

080a0e68 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e6c:	461f      	mov	r7, r3
 80a0e6e:	b085      	sub	sp, #20
 80a0e70:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a0e74:	eba7 0a01 	sub.w	sl, r7, r1
 80a0e78:	eba8 0902 	sub.w	r9, r8, r2
 80a0e7c:	f1b9 0f00 	cmp.w	r9, #0
 80a0e80:	bfb8      	it	lt
 80a0e82:	f1c9 0900 	rsblt	r9, r9, #0
 80a0e86:	f1ba 0f00 	cmp.w	sl, #0
 80a0e8a:	bfb8      	it	lt
 80a0e8c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
 80a0e90:	45d1      	cmp	r9, sl
        uint16_t color) {
 80a0e92:	4683      	mov	fp, r0
 80a0e94:	460c      	mov	r4, r1
 80a0e96:	4616      	mov	r6, r2
 80a0e98:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (steep) {
 80a0e9c:	dd04      	ble.n	80a0ea8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 80a0e9e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
 80a0ea0:	4634      	mov	r4, r6
        _swap_int16_t(x1, y1);
 80a0ea2:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
 80a0ea4:	460e      	mov	r6, r1
        _swap_int16_t(x1, y1);
 80a0ea6:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
 80a0ea8:	42bc      	cmp	r4, r7
 80a0eaa:	dd05      	ble.n	80a0eb8 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 80a0eac:	4632      	mov	r2, r6
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 80a0eae:	4646      	mov	r6, r8
 80a0eb0:	4690      	mov	r8, r2
    if (x0 > x1) {
 80a0eb2:	4622      	mov	r2, r4
 80a0eb4:	463c      	mov	r4, r7
 80a0eb6:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80a0eb8:	1b3a      	subs	r2, r7, r4
 80a0eba:	b291      	uxth	r1, r2
 80a0ebc:	9100      	str	r1, [sp, #0]
    dy = abs(y1 - y0);
 80a0ebe:	eba8 0106 	sub.w	r1, r8, r6
 80a0ec2:	2900      	cmp	r1, #0
 80a0ec4:	bfb8      	it	lt
 80a0ec6:	4249      	neglt	r1, r1

    int16_t err = dx / 2;
 80a0ec8:	f3c2 35c0 	ubfx	r5, r2, #15, #1
    dy = abs(y1 - y0);
 80a0ecc:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
 80a0ece:	b211      	sxth	r1, r2
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 80a0ed0:	4546      	cmp	r6, r8
 80a0ed2:	bfb4      	ite	lt
 80a0ed4:	2201      	movlt	r2, #1
 80a0ed6:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
 80a0eda:	440d      	add	r5, r1
 80a0edc:	106d      	asrs	r5, r5, #1
        ystep = -1;
 80a0ede:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 80a0ee0:	42bc      	cmp	r4, r7
 80a0ee2:	dc1c      	bgt.n	80a0f1e <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
 80a0ee4:	f8db 2000 	ldr.w	r2, [fp]
 80a0ee8:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
 80a0eea:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80a0eee:	bfc7      	ittee	gt
 80a0ef0:	4631      	movgt	r1, r6
 80a0ef2:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
 80a0ef4:	4632      	movle	r2, r6
 80a0ef6:	4621      	movle	r1, r4
            writePixel(y0, x0, color);
 80a0ef8:	9303      	str	r3, [sp, #12]
            writePixel(x0, y0, color);
 80a0efa:	4658      	mov	r0, fp
 80a0efc:	47c0      	blx	r8
        }
        err -= dy;
 80a0efe:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
 80a0f00:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
 80a0f02:	1aad      	subs	r5, r5, r2
 80a0f04:	b2a9      	uxth	r1, r5
 80a0f06:	b22d      	sxth	r5, r5
        if (err < 0) {
 80a0f08:	2d00      	cmp	r5, #0
 80a0f0a:	da05      	bge.n	80a0f18 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
 80a0f0c:	9a02      	ldr	r2, [sp, #8]
 80a0f0e:	4416      	add	r6, r2
            err += dx;
 80a0f10:	9a00      	ldr	r2, [sp, #0]
            y0 += ystep;
 80a0f12:	b236      	sxth	r6, r6
            err += dx;
 80a0f14:	1855      	adds	r5, r2, r1
 80a0f16:	b22d      	sxth	r5, r5
    for (; x0<=x1; x0++) {
 80a0f18:	3401      	adds	r4, #1
 80a0f1a:	b224      	sxth	r4, r4
 80a0f1c:	e7e0      	b.n	80a0ee0 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
 80a0f1e:	b005      	add	sp, #20
 80a0f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0f24 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
 80a0f24:	4770      	bx	lr

080a0f26 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 80a0f26:	b410      	push	{r4}
    drawPixel(x, y, color);
 80a0f28:	6804      	ldr	r4, [r0, #0]
 80a0f2a:	6924      	ldr	r4, [r4, #16]
 80a0f2c:	46a4      	mov	ip, r4
}
 80a0f2e:	bc10      	pop	{r4}
    drawPixel(x, y, color);
 80a0f30:	4760      	bx	ip

080a0f32 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a0f32:	b430      	push	{r4, r5}
 80a0f34:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 80a0f38:	6804      	ldr	r4, [r0, #0]
 80a0f3a:	9502      	str	r5, [sp, #8]
 80a0f3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80a0f3e:	46a4      	mov	ip, r4
}
 80a0f40:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
 80a0f42:	4760      	bx	ip

080a0f44 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a0f44:	b430      	push	{r4, r5}
 80a0f46:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 80a0f4a:	6804      	ldr	r4, [r0, #0]
 80a0f4c:	9502      	str	r5, [sp, #8]
 80a0f4e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80a0f50:	46a4      	mov	ip, r4
}
 80a0f52:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
 80a0f54:	4760      	bx	ip

080a0f56 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0f56:	b470      	push	{r4, r5, r6}
 80a0f58:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80a0f5c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 80a0f60:	6804      	ldr	r4, [r0, #0]
 80a0f62:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80a0f66:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80a0f68:	46a4      	mov	ip, r4
}
 80a0f6a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
 80a0f6c:	4760      	bx	ip

080a0f6e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a0f6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0f72:	461c      	mov	r4, r3
 80a0f74:	4616      	mov	r6, r2
 80a0f76:	4605      	mov	r5, r0
 80a0f78:	460f      	mov	r7, r1
    startWrite();
 80a0f7a:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 80a0f7c:	3c01      	subs	r4, #1
        int16_t h, uint16_t color) {
 80a0f7e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 80a0f82:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 80a0f84:	4434      	add	r4, r6
    startWrite();
 80a0f86:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 80a0f88:	b224      	sxth	r4, r4
 80a0f8a:	682b      	ldr	r3, [r5, #0]
 80a0f8c:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0f90:	9400      	str	r4, [sp, #0]
 80a0f92:	4628      	mov	r0, r5
 80a0f94:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80a0f96:	4632      	mov	r2, r6
 80a0f98:	463b      	mov	r3, r7
 80a0f9a:	4639      	mov	r1, r7
 80a0f9c:	47a0      	blx	r4
    endWrite();
 80a0f9e:	4628      	mov	r0, r5
 80a0fa0:	682b      	ldr	r3, [r5, #0]
 80a0fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0fa4:	b002      	add	sp, #8
 80a0fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 80a0faa:	4718      	bx	r3

080a0fac <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a0fac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0fb0:	4617      	mov	r7, r2
 80a0fb2:	4604      	mov	r4, r0
 80a0fb4:	461d      	mov	r5, r3
 80a0fb6:	460e      	mov	r6, r1
    startWrite();
 80a0fb8:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
 80a0fba:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 80a0fbe:	695b      	ldr	r3, [r3, #20]
 80a0fc0:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 80a0fc2:	e9cd 7800 	strd	r7, r8, [sp]
 80a0fc6:	6822      	ldr	r2, [r4, #0]
 80a0fc8:	1e6b      	subs	r3, r5, #1
 80a0fca:	4433      	add	r3, r6
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80a0fd0:	4631      	mov	r1, r6
 80a0fd2:	463a      	mov	r2, r7
 80a0fd4:	b21b      	sxth	r3, r3
 80a0fd6:	47a8      	blx	r5
    endWrite();
 80a0fd8:	4620      	mov	r0, r4
 80a0fda:	6823      	ldr	r3, [r4, #0]
 80a0fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0fde:	b002      	add	sp, #8
 80a0fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 80a0fe4:	4718      	bx	r3

080a0fe6 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0fe6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0fea:	461e      	mov	r6, r3
    startWrite();
 80a0fec:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 80a0fee:	460c      	mov	r4, r1
    startWrite();
 80a0ff0:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 80a0ff2:	4605      	mov	r5, r0
 80a0ff4:	4617      	mov	r7, r2
 80a0ff6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0ffa:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    startWrite();
 80a0ffe:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 80a1000:	4426      	add	r6, r4
 80a1002:	42b4      	cmp	r4, r6
 80a1004:	682b      	ldr	r3, [r5, #0]
 80a1006:	da0b      	bge.n	80a1020 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 80a1008:	f8cd 9000 	str.w	r9, [sp]
 80a100c:	4621      	mov	r1, r4
 80a100e:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a1012:	463a      	mov	r2, r7
 80a1014:	4643      	mov	r3, r8
 80a1016:	4628      	mov	r0, r5
 80a1018:	3401      	adds	r4, #1
 80a101a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
 80a101c:	b224      	sxth	r4, r4
 80a101e:	e7f0      	b.n	80a1002 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
 80a1020:	4628      	mov	r0, r5
 80a1022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a1024:	b002      	add	sp, #8
 80a1026:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 80a102a:	4718      	bx	r3

080a102c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 80a102c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 80a102e:	9101      	str	r1, [sp, #4]
 80a1030:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80a1034:	6802      	ldr	r2, [r0, #0]
 80a1036:	9100      	str	r1, [sp, #0]
 80a1038:	6c14      	ldr	r4, [r2, #64]	; 0x40
 80a103a:	2200      	movs	r2, #0
 80a103c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a1040:	4611      	mov	r1, r2
 80a1042:	47a0      	blx	r4
}
 80a1044:	b002      	add	sp, #8
 80a1046:	bd10      	pop	{r4, pc}

080a1048 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a1048:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a104c:	4604      	mov	r4, r0
 80a104e:	460f      	mov	r7, r1
 80a1050:	4616      	mov	r6, r2
 80a1052:	461d      	mov	r5, r3
    startWrite();
 80a1054:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 80a1056:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 80a105a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 80a105c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 80a1060:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 80a1062:	6823      	ldr	r3, [r4, #0]
 80a1064:	f8cd 8000 	str.w	r8, [sp]
 80a1068:	4632      	mov	r2, r6
 80a106a:	4639      	mov	r1, r7
 80a106c:	4620      	mov	r0, r4
 80a106e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a1072:	462b      	mov	r3, r5
 80a1074:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 80a1076:	6823      	ldr	r3, [r4, #0]
 80a1078:	f109 32ff 	add.w	r2, r9, #4294967295
 80a107c:	f8cd 8000 	str.w	r8, [sp]
 80a1080:	4432      	add	r2, r6
 80a1082:	4639      	mov	r1, r7
 80a1084:	4620      	mov	r0, r4
 80a1086:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a108a:	b212      	sxth	r2, r2
 80a108c:	462b      	mov	r3, r5
 80a108e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 80a1090:	6823      	ldr	r3, [r4, #0]
 80a1092:	f8cd 8000 	str.w	r8, [sp]
 80a1096:	4632      	mov	r2, r6
 80a1098:	4639      	mov	r1, r7
 80a109a:	4620      	mov	r0, r4
 80a109c:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a10a0:	464b      	mov	r3, r9
 80a10a2:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 80a10a4:	3d01      	subs	r5, #1
 80a10a6:	6823      	ldr	r3, [r4, #0]
 80a10a8:	19e9      	adds	r1, r5, r7
 80a10aa:	f8cd 8000 	str.w	r8, [sp]
 80a10ae:	4620      	mov	r0, r4
 80a10b0:	6a1d      	ldr	r5, [r3, #32]
 80a10b2:	4632      	mov	r2, r6
 80a10b4:	464b      	mov	r3, r9
 80a10b6:	b209      	sxth	r1, r1
 80a10b8:	47a8      	blx	r5
    endWrite();
 80a10ba:	4620      	mov	r0, r4
 80a10bc:	6823      	ldr	r3, [r4, #0]
 80a10be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a10c0:	b002      	add	sp, #8
 80a10c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 80a10c6:	4718      	bx	r3

080a10c8 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
 80a10c8:	4770      	bx	lr

080a10ca <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
 80a10ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
 80a10ce:	4299      	cmp	r1, r3
        uint16_t color) {
 80a10d0:	4616      	mov	r6, r2
 80a10d2:	4680      	mov	r8, r0
 80a10d4:	460d      	mov	r5, r1
 80a10d6:	461c      	mov	r4, r3
 80a10d8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80a10dc:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 80a10e0:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
 80a10e2:	d112      	bne.n	80a110a <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80a10e4:	42be      	cmp	r6, r7
 80a10e6:	bfc2      	ittt	gt
 80a10e8:	4633      	movgt	r3, r6
 80a10ea:	463e      	movgt	r6, r7
 80a10ec:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80a10ee:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a10f2:	1c7b      	adds	r3, r7, #1
 80a10f4:	6b94      	ldr	r4, [r2, #56]	; 0x38
 80a10f6:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a10f8:	4632      	mov	r2, r6
 80a10fa:	4629      	mov	r1, r5
 80a10fc:	4640      	mov	r0, r8
 80a10fe:	46a4      	mov	ip, r4
 80a1100:	b21b      	sxth	r3, r3
}
 80a1102:	b003      	add	sp, #12
 80a1104:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a1108:	4760      	bx	ip
    } else if(y0 == y1){
 80a110a:	42be      	cmp	r6, r7
 80a110c:	d10a      	bne.n	80a1124 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80a110e:	4299      	cmp	r1, r3
 80a1110:	bfc2      	ittt	gt
 80a1112:	460b      	movgt	r3, r1
 80a1114:	4625      	movgt	r5, r4
 80a1116:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a1118:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a111c:	1c63      	adds	r3, r4, #1
 80a111e:	1b5b      	subs	r3, r3, r5
 80a1120:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a1122:	e7e9      	b.n	80a10f8 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
        startWrite();
 80a1124:	6953      	ldr	r3, [r2, #20]
 80a1126:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 80a1128:	e9cd 7900 	strd	r7, r9, [sp]
 80a112c:	f8d8 3000 	ldr.w	r3, [r8]
 80a1130:	4640      	mov	r0, r8
 80a1132:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a1134:	4632      	mov	r2, r6
 80a1136:	4623      	mov	r3, r4
 80a1138:	4629      	mov	r1, r5
 80a113a:	47b8      	blx	r7
        endWrite();
 80a113c:	4640      	mov	r0, r8
 80a113e:	f8d8 3000 	ldr.w	r3, [r8]
 80a1142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a1144:	b003      	add	sp, #12
 80a1146:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 80a114a:	4718      	bx	r3

080a114c <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
 80a114c:	f001 0303 	and.w	r3, r1, #3
 80a1150:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80a1154:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
 80a1156:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80a115a:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
 80a115c:	bf59      	ittee	pl
 80a115e:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
 80a1160:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
 80a1162:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
 80a1164:	81c3      	strhmi	r3, [r0, #14]
}
 80a1166:	4770      	bx	lr

080a1168 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a1168:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 80a116a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 80a116c:	2400      	movs	r4, #0
    _width    = WIDTH;
 80a116e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
 80a1170:	f04f 31ff 	mov.w	r1, #4294967295
WIDTH(w), HEIGHT(h)
 80a1174:	4d05      	ldr	r5, [pc, #20]	; (80a118c <_ZN12Adafruit_GFXC1Ess+0x24>)
 80a1176:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
 80a1178:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
 80a117a:	4a05      	ldr	r2, [pc, #20]	; (80a1190 <_ZN12Adafruit_GFXC1Ess+0x28>)
 80a117c:	6044      	str	r4, [r0, #4]
 80a117e:	e9c0 1205 	strd	r1, r2, [r0, #20]
WIDTH(w), HEIGHT(h)
 80a1182:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
 80a1184:	6104      	str	r4, [r0, #16]
    _cp437    = false;
 80a1186:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 80a1188:	6204      	str	r4, [r0, #32]
}
 80a118a:	bd30      	pop	{r4, r5, pc}
 80a118c:	080a741c 	.word	0x080a741c
 80a1190:	01000101 	.word	0x01000101

080a1194 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a1194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startWrite();
 80a1198:	2600      	movs	r6, #0
    uint8_t byte = 0;
 80a119a:	4635      	mov	r5, r6
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a119c:	b089      	sub	sp, #36	; 0x24
 80a119e:	9304      	str	r3, [sp, #16]
 80a11a0:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80a11a4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 80a11a8:	9305      	str	r3, [sp, #20]
    startWrite();
 80a11aa:	6803      	ldr	r3, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a11ac:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
 80a11b0:	695b      	ldr	r3, [r3, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a11b2:	4604      	mov	r4, r0
 80a11b4:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
    startWrite();
 80a11b8:	4798      	blx	r3
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80a11ba:	f118 0307 	adds.w	r3, r8, #7
 80a11be:	bf48      	it	mi
 80a11c0:	f108 030e 	addmi.w	r3, r8, #14
 80a11c4:	ea4f 0be3 	mov.w	fp, r3, asr #3
    startWrite();
 80a11c8:	9601      	str	r6, [sp, #4]
 80a11ca:	9b03      	ldr	r3, [sp, #12]
 80a11cc:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
 80a11ce:	9905      	ldr	r1, [sp, #20]
 80a11d0:	189a      	adds	r2, r3, r2
 80a11d2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80a11d6:	b212      	sxth	r2, r2
 80a11d8:	4299      	cmp	r1, r3
 80a11da:	dd27      	ble.n	80a122c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 80a11dc:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a11e0:	9b04      	ldr	r3, [sp, #16]
 80a11e2:	4433      	add	r3, r6
 80a11e4:	9306      	str	r3, [sp, #24]
 80a11e6:	fa0f f389 	sxth.w	r3, r9
        for(int16_t i=0; i<w; i++) {
 80a11ea:	4598      	cmp	r8, r3
 80a11ec:	fa1f f189 	uxth.w	r1, r9
 80a11f0:	dd17      	ble.n	80a1222 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
            if(i & 7) byte <<= 1;
 80a11f2:	0748      	lsls	r0, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a11f4:	bf05      	ittet	eq
 80a11f6:	9806      	ldreq	r0, [sp, #24]
 80a11f8:	10db      	asreq	r3, r3, #3
            if(i & 7) byte <<= 1;
 80a11fa:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a11fc:	5cc5      	ldrbeq	r5, [r0, r3]
            if(i & 7) byte <<= 1;
 80a11fe:	bf18      	it	ne
 80a1200:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
 80a1202:	062b      	lsls	r3, r5, #24
 80a1204:	d50a      	bpl.n	80a121c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
 80a1206:	9b02      	ldr	r3, [sp, #8]
 80a1208:	9207      	str	r2, [sp, #28]
 80a120a:	4419      	add	r1, r3
 80a120c:	6823      	ldr	r3, [r4, #0]
 80a120e:	4620      	mov	r0, r4
 80a1210:	699b      	ldr	r3, [r3, #24]
 80a1212:	b209      	sxth	r1, r1
 80a1214:	461f      	mov	r7, r3
 80a1216:	4653      	mov	r3, sl
 80a1218:	47b8      	blx	r7
 80a121a:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
 80a121c:	f109 0901 	add.w	r9, r9, #1
 80a1220:	e7e1      	b.n	80a11e6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
    for(int16_t j=0; j<h; j++, y++) {
 80a1222:	9b01      	ldr	r3, [sp, #4]
 80a1224:	445e      	add	r6, fp
 80a1226:	3301      	adds	r3, #1
 80a1228:	9301      	str	r3, [sp, #4]
 80a122a:	e7ce      	b.n	80a11ca <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
    endWrite();
 80a122c:	4620      	mov	r0, r4
 80a122e:	6823      	ldr	r3, [r4, #0]
 80a1230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a1232:	b009      	add	sp, #36	; 0x24
 80a1234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 80a1238:	4718      	bx	r3
	...

080a123c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80a123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1240:	b091      	sub	sp, #68	; 0x44
 80a1242:	4617      	mov	r7, r2
 80a1244:	461e      	mov	r6, r3
    if(!gfxFont) { // 'Classic' built-in font
 80a1246:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80a1248:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80a124c:	4682      	mov	sl, r0
 80a124e:	f8bd 806c 	ldrh.w	r8, [sp, #108]	; 0x6c
 80a1252:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
 80a1256:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 80a125a:	9105      	str	r1, [sp, #20]
 80a125c:	9302      	str	r3, [sp, #8]
    if(!gfxFont) { // 'Classic' built-in font
 80a125e:	2a00      	cmp	r2, #0
 80a1260:	f040 80b9 	bne.w	80a13d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x19a>
        if((x >= _width)            || // Clip right
 80a1264:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a1268:	428b      	cmp	r3, r1
 80a126a:	f340 813c 	ble.w	80a14e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
 80a126e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80a1272:	42bb      	cmp	r3, r7
 80a1274:	f340 8137 	ble.w	80a14e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 80a1278:	2306      	movs	r3, #6
 80a127a:	fb03 1305 	mla	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
 80a127e:	2b00      	cmp	r3, #0
 80a1280:	f340 8131 	ble.w	80a14e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
           ((y + 8 * size_y - 1) < 0))   // Clip top
 80a1284:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
 80a1288:	2b00      	cmp	r3, #0
 80a128a:	f340 812c 	ble.w	80a14e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80a128e:	7f03      	ldrb	r3, [r0, #28]
 80a1290:	b91b      	cbnz	r3, 80a129a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x5e>
 80a1292:	2eaf      	cmp	r6, #175	; 0xaf
 80a1294:	bf84      	itt	hi
 80a1296:	3601      	addhi	r6, #1
 80a1298:	b2f6      	uxtbhi	r6, r6
        startWrite();
 80a129a:	f8da 3000 	ldr.w	r3, [sl]
 80a129e:	4650      	mov	r0, sl
 80a12a0:	695b      	ldr	r3, [r3, #20]
 80a12a2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a12a4:	2305      	movs	r3, #5
 80a12a6:	9309      	str	r3, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80a12a8:	2300      	movs	r3, #0
 80a12aa:	9304      	str	r3, [sp, #16]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a12ac:	4b8f      	ldr	r3, [pc, #572]	; (80a14ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b0>)
 80a12ae:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80a12b2:	4433      	add	r3, r6
 80a12b4:	930c      	str	r3, [sp, #48]	; 0x30
 80a12b6:	b2bb      	uxth	r3, r7
 80a12b8:	9306      	str	r3, [sp, #24]
 80a12ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a12bc:	9a04      	ldr	r2, [sp, #16]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a12be:	f8bd 6010 	ldrh.w	r6, [sp, #16]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a12c2:	5c9b      	ldrb	r3, [r3, r2]
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80a12c4:	f04f 0900 	mov.w	r9, #0
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a12c8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a12ca:	b2ab      	uxth	r3, r5
 80a12cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80a12ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a12d2:	9303      	str	r3, [sp, #12]
 80a12d4:	fb05 3306 	mla	r3, r5, r6, r3
 80a12d8:	b21b      	sxth	r3, r3
 80a12da:	9308      	str	r3, [sp, #32]
 80a12dc:	2308      	movs	r3, #8
 80a12de:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
 80a12e0:	9b03      	ldr	r3, [sp, #12]
 80a12e2:	441e      	add	r6, r3
 80a12e4:	b236      	sxth	r6, r6
                if(line & 1) {
 80a12e6:	9a07      	ldr	r2, [sp, #28]
 80a12e8:	f8da 3000 	ldr.w	r3, [sl]
 80a12ec:	07d2      	lsls	r2, r2, #31
 80a12ee:	d54d      	bpl.n	80a138c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x150>
                    if(size_x == 1 && size_y == 1)
 80a12f0:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 80a12f2:	9906      	ldr	r1, [sp, #24]
 80a12f4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 80a12f8:	d13b      	bne.n	80a1372 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x136>
 80a12fa:	2c01      	cmp	r4, #1
 80a12fc:	d139      	bne.n	80a1372 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x136>
                        writePixel(x+i, y+j, color);
 80a12fe:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a1302:	9b02      	ldr	r3, [sp, #8]
 80a1304:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
 80a1306:	4631      	mov	r1, r6
 80a1308:	4650      	mov	r0, sl
 80a130a:	b212      	sxth	r2, r2
 80a130c:	47d8      	blx	fp
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80a130e:	9b07      	ldr	r3, [sp, #28]
 80a1310:	f109 0901 	add.w	r9, r9, #1
 80a1314:	085b      	lsrs	r3, r3, #1
 80a1316:	9307      	str	r3, [sp, #28]
 80a1318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a131a:	fa4f f989 	sxtb.w	r9, r9
 80a131e:	3b01      	subs	r3, #1
 80a1320:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a1324:	930a      	str	r3, [sp, #40]	; 0x28
 80a1326:	d1de      	bne.n	80a12e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xaa>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80a1328:	9b04      	ldr	r3, [sp, #16]
 80a132a:	3301      	adds	r3, #1
 80a132c:	b25b      	sxtb	r3, r3
 80a132e:	9304      	str	r3, [sp, #16]
 80a1330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1332:	3b01      	subs	r3, #1
 80a1334:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a1338:	9309      	str	r3, [sp, #36]	; 0x24
 80a133a:	d1be      	bne.n	80a12ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x7e>
        if(bg != color) { // If opaque, draw vertical line for last column
 80a133c:	9b02      	ldr	r3, [sp, #8]
 80a133e:	4543      	cmp	r3, r8
 80a1340:	d00f      	beq.n	80a1362 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 80a1342:	2d01      	cmp	r5, #1
 80a1344:	f8da 3000 	ldr.w	r3, [sl]
 80a1348:	d134      	bne.n	80a13b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x178>
 80a134a:	2c01      	cmp	r4, #1
 80a134c:	d132      	bne.n	80a13b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x178>
 80a134e:	9903      	ldr	r1, [sp, #12]
 80a1350:	f8cd 8000 	str.w	r8, [sp]
 80a1354:	3105      	adds	r1, #5
 80a1356:	6a1c      	ldr	r4, [r3, #32]
 80a1358:	463a      	mov	r2, r7
 80a135a:	2308      	movs	r3, #8
 80a135c:	4650      	mov	r0, sl
 80a135e:	b209      	sxth	r1, r1
 80a1360:	47a0      	blx	r4
        endWrite();
 80a1362:	4650      	mov	r0, sl
 80a1364:	f8da 3000 	ldr.w	r3, [sl]
 80a1368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a136a:	b011      	add	sp, #68	; 0x44
 80a136c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
 80a1370:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a1372:	fb04 1202 	mla	r2, r4, r2, r1
 80a1376:	9902      	ldr	r1, [sp, #8]
 80a1378:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a137a:	9400      	str	r4, [sp, #0]
 80a137c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a1380:	4650      	mov	r0, sl
 80a1382:	462b      	mov	r3, r5
 80a1384:	9908      	ldr	r1, [sp, #32]
 80a1386:	b212      	sxth	r2, r2
 80a1388:	47d8      	blx	fp
 80a138a:	e7c0      	b.n	80a130e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd2>
                } else if(bg != color) {
 80a138c:	9a02      	ldr	r2, [sp, #8]
 80a138e:	4542      	cmp	r2, r8
 80a1390:	d0bd      	beq.n	80a130e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd2>
                    if(size_x == 1 && size_y == 1)
 80a1392:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, bg);
 80a1394:	9906      	ldr	r1, [sp, #24]
 80a1396:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 80a139a:	d106      	bne.n	80a13aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
 80a139c:	2c01      	cmp	r4, #1
 80a139e:	d104      	bne.n	80a13aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
                        writePixel(x+i, y+j, bg);
 80a13a0:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a13a4:	440a      	add	r2, r1
 80a13a6:	4643      	mov	r3, r8
 80a13a8:	e7ad      	b.n	80a1306 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xca>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a13aa:	fb04 1202 	mla	r2, r4, r2, r1
 80a13ae:	f8cd 8004 	str.w	r8, [sp, #4]
 80a13b2:	e7e2      	b.n	80a137a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x13e>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 80a13b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a13b6:	00e4      	lsls	r4, r4, #3
 80a13b8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80a13bc:	9a03      	ldr	r2, [sp, #12]
 80a13be:	f8cd 8004 	str.w	r8, [sp, #4]
 80a13c2:	440a      	add	r2, r1
 80a13c4:	4611      	mov	r1, r2
 80a13c6:	9400      	str	r4, [sp, #0]
 80a13c8:	69dc      	ldr	r4, [r3, #28]
 80a13ca:	463a      	mov	r2, r7
 80a13cc:	462b      	mov	r3, r5
 80a13ce:	4650      	mov	r0, sl
 80a13d0:	b209      	sxth	r1, r1
 80a13d2:	47a0      	blx	r4
        endWrite();
 80a13d4:	e7c5      	b.n	80a1362 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80a13d6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
 80a13d8:	6851      	ldr	r1, [r2, #4]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80a13da:	1af6      	subs	r6, r6, r3
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80a13dc:	6812      	ldr	r2, [r2, #0]
    return gfxFont->glyph + c;
 80a13de:	b2f6      	uxtb	r6, r6
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80a13e0:	920e      	str	r2, [sp, #56]	; 0x38
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a13e2:	f831 2036 	ldrh.w	r2, [r1, r6, lsl #3]
    return gfxFont->glyph + c;
 80a13e6:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a13ea:	9204      	str	r2, [sp, #16]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80a13ec:	789a      	ldrb	r2, [r3, #2]
        if(size_x > 1 || size_y > 1) {
 80a13ee:	2d01      	cmp	r5, #1
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80a13f0:	9208      	str	r2, [sp, #32]
                 h  = pgm_read_byte(&glyph->height);
 80a13f2:	78da      	ldrb	r2, [r3, #3]
                 yo = pgm_read_byte(&glyph->yOffset);
 80a13f4:	f993 b006 	ldrsb.w	fp, [r3, #6]
                 h  = pgm_read_byte(&glyph->height);
 80a13f8:	920c      	str	r2, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80a13fa:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80a13fe:	9209      	str	r2, [sp, #36]	; 0x24
        if(size_x > 1 || size_y > 1) {
 80a1400:	d801      	bhi.n	80a1406 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ca>
 80a1402:	2c01      	cmp	r4, #1
 80a1404:	d953      	bls.n	80a14ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x272>
            xo16 = xo;
 80a1406:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80a140a:	9307      	str	r3, [sp, #28]
            yo16 = yo;
 80a140c:	fa0f f38b 	sxth.w	r3, fp
 80a1410:	9306      	str	r3, [sp, #24]
        uint8_t  xx, yy, bits = 0, bit = 0;
 80a1412:	f04f 0800 	mov.w	r8, #0
 80a1416:	46c1      	mov	r9, r8
        startWrite();
 80a1418:	f8da 3000 	ldr.w	r3, [sl]
 80a141c:	4650      	mov	r0, sl
 80a141e:	695b      	ldr	r3, [r3, #20]
 80a1420:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a1422:	b2bb      	uxth	r3, r7
 80a1424:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a1426:	445b      	add	r3, fp
        for(yy=0; yy<h; yy++) {
 80a1428:	f8cd 800c 	str.w	r8, [sp, #12]
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a142c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
 80a142e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a1430:	9a03      	ldr	r2, [sp, #12]
 80a1432:	429a      	cmp	r2, r3
 80a1434:	d295      	bcs.n	80a1362 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a1436:	9b06      	ldr	r3, [sp, #24]
            for(xx=0; xx<w; xx++) {
 80a1438:	2700      	movs	r7, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a143a:	4413      	add	r3, r2
 80a143c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a143e:	9903      	ldr	r1, [sp, #12]
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a1440:	fb03 2304 	mla	r3, r3, r4, r2
 80a1444:	b21b      	sxth	r3, r3
 80a1446:	930b      	str	r3, [sp, #44]	; 0x2c
 80a1448:	4643      	mov	r3, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a144a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a144c:	eb02 0b01 	add.w	fp, r2, r1
 80a1450:	fa0f fb8b 	sxth.w	fp, fp
            for(xx=0; xx<w; xx++) {
 80a1454:	9a08      	ldr	r2, [sp, #32]
 80a1456:	4297      	cmp	r7, r2
 80a1458:	d23c      	bcs.n	80a14d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x298>
                if(!(bit++ & 7)) {
 80a145a:	1c5a      	adds	r2, r3, #1
 80a145c:	b2d2      	uxtb	r2, r2
 80a145e:	075b      	lsls	r3, r3, #29
 80a1460:	920d      	str	r2, [sp, #52]	; 0x34
 80a1462:	d107      	bne.n	80a1474 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x238>
                    bits = pgm_read_byte(&bitmap[bo++]);
 80a1464:	9b04      	ldr	r3, [sp, #16]
 80a1466:	9904      	ldr	r1, [sp, #16]
 80a1468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a146a:	3301      	adds	r3, #1
 80a146c:	b29b      	uxth	r3, r3
 80a146e:	f812 9001 	ldrb.w	r9, [r2, r1]
 80a1472:	9304      	str	r3, [sp, #16]
                if(bits & 0x80) {
 80a1474:	f019 0f80 	tst.w	r9, #128	; 0x80
 80a1478:	d011      	beq.n	80a149e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x262>
                    if(size_x == 1 && size_y == 1) {
 80a147a:	2d01      	cmp	r5, #1
 80a147c:	f8da 3000 	ldr.w	r3, [sl]
 80a1480:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80a1484:	d117      	bne.n	80a14b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27a>
 80a1486:	2c01      	cmp	r4, #1
 80a1488:	d115      	bne.n	80a14b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27a>
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a148a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a148c:	699b      	ldr	r3, [r3, #24]
 80a148e:	4411      	add	r1, r2
 80a1490:	4439      	add	r1, r7
 80a1492:	461e      	mov	r6, r3
 80a1494:	465a      	mov	r2, fp
 80a1496:	4650      	mov	r0, sl
 80a1498:	9b02      	ldr	r3, [sp, #8]
 80a149a:	b209      	sxth	r1, r1
 80a149c:	47b0      	blx	r6
                bits <<= 1;
 80a149e:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
 80a14a2:	3701      	adds	r7, #1
                if(!(bit++ & 7)) {
 80a14a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                bits <<= 1;
 80a14a6:	fa5f f989 	uxtb.w	r9, r9
            for(xx=0; xx<w; xx++) {
 80a14aa:	b2ff      	uxtb	r7, r7
 80a14ac:	e7d2      	b.n	80a1454 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x218>
        int16_t  xo16 = 0, yo16 = 0;
 80a14ae:	2300      	movs	r3, #0
 80a14b0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80a14b4:	e7ad      	b.n	80a1412 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1d6>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a14b6:	9a07      	ldr	r2, [sp, #28]
 80a14b8:	4650      	mov	r0, sl
 80a14ba:	443a      	add	r2, r7
 80a14bc:	fb02 1105 	mla	r1, r2, r5, r1
 80a14c0:	9a02      	ldr	r2, [sp, #8]
 80a14c2:	b209      	sxth	r1, r1
 80a14c4:	e9cd 4200 	strd	r4, r2, [sp]
 80a14c8:	69db      	ldr	r3, [r3, #28]
 80a14ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a14cc:	461e      	mov	r6, r3
 80a14ce:	462b      	mov	r3, r5
 80a14d0:	47b0      	blx	r6
 80a14d2:	e7e4      	b.n	80a149e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x262>
        for(yy=0; yy<h; yy++) {
 80a14d4:	9e03      	ldr	r6, [sp, #12]
 80a14d6:	9b08      	ldr	r3, [sp, #32]
 80a14d8:	3601      	adds	r6, #1
 80a14da:	4498      	add	r8, r3
 80a14dc:	b2f3      	uxtb	r3, r6
 80a14de:	fa5f f888 	uxtb.w	r8, r8
 80a14e2:	9303      	str	r3, [sp, #12]
 80a14e4:	e7a3      	b.n	80a142e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
}
 80a14e6:	b011      	add	sp, #68	; 0x44
 80a14e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a14ec:	080a6f12 	.word	0x080a6f12

080a14f0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 80a14f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 80a14f2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 80a14f4:	4604      	mov	r4, r0
 80a14f6:	460b      	mov	r3, r1
 80a14f8:	b085      	sub	sp, #20
    if(!gfxFont) { // 'Classic' built-in font
 80a14fa:	2a00      	cmp	r2, #0
 80a14fc:	d134      	bne.n	80a1568 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
 80a14fe:	290a      	cmp	r1, #10
 80a1500:	d108      	bne.n	80a1514 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
 80a1502:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
 80a1504:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 80a1506:	7e42      	ldrb	r2, [r0, #25]
 80a1508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
 80a150c:	8263      	strh	r3, [r4, #18]
}
 80a150e:	2001      	movs	r0, #1
 80a1510:	b005      	add	sp, #20
 80a1512:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
 80a1514:	290d      	cmp	r1, #13
 80a1516:	d0fa      	beq.n	80a150e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80a1518:	7ee1      	ldrb	r1, [r4, #27]
 80a151a:	7e00      	ldrb	r0, [r0, #24]
 80a151c:	7e65      	ldrb	r5, [r4, #25]
 80a151e:	b171      	cbz	r1, 80a153e <_ZN12Adafruit_GFX5writeEh+0x4e>
 80a1520:	2106      	movs	r1, #6
 80a1522:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 80a1526:	fb01 6100 	mla	r1, r1, r0, r6
 80a152a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80a152e:	42b1      	cmp	r1, r6
 80a1530:	bfc1      	itttt	gt
 80a1532:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
 80a1536:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 80a1538:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 80a153c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80a153e:	8ae2      	ldrh	r2, [r4, #22]
 80a1540:	e9cd 0502 	strd	r0, r5, [sp, #8]
 80a1544:	9201      	str	r2, [sp, #4]
 80a1546:	8aa2      	ldrh	r2, [r4, #20]
 80a1548:	4620      	mov	r0, r4
 80a154a:	9200      	str	r2, [sp, #0]
 80a154c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a1550:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a1554:	f7ff fe72 	bl	80a123c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 80a1558:	7e23      	ldrb	r3, [r4, #24]
 80a155a:	8a22      	ldrh	r2, [r4, #16]
 80a155c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a1560:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80a1564:	8223      	strh	r3, [r4, #16]
 80a1566:	e7d2      	b.n	80a150e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
 80a1568:	290a      	cmp	r1, #10
 80a156a:	d107      	bne.n	80a157c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
 80a156c:	2300      	movs	r3, #0
 80a156e:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a1570:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
 80a1572:	7e41      	ldrb	r1, [r0, #25]
 80a1574:	8a42      	ldrh	r2, [r0, #18]
 80a1576:	fb01 2303 	mla	r3, r1, r3, r2
 80a157a:	e7c7      	b.n	80a150c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
 80a157c:	290d      	cmp	r1, #13
 80a157e:	d0c6      	beq.n	80a150e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80a1580:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80a1582:	42a9      	cmp	r1, r5
 80a1584:	d3c3      	bcc.n	80a150e <_ZN12Adafruit_GFX5writeEh+0x1e>
 80a1586:	7a51      	ldrb	r1, [r2, #9]
 80a1588:	4299      	cmp	r1, r3
 80a158a:	d3c0      	bcc.n	80a150e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
 80a158c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
 80a158e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
 80a1590:	b2ed      	uxtb	r5, r5
 80a1592:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
 80a1596:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80a1598:	b32f      	cbz	r7, 80a15e6 <_ZN12Adafruit_GFX5writeEh+0xf6>
 80a159a:	78e9      	ldrb	r1, [r5, #3]
 80a159c:	b319      	cbz	r1, 80a15e6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80a159e:	7ee1      	ldrb	r1, [r4, #27]
 80a15a0:	7e00      	ldrb	r0, [r0, #24]
 80a15a2:	7e66      	ldrb	r6, [r4, #25]
 80a15a4:	b191      	cbz	r1, 80a15cc <_ZN12Adafruit_GFX5writeEh+0xdc>
 80a15a6:	f995 1005 	ldrsb.w	r1, [r5, #5]
 80a15aa:	4439      	add	r1, r7
 80a15ac:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
 80a15b0:	fb00 7101 	mla	r1, r0, r1, r7
 80a15b4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80a15b8:	42b9      	cmp	r1, r7
 80a15ba:	dd07      	ble.n	80a15cc <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
 80a15bc:	2700      	movs	r7, #0
 80a15be:	8227      	strh	r7, [r4, #16]
 80a15c0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a15c4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
 80a15c6:	fb02 1206 	mla	r2, r2, r6, r1
 80a15ca:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80a15cc:	8ae2      	ldrh	r2, [r4, #22]
 80a15ce:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80a15d2:	9201      	str	r2, [sp, #4]
 80a15d4:	8aa2      	ldrh	r2, [r4, #20]
 80a15d6:	4620      	mov	r0, r4
 80a15d8:	9200      	str	r2, [sp, #0]
 80a15da:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a15de:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a15e2:	f7ff fe2b 	bl	80a123c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80a15e6:	7929      	ldrb	r1, [r5, #4]
 80a15e8:	7e23      	ldrb	r3, [r4, #24]
 80a15ea:	8a22      	ldrh	r2, [r4, #16]
 80a15ec:	fb01 2303 	mla	r3, r1, r3, r2
 80a15f0:	e7b8      	b.n	80a1564 <_ZN12Adafruit_GFX5writeEh+0x74>

080a15f2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
 80a15f2:	2901      	cmp	r1, #1
 80a15f4:	bf38      	it	cc
 80a15f6:	2101      	movcc	r1, #1
 80a15f8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 80a15fa:	7641      	strb	r1, [r0, #25]
}
 80a15fc:	4770      	bx	lr
	...

080a1600 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
 80a1600:	b510      	push	{r4, lr}
 80a1602:	4b06      	ldr	r3, [pc, #24]	; (80a161c <_ZN16OledWingAdafruitD1Ev+0x1c>)
 80a1604:	4604      	mov	r4, r0
 80a1606:	6003      	str	r3, [r0, #0]
	if (mutex) {
 80a1608:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80a160a:	b108      	cbz	r0, 80a1610 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
 80a160c:	f001 f9d6 	bl	80a29bc <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
 80a1610:	4620      	mov	r0, r4
 80a1612:	f000 fccf 	bl	80a1fb4 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
 80a1616:	4620      	mov	r0, r4
 80a1618:	bd10      	pop	{r4, pc}
 80a161a:	bf00      	nop
 80a161c:	080a7474 	.word	0x080a7474

080a1620 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
 80a1620:	b510      	push	{r4, lr}
 80a1622:	4604      	mov	r4, r0
}
 80a1624:	f7ff ffec 	bl	80a1600 <_ZN16OledWingAdafruitD1Ev>
 80a1628:	4620      	mov	r0, r4
 80a162a:	2170      	movs	r1, #112	; 0x70
 80a162c:	f002 fe8d 	bl	80a434a <_ZdlPvj>
 80a1630:	4620      	mov	r0, r4
 80a1632:	bd10      	pop	{r4, pc}

080a1634 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
 80a1634:	b530      	push	{r4, r5, lr}
 80a1636:	b085      	sub	sp, #20
 80a1638:	4604      	mov	r4, r0
 80a163a:	460d      	mov	r5, r1
 80a163c:	f002 fe58 	bl	80a42f0 <_Z19__fetch_global_Wirev>
 80a1640:	4a10      	ldr	r2, [pc, #64]	; (80a1684 <_ZN16OledWingAdafruitC1Ei+0x50>)
 80a1642:	4911      	ldr	r1, [pc, #68]	; (80a1688 <_ZN16OledWingAdafruitC1Ei+0x54>)
 80a1644:	4603      	mov	r3, r0
 80a1646:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80a164a:	f04f 32ff 	mov.w	r2, #4294967295
 80a164e:	2180      	movs	r1, #128	; 0x80
 80a1650:	9200      	str	r2, [sp, #0]
 80a1652:	4620      	mov	r0, r4
 80a1654:	2220      	movs	r2, #32
 80a1656:	f000 fd3b 	bl	80a20d0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
 80a165a:	4b0c      	ldr	r3, [pc, #48]	; (80a168c <_ZN16OledWingAdafruitC1Ei+0x58>)
 80a165c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80a1660:	6023      	str	r3, [r4, #0]
 80a1662:	2300      	movs	r3, #0
 80a1664:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
 80a1668:	f000 f854 	bl	80a1714 <_ZN8DebounceC1Ev>
 80a166c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80a1670:	f000 f850 	bl	80a1714 <_ZN8DebounceC1Ev>
 80a1674:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80a1678:	f000 f84c 	bl	80a1714 <_ZN8DebounceC1Ev>
}
 80a167c:	4620      	mov	r0, r4
 80a167e:	b005      	add	sp, #20
 80a1680:	bd30      	pop	{r4, r5, pc}
 80a1682:	bf00      	nop
 80a1684:	00061a80 	.word	0x00061a80
 80a1688:	000186a0 	.word	0x000186a0
 80a168c:	080a7474 	.word	0x080a7474

080a1690 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
 80a1690:	b513      	push	{r0, r1, r4, lr}
 80a1692:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
 80a1694:	3050      	adds	r0, #80	; 0x50
 80a1696:	f001 f989 	bl	80a29ac <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
 80a169a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a169c:	07d9      	lsls	r1, r3, #31
 80a169e:	d505      	bpl.n	80a16ac <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
 80a16a0:	2202      	movs	r2, #2
 80a16a2:	2104      	movs	r1, #4
 80a16a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80a16a8:	f000 f848 	bl	80a173c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
 80a16ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a16ae:	079a      	lsls	r2, r3, #30
 80a16b0:	d505      	bpl.n	80a16be <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
 80a16b2:	2200      	movs	r2, #0
 80a16b4:	2103      	movs	r1, #3
 80a16b6:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80a16ba:	f000 f83f 	bl	80a173c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
 80a16be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a16c0:	075b      	lsls	r3, r3, #29
 80a16c2:	d505      	bpl.n	80a16d0 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
 80a16c4:	2202      	movs	r2, #2
 80a16c6:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80a16ca:	4611      	mov	r1, r2
 80a16cc:	f000 f836 	bl	80a173c <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
 80a16d0:	2301      	movs	r3, #1
 80a16d2:	223c      	movs	r2, #60	; 0x3c
 80a16d4:	2102      	movs	r1, #2
 80a16d6:	4620      	mov	r0, r4
 80a16d8:	9300      	str	r3, [sp, #0]
 80a16da:	f000 fdf9 	bl	80a22d0 <_ZN16Adafruit_SSD13065beginEhhbb>
}
 80a16de:	b002      	add	sp, #8
 80a16e0:	bd10      	pop	{r4, pc}

080a16e2 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
 80a16e2:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
 80a16e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
void OledWingAdafruit::loop() {
 80a16e6:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
 80a16e8:	07d9      	lsls	r1, r3, #31
 80a16ea:	d502      	bpl.n	80a16f2 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
 80a16ec:	3058      	adds	r0, #88	; 0x58
 80a16ee:	f000 f832 	bl	80a1756 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
 80a16f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a16f4:	079a      	lsls	r2, r3, #30
 80a16f6:	d503      	bpl.n	80a1700 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
 80a16f8:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80a16fc:	f000 f82b 	bl	80a1756 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
 80a1700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a1702:	075b      	lsls	r3, r3, #29
 80a1704:	d505      	bpl.n	80a1712 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
 80a1706:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
 80a170a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
 80a170e:	f000 b822 	b.w	80a1756 <_ZN8Debounce6updateEv>
}
 80a1712:	bd10      	pop	{r4, pc}

080a1714 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
 80a1714:	2100      	movs	r1, #0
 80a1716:	220a      	movs	r2, #10
 80a1718:	e9c0 1200 	strd	r1, r2, [r0]
{}
 80a171c:	4770      	bx	lr

080a171e <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
 80a171e:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
 80a1720:	b510      	push	{r4, lr}
 80a1722:	4604      	mov	r4, r0
    this->pin = pin;
 80a1724:	71c1      	strb	r1, [r0, #7]
    state = 0;
 80a1726:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
 80a1728:	b288      	uxth	r0, r1
 80a172a:	f002 fd61 	bl	80a41f0 <digitalRead>
 80a172e:	b108      	cbz	r0, 80a1734 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
 80a1730:	2303      	movs	r3, #3
 80a1732:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1734:	f001 f932 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
 80a1738:	6020      	str	r0, [r4, #0]
#endif
}
 80a173a:	bd10      	pop	{r4, pc}

080a173c <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
 80a173c:	b538      	push	{r3, r4, r5, lr}
 80a173e:	460c      	mov	r4, r1
 80a1740:	4605      	mov	r5, r0
  pinMode(pin, mode);
 80a1742:	4611      	mov	r1, r2
 80a1744:	b2a0      	uxth	r0, r4
 80a1746:	f002 fd29 	bl	80a419c <pinMode>
  
  this->attach(pin);
 80a174a:	4621      	mov	r1, r4
 80a174c:	4628      	mov	r0, r5
}
 80a174e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
 80a1752:	f7ff bfe4 	b.w	80a171e <_ZN8Debounce6attachEi>

080a1756 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
 80a1756:	b538      	push	{r3, r4, r5, lr}
 80a1758:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
 80a175a:	79c0      	ldrb	r0, [r0, #7]
 80a175c:	f002 fd48 	bl	80a41f0 <digitalRead>
 80a1760:	3800      	subs	r0, #0
 80a1762:	bf18      	it	ne
 80a1764:	2001      	movne	r0, #1
    state &= ~_BV(STATE_CHANGED);
 80a1766:	79a5      	ldrb	r5, [r4, #6]
 80a1768:	f025 0308 	bic.w	r3, r5, #8

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
 80a176c:	f3c5 0540 	ubfx	r5, r5, #1, #1
 80a1770:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
 80a1772:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
 80a1774:	d00a      	beq.n	80a178c <_ZN8Debounce6updateEv+0x36>
 80a1776:	f001 f911 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
 80a177a:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
 80a177c:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
 80a177e:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
 80a1782:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
 80a1784:	79a0      	ldrb	r0, [r4, #6]
#endif
}
 80a1786:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80a178a:	bd38      	pop	{r3, r4, r5, pc}
 80a178c:	f001 f906 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
 80a1790:	6823      	ldr	r3, [r4, #0]
 80a1792:	1ac0      	subs	r0, r0, r3
 80a1794:	88a3      	ldrh	r3, [r4, #4]
 80a1796:	4298      	cmp	r0, r3
 80a1798:	d3f4      	bcc.n	80a1784 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
 80a179a:	79a3      	ldrb	r3, [r4, #6]
 80a179c:	f003 0301 	and.w	r3, r3, #1
 80a17a0:	42ab      	cmp	r3, r5
 80a17a2:	d0ef      	beq.n	80a1784 <_ZN8Debounce6updateEv+0x2e>
 80a17a4:	f001 f8fa 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
 80a17a8:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
 80a17aa:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
 80a17ac:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
 80a17b0:	f043 0308 	orr.w	r3, r3, #8
 80a17b4:	e7e5      	b.n	80a1782 <_ZN8Debounce6updateEv+0x2c>

080a17b6 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
 80a17b6:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
 80a17ba:	b510      	push	{r4, lr}
 80a17bc:	4604      	mov	r4, r0
            this->mqtt = mqtt;
 80a17be:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
 80a17c0:	b113      	cbz	r3, 80a17c8 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
 80a17c2:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80a17c4:	f001 f902 	bl	80a29cc <os_mutex_lock>
#endif
#endif
#endif
        }
 80a17c8:	4620      	mov	r0, r4
 80a17ca:	bd10      	pop	{r4, pc}

080a17cc <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
 80a17cc:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
 80a17ce:	6803      	ldr	r3, [r0, #0]
        ~MutexLocker() {
 80a17d0:	4604      	mov	r4, r0
            if (mqtt->thread)
 80a17d2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80a17d6:	b112      	cbz	r2, 80a17de <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
 80a17d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80a17da:	f001 f8ff 	bl	80a29dc <os_mutex_unlock>
#endif
#endif
#endif
        }
 80a17de:	4620      	mov	r0, r4
 80a17e0:	bd10      	pop	{r4, pc}

080a17e2 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
 80a17e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17e4:	461f      	mov	r7, r3
 80a17e6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a17ea:	4604      	mov	r4, r0
 80a17ec:	460d      	mov	r5, r1
 80a17ee:	4616      	mov	r6, r2
    if (thread) {
 80a17f0:	b123      	cbz	r3, 80a17fc <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1a>
        this->thread = true;
 80a17f2:	2301      	movs	r3, #1
        os_mutex_create(&mutex_lock);
 80a17f4:	3058      	adds	r0, #88	; 0x58
        this->thread = true;
 80a17f6:	7103      	strb	r3, [r0, #4]
        os_mutex_create(&mutex_lock);
 80a17f8:	f001 f8d8 	bl	80a29ac <os_mutex_create>
    }
    this->callback = callback;
 80a17fc:	9b08      	ldr	r3, [sp, #32]
 80a17fe:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
 80a1800:	2300      	movs	r3, #0
 80a1802:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
 80a1804:	b106      	cbz	r6, 80a1808 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x26>
        this->ip = ip;
 80a1806:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
 80a1808:	b125      	cbz	r5, 80a1814 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x32>
        this->domain = domain;
 80a180a:	4629      	mov	r1, r5
 80a180c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a1810:	f001 ff01 	bl	80a3616 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a1814:	9b06      	ldr	r3, [sp, #24]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a1816:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a1818:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a181a:	9b07      	ldr	r3, [sp, #28]
    this->port = port;
 80a181c:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a1820:	2bff      	cmp	r3, #255	; 0xff
 80a1822:	bfb8      	it	lt
 80a1824:	23ff      	movlt	r3, #255	; 0xff
 80a1826:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a182a:	b108      	cbz	r0, 80a1830 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x4e>
      delete[] buffer;
 80a182c:	f7fe fc3b 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a1830:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a1834:	f7fe fc33 	bl	80a009e <_Znaj>
 80a1838:	61e0      	str	r0, [r4, #28]
}
 80a183a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a183c <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a183c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a1840:	4604      	mov	r4, r0
            bool thread) {
 80a1842:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a1844:	4698      	mov	r8, r3
 80a1846:	4617      	mov	r7, r2
 80a1848:	460e      	mov	r6, r1
            bool thread) {
 80a184a:	f001 fe39 	bl	80a34c0 <_ZN9TCPClientC1Ev>
 80a184e:	490d      	ldr	r1, [pc, #52]	; (80a1884 <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
 80a1850:	61e5      	str	r5, [r4, #28]
 80a1852:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a1856:	f001 fecb 	bl	80a35f0 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a185a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80a185e:	22ff      	movs	r2, #255	; 0xff
 80a1860:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80a1864:	230f      	movs	r3, #15
 80a1866:	4620      	mov	r0, r4
 80a1868:	e9cd 3200 	strd	r3, r2, [sp]
 80a186c:	4631      	mov	r1, r6
 80a186e:	463b      	mov	r3, r7
 80a1870:	462a      	mov	r2, r5
            bool thread) {
 80a1872:	64a5      	str	r5, [r4, #72]	; 0x48
 80a1874:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a1878:	f7ff ffb3 	bl	80a17e2 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
 80a187c:	4620      	mov	r0, r4
 80a187e:	b004      	add	sp, #16
 80a1880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1884:	080a6e53 	.word	0x080a6e53

080a1888 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a1888:	b510      	push	{r4, lr}
 80a188a:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a188c:	4620      	mov	r0, r4
 80a188e:	f001 fd2d 	bl	80a32ec <_ZN9TCPClient9availableEv>
 80a1892:	2800      	cmp	r0, #0
 80a1894:	d0fa      	beq.n	80a188c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a1896:	4620      	mov	r0, r4
 80a1898:	f001 fc6b 	bl	80a3172 <_ZN9TCPClient4readEv>
}
 80a189c:	b2c0      	uxtb	r0, r0
 80a189e:	bd10      	pop	{r4, pc}

080a18a0 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a18a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a18a4:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a18a6:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a18a8:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a18aa:	2701      	movs	r7, #1
    buffer[len++] = readByte();
 80a18ac:	f7ff ffec 	bl	80a1888 <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a18b0:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
 80a18b4:	7020      	strb	r0, [r4, #0]
 80a18b6:	463c      	mov	r4, r7
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a18b8:	69eb      	ldr	r3, [r5, #28]
 80a18ba:	f893 a000 	ldrb.w	sl, [r3]
 80a18be:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a18c2:	4628      	mov	r0, r5
 80a18c4:	f7ff ffe0 	bl	80a1888 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a18c8:	4626      	mov	r6, r4
 80a18ca:	69eb      	ldr	r3, [r5, #28]
 80a18cc:	3401      	adds	r4, #1
 80a18ce:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a18d0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a18d4:	fb03 8807 	mla	r8, r3, r7, r8
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a18d8:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a18da:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a18dc:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
 80a18e0:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    } while ((digit & 128) != 0);
 80a18e4:	d4ed      	bmi.n	80a18c2 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a18e6:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a18e8:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a18ec:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a18f0:	d124      	bne.n	80a193c <_ZN4MQTT10readPacketEPh+0x9c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a18f2:	4628      	mov	r0, r5
 80a18f4:	69ef      	ldr	r7, [r5, #28]
 80a18f6:	f7ff ffc7 	bl	80a1888 <_ZN4MQTT8readByteEv>
 80a18fa:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
 80a18fc:	4628      	mov	r0, r5
 80a18fe:	69ef      	ldr	r7, [r5, #28]
 80a1900:	f7ff ffc2 	bl	80a1888 <_ZN4MQTT8readByteEv>
 80a1904:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a1906:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a1908:	b2b6      	uxth	r6, r6
 80a190a:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a190c:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a190e:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a1910:	b2b6      	uxth	r6, r6
 80a1912:	46b1      	mov	r9, r6
 80a1914:	4627      	mov	r7, r4
 80a1916:	45c1      	cmp	r9, r8
 80a1918:	d212      	bcs.n	80a1940 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a191a:	4628      	mov	r0, r5
 80a191c:	f7ff ffb4 	bl	80a1888 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a1920:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a1924:	f109 0901 	add.w	r9, r9, #1
        if (len < this->maxpacketsize) {
 80a1928:	42bb      	cmp	r3, r7
            buffer[len] = digit;
 80a192a:	bf88      	it	hi
 80a192c:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
 80a192e:	fa1f f989 	uxth.w	r9, r9
            buffer[len] = digit;
 80a1932:	bf88      	it	hi
 80a1934:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
 80a1936:	3701      	adds	r7, #1
 80a1938:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
 80a193a:	e7ec      	b.n	80a1916 <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a193c:	2600      	movs	r6, #0
 80a193e:	e7e7      	b.n	80a1910 <_ZN4MQTT10readPacketEPh+0x70>
 80a1940:	eba8 0006 	sub.w	r0, r8, r6
 80a1944:	45b0      	cmp	r8, r6
 80a1946:	bf2c      	ite	cs
 80a1948:	4606      	movcs	r6, r0
 80a194a:	2600      	movcc	r6, #0
    }

    if (len > this->maxpacketsize) {
 80a194c:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
 80a1950:	4434      	add	r4, r6
 80a1952:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a1954:	42a0      	cmp	r0, r4
 80a1956:	bf2c      	ite	cs
 80a1958:	4620      	movcs	r0, r4
 80a195a:	2000      	movcc	r0, #0
 80a195c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a1960 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a1960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1962:	468c      	mov	ip, r1
 80a1964:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a1966:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a1968:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a196a:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a196c:	46ae      	mov	lr, r5
 80a196e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a1972:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a1976:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a1978:	bf88      	it	hi
 80a197a:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        lenBuf[pos++] = digit;
 80a197e:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a1980:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a1984:	4403      	add	r3, r0
        len = len / 128;
 80a1986:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
 80a198a:	b2e4      	uxtb	r4, r4
 80a198c:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
 80a1990:	d810      	bhi.n	80a19b4 <_ZN4MQTT5writeEhPht+0x54>

    buf[4-llen] = header;
 80a1992:	f1c4 0304 	rsb	r3, r4, #4
 80a1996:	18d1      	adds	r1, r2, r3
 80a1998:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a199c:	f1c4 0305 	rsb	r3, r4, #5
 80a19a0:	4413      	add	r3, r2
 80a19a2:	a801      	add	r0, sp, #4
 80a19a4:	3205      	adds	r2, #5
 80a19a6:	4293      	cmp	r3, r2
 80a19a8:	d006      	beq.n	80a19b8 <_ZN4MQTT5writeEhPht+0x58>
        buf[5-llen+i] = lenBuf[i];
 80a19aa:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a19ae:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
 80a19b2:	e7f8      	b.n	80a19a6 <_ZN4MQTT5writeEhPht+0x46>
        lenBuf[pos++] = digit;
 80a19b4:	4623      	mov	r3, r4
 80a19b6:	e7d9      	b.n	80a196c <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a19b8:	1c72      	adds	r2, r6, #1
 80a19ba:	4422      	add	r2, r4
 80a19bc:	4638      	mov	r0, r7
 80a19be:	f001 fb5a 	bl	80a3076 <_ZN9TCPClient5writeEPKhj>
 80a19c2:	4605      	mov	r5, r0
 80a19c4:	f000 ffea 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a19c8:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a19ca:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a19cc:	4434      	add	r4, r6
 80a19ce:	b2a8      	uxth	r0, r5
}
 80a19d0:	1a23      	subs	r3, r4, r0
 80a19d2:	4258      	negs	r0, r3
 80a19d4:	4158      	adcs	r0, r3
 80a19d6:	b003      	add	sp, #12
 80a19d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a19da <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a19da:	b513      	push	{r0, r1, r4, lr}
 80a19dc:	4604      	mov	r4, r0
    MutexLocker lock(this);
 80a19de:	4601      	mov	r1, r0
 80a19e0:	a801      	add	r0, sp, #4
 80a19e2:	f7ff fee8 	bl	80a17b6 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
 80a19e6:	22e0      	movs	r2, #224	; 0xe0
 80a19e8:	69e3      	ldr	r3, [r4, #28]
    buffer[1] = 0;
    _client.write(buffer,2);
 80a19ea:	4620      	mov	r0, r4
    buffer[0] = MQTTDISCONNECT;
 80a19ec:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a19ee:	2200      	movs	r2, #0
 80a19f0:	69e3      	ldr	r3, [r4, #28]
 80a19f2:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a19f4:	69e1      	ldr	r1, [r4, #28]
 80a19f6:	2202      	movs	r2, #2
 80a19f8:	f001 fb3d 	bl	80a3076 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a19fc:	4620      	mov	r0, r4
 80a19fe:	f001 fcaf 	bl	80a3360 <_ZN9TCPClient4stopEv>
 80a1a02:	f000 ffcb 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a1a06:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
 80a1a0a:	a801      	add	r0, sp, #4
 80a1a0c:	f7ff fede 	bl	80a17cc <_ZN4MQTT11MutexLockerD1Ev>
}
 80a1a10:	b002      	add	sp, #8
 80a1a12:	bd10      	pop	{r4, pc}

080a1a14 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a1a14:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a1a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1a18:	4604      	mov	r4, r0
    pos += 2;
 80a1a1a:	b298      	uxth	r0, r3
 80a1a1c:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a1a1e:	5ccd      	ldrb	r5, [r1, r3]
 80a1a20:	b14d      	cbz	r5, 80a1a36 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a1a22:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a1a26:	1c5f      	adds	r7, r3, #1
 80a1a28:	4286      	cmp	r6, r0
 80a1a2a:	d904      	bls.n	80a1a36 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a1a2c:	1c46      	adds	r6, r0, #1
 80a1a2e:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a1a30:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a1a32:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
 80a1a34:	e7f3      	b.n	80a1a1e <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a1a36:	b299      	uxth	r1, r3
 80a1a38:	1a44      	subs	r4, r0, r1
 80a1a3a:	4422      	add	r2, r4
 80a1a3c:	1209      	asrs	r1, r1, #8
 80a1a3e:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a1a42:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a1a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1a48 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a1a48:	b538      	push	{r3, r4, r5, lr}
 80a1a4a:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a1a4c:	f001 fcdf 	bl	80a340e <_ZN9TCPClient9connectedEv>
 80a1a50:	2800      	cmp	r0, #0
 80a1a52:	bf14      	ite	ne
 80a1a54:	2501      	movne	r5, #1
 80a1a56:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a1a58:	d102      	bne.n	80a1a60 <_ZN4MQTT11isConnectedEv+0x18>
 80a1a5a:	4620      	mov	r0, r4
 80a1a5c:	f001 fc80 	bl	80a3360 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a1a60:	4628      	mov	r0, r5
 80a1a62:	bd38      	pop	{r3, r4, r5, pc}

080a1a64 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a1a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1a68:	b088      	sub	sp, #32
 80a1a6a:	4604      	mov	r4, r0
 80a1a6c:	4689      	mov	r9, r1
 80a1a6e:	4617      	mov	r7, r2
 80a1a70:	461e      	mov	r6, r3
 80a1a72:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80a1a76:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    if (!isConnected()) {
 80a1a7a:	f7ff ffe5 	bl	80a1a48 <_ZN4MQTT11isConnectedEv>
 80a1a7e:	4605      	mov	r5, r0
 80a1a80:	2800      	cmp	r0, #0
 80a1a82:	f040 80cb 	bne.w	80a1c1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
 80a1a86:	4621      	mov	r1, r4
 80a1a88:	a801      	add	r0, sp, #4
 80a1a8a:	f7ff fe94 	bl	80a17b6 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
 80a1a8e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a1a90:	2900      	cmp	r1, #0
 80a1a92:	f040 8087 	bne.w	80a1ba4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
 80a1a96:	462b      	mov	r3, r5
 80a1a98:	4620      	mov	r0, r4
 80a1a9a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a1a9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a1aa0:	f001 fd26 	bl	80a34f0 <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a1aa4:	2800      	cmp	r0, #0
 80a1aa6:	d079      	beq.n	80a1b9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
 80a1aa8:	2301      	movs	r3, #1
 80a1aaa:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a1aac:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80a1ab0:	69e2      	ldr	r2, [r4, #28]
 80a1ab2:	2b04      	cmp	r3, #4
 80a1ab4:	f040 8081 	bne.w	80a1bba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a1ab8:	4b59      	ldr	r3, [pc, #356]	; (80a1c20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
 80a1aba:	6818      	ldr	r0, [r3, #0]
 80a1abc:	8899      	ldrh	r1, [r3, #4]
 80a1abe:	799b      	ldrb	r3, [r3, #6]
 80a1ac0:	f8ad 100c 	strh.w	r1, [sp, #12]
 80a1ac4:	f88d 300e 	strb.w	r3, [sp, #14]
 80a1ac8:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a1aca:	f8c2 0005 	str.w	r0, [r2, #5]
 80a1ace:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a1ad2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80a1ad6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a1ad8:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a1ada:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a1ade:	f1b8 0f00 	cmp.w	r8, #0
 80a1ae2:	d07f      	beq.n	80a1be4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a1ae4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80a1ae8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80a1aec:	0140      	lsls	r0, r0, #5
 80a1aee:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a1af2:	f040 0006 	orr.w	r0, r0, #6
 80a1af6:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a1af8:	f1ba 0f00 	cmp.w	sl, #0
 80a1afc:	d101      	bne.n	80a1b02 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
 80a1afe:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a1b02:	b11f      	cbz	r7, 80a1b0c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
 80a1b04:	2e00      	cmp	r6, #0
 80a1b06:	d16f      	bne.n	80a1be8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
 80a1b08:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a1b0c:	69e2      	ldr	r2, [r4, #28]
 80a1b0e:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a1b10:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a1b12:	69e1      	ldr	r1, [r4, #28]
 80a1b14:	1c58      	adds	r0, r3, #1
 80a1b16:	1212      	asrs	r2, r2, #8
 80a1b18:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a1b1a:	69e1      	ldr	r1, [r4, #28]
 80a1b1c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a1b1e:	1c9a      	adds	r2, r3, #2
 80a1b20:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a1b22:	3303      	adds	r3, #3
 80a1b24:	4649      	mov	r1, r9
 80a1b26:	4620      	mov	r0, r4
 80a1b28:	69e2      	ldr	r2, [r4, #28]
 80a1b2a:	f7ff ff73 	bl	80a1a14 <_ZN4MQTT11writeStringEPKcPht>
 80a1b2e:	4603      	mov	r3, r0
            if (willTopic) {
 80a1b30:	f1b8 0f00 	cmp.w	r8, #0
 80a1b34:	d00b      	beq.n	80a1b4e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
 80a1b36:	4641      	mov	r1, r8
 80a1b38:	69e2      	ldr	r2, [r4, #28]
 80a1b3a:	4620      	mov	r0, r4
 80a1b3c:	f7ff ff6a 	bl	80a1a14 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a1b40:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a1b42:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a1b44:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a1b46:	4620      	mov	r0, r4
 80a1b48:	f7ff ff64 	bl	80a1a14 <_ZN4MQTT11writeStringEPKcPht>
 80a1b4c:	4603      	mov	r3, r0
            if(user != NULL) {
 80a1b4e:	b167      	cbz	r7, 80a1b6a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
 80a1b50:	4639      	mov	r1, r7
 80a1b52:	4620      	mov	r0, r4
 80a1b54:	69e2      	ldr	r2, [r4, #28]
 80a1b56:	f7ff ff5d 	bl	80a1a14 <_ZN4MQTT11writeStringEPKcPht>
 80a1b5a:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a1b5c:	b12e      	cbz	r6, 80a1b6a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
 80a1b5e:	4631      	mov	r1, r6
 80a1b60:	4620      	mov	r0, r4
 80a1b62:	69e2      	ldr	r2, [r4, #28]
 80a1b64:	f7ff ff56 	bl	80a1a14 <_ZN4MQTT11writeStringEPKcPht>
 80a1b68:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a1b6a:	3b05      	subs	r3, #5
 80a1b6c:	2110      	movs	r1, #16
 80a1b6e:	69e2      	ldr	r2, [r4, #28]
 80a1b70:	b29b      	uxth	r3, r3
 80a1b72:	4620      	mov	r0, r4
 80a1b74:	f7ff fef4 	bl	80a1960 <_ZN4MQTT5writeEhPht>
 80a1b78:	f000 ff10 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a1b7c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a1b80:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a1b84:	4620      	mov	r0, r4
 80a1b86:	f001 fbb1 	bl	80a32ec <_ZN9TCPClient9availableEv>
 80a1b8a:	bb80      	cbnz	r0, 80a1bee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
 80a1b8c:	f000 ff06 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a1b90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a1b92:	1ac0      	subs	r0, r0, r3
 80a1b94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a1b96:	4373      	muls	r3, r6
 80a1b98:	4298      	cmp	r0, r3
 80a1b9a:	d9f3      	bls.n	80a1b84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
 80a1b9c:	4620      	mov	r0, r4
 80a1b9e:	f001 fbdf 	bl	80a3360 <_ZN9TCPClient4stopEv>
 80a1ba2:	e034      	b.n	80a1c0e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
 80a1ba4:	a802      	add	r0, sp, #8
 80a1ba6:	f002 f835 	bl	80a3c14 <_ZN9IPAddressC1EPKh>
 80a1baa:	462b      	mov	r3, r5
 80a1bac:	4620      	mov	r0, r4
 80a1bae:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a1bb2:	a902      	add	r1, sp, #8
 80a1bb4:	f001 fb2a 	bl	80a320c <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1bb8:	e774      	b.n	80a1aa4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a1bba:	4b1a      	ldr	r3, [pc, #104]	; (80a1c24 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
 80a1bbc:	f10d 0c08 	add.w	ip, sp, #8
 80a1bc0:	6818      	ldr	r0, [r3, #0]
 80a1bc2:	6859      	ldr	r1, [r3, #4]
 80a1bc4:	7a1b      	ldrb	r3, [r3, #8]
 80a1bc6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a1bca:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a1bce:	ab02      	add	r3, sp, #8
 80a1bd0:	cb03      	ldmia	r3!, {r0, r1}
 80a1bd2:	f8c2 0005 	str.w	r0, [r2, #5]
 80a1bd6:	f8c2 1009 	str.w	r1, [r2, #9]
 80a1bda:	f89c 3000 	ldrb.w	r3, [ip]
 80a1bde:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a1be0:	230e      	movs	r3, #14
 80a1be2:	e77c      	b.n	80a1ade <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
 80a1be4:	2002      	movs	r0, #2
 80a1be6:	e787      	b.n	80a1af8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
 80a1be8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a1bec:	e78e      	b.n	80a1b0c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
 80a1bee:	4620      	mov	r0, r4
 80a1bf0:	a902      	add	r1, sp, #8
 80a1bf2:	f7ff fe55 	bl	80a18a0 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a1bf6:	2804      	cmp	r0, #4
 80a1bf8:	d1d0      	bne.n	80a1b9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
 80a1bfa:	69e3      	ldr	r3, [r4, #28]
 80a1bfc:	78de      	ldrb	r6, [r3, #3]
 80a1bfe:	2e00      	cmp	r6, #0
 80a1c00:	d1cc      	bne.n	80a1b9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
 80a1c02:	f000 fecb 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a1c06:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a1c08:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a1c0a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
 80a1c0e:	a801      	add	r0, sp, #4
 80a1c10:	f7ff fddc 	bl	80a17cc <_ZN4MQTT11MutexLockerD1Ev>
}
 80a1c14:	4628      	mov	r0, r5
 80a1c16:	b008      	add	sp, #32
 80a1c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a1c1c:	2500      	movs	r5, #0
 80a1c1e:	e7f9      	b.n	80a1c14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
 80a1c20:	080a74c4 	.word	0x080a74c4
 80a1c24:	080a74cb 	.word	0x080a74cb

080a1c28 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
 80a1c28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a1c2a:	2301      	movs	r3, #1
 80a1c2c:	2204      	movs	r2, #4
 80a1c2e:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80a1c32:	2300      	movs	r3, #0
 80a1c34:	461a      	mov	r2, r3
 80a1c36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a1c3a:	e9cd 3300 	strd	r3, r3, [sp]
 80a1c3e:	f7ff ff11 	bl	80a1a64 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a1c42:	b007      	add	sp, #28
 80a1c44:	f85d fb04 	ldr.w	pc, [sp], #4

080a1c48 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 80a1c48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1c4a:	4604      	mov	r4, r0
 80a1c4c:	460e      	mov	r6, r1
    if (isConnected()) {
 80a1c4e:	f7ff fefb 	bl	80a1a48 <_ZN4MQTT11isConnectedEv>
 80a1c52:	4605      	mov	r5, r0
 80a1c54:	b1c8      	cbz	r0, 80a1c8a <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
 80a1c56:	4621      	mov	r1, r4
 80a1c58:	a801      	add	r0, sp, #4
 80a1c5a:	f7ff fdac 	bl	80a17b6 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a1c5e:	2262      	movs	r2, #98	; 0x62
 80a1c60:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1c62:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a1c64:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a1c66:	2202      	movs	r2, #2
 80a1c68:	69e3      	ldr	r3, [r4, #28]
 80a1c6a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a1c6c:	69e3      	ldr	r3, [r4, #28]
 80a1c6e:	1232      	asrs	r2, r6, #8
 80a1c70:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a1c72:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1c74:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a1c76:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 80a1c78:	69e1      	ldr	r1, [r4, #28]
 80a1c7a:	f001 f9fc 	bl	80a3076 <_ZN9TCPClient5writeEPKhj>
 80a1c7e:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 80a1c80:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 80a1c82:	bf18      	it	ne
 80a1c84:	2501      	movne	r5, #1
        MutexLocker lock(this);
 80a1c86:	f7ff fda1 	bl	80a17cc <_ZN4MQTT11MutexLockerD1Ev>
}
 80a1c8a:	4628      	mov	r0, r5
 80a1c8c:	b002      	add	sp, #8
 80a1c8e:	bd70      	pop	{r4, r5, r6, pc}

080a1c90 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 80a1c90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1c92:	4604      	mov	r4, r0
 80a1c94:	460e      	mov	r6, r1
    if (isConnected()) {
 80a1c96:	f7ff fed7 	bl	80a1a48 <_ZN4MQTT11isConnectedEv>
 80a1c9a:	4605      	mov	r5, r0
 80a1c9c:	b1c8      	cbz	r0, 80a1cd2 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
 80a1c9e:	4621      	mov	r1, r4
 80a1ca0:	a801      	add	r0, sp, #4
 80a1ca2:	f7ff fd88 	bl	80a17b6 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a1ca6:	2272      	movs	r2, #114	; 0x72
 80a1ca8:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1caa:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a1cac:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a1cae:	2202      	movs	r2, #2
 80a1cb0:	69e3      	ldr	r3, [r4, #28]
 80a1cb2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a1cb4:	69e3      	ldr	r3, [r4, #28]
 80a1cb6:	1232      	asrs	r2, r6, #8
 80a1cb8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a1cba:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1cbc:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a1cbe:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
 80a1cc0:	69e1      	ldr	r1, [r4, #28]
 80a1cc2:	f001 f9d8 	bl	80a3076 <_ZN9TCPClient5writeEPKhj>
 80a1cc6:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
 80a1cc8:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
 80a1cca:	bf18      	it	ne
 80a1ccc:	2501      	movne	r5, #1
        MutexLocker lock(this);
 80a1cce:	f7ff fd7d 	bl	80a17cc <_ZN4MQTT11MutexLockerD1Ev>
}
 80a1cd2:	4628      	mov	r0, r5
 80a1cd4:	b002      	add	sp, #8
 80a1cd6:	bd70      	pop	{r4, r5, r6, pc}

080a1cd8 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 80a1cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1cdc:	b087      	sub	sp, #28
 80a1cde:	af00      	add	r7, sp, #0
 80a1ce0:	4604      	mov	r4, r0
    if (isConnected()) {
 80a1ce2:	f7ff feb1 	bl	80a1a48 <_ZN4MQTT11isConnectedEv>
 80a1ce6:	4681      	mov	r9, r0
 80a1ce8:	b1f8      	cbz	r0, 80a1d2a <_ZN4MQTT4loopEv+0x52>
        MutexLocker lock(this);
 80a1cea:	4621      	mov	r1, r4
 80a1cec:	f107 0014 	add.w	r0, r7, #20
 80a1cf0:	f7ff fd61 	bl	80a17b6 <_ZN4MQTT11MutexLockerC1EPS_>
 80a1cf4:	f000 fe52 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a1cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1cfc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a1cfe:	4606      	mov	r6, r0
 80a1d00:	4353      	muls	r3, r2
 80a1d02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a1d04:	1a82      	subs	r2, r0, r2
 80a1d06:	429a      	cmp	r2, r3
 80a1d08:	d803      	bhi.n	80a1d12 <_ZN4MQTT4loopEv+0x3a>
 80a1d0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a1d0c:	1a82      	subs	r2, r0, r2
 80a1d0e:	4293      	cmp	r3, r2
 80a1d10:	d21f      	bcs.n	80a1d52 <_ZN4MQTT4loopEv+0x7a>
            if (pingOutstanding) {
 80a1d12:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a1d16:	b16b      	cbz	r3, 80a1d34 <_ZN4MQTT4loopEv+0x5c>
                _client.stop();
 80a1d18:	4620      	mov	r0, r4
 80a1d1a:	f001 fb21 	bl	80a3360 <_ZN9TCPClient4stopEv>
                return false;
 80a1d1e:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
 80a1d22:	f107 0014 	add.w	r0, r7, #20
 80a1d26:	f7ff fd51 	bl	80a17cc <_ZN4MQTT11MutexLockerD1Ev>
}
 80a1d2a:	4648      	mov	r0, r9
 80a1d2c:	371c      	adds	r7, #28
 80a1d2e:	46bd      	mov	sp, r7
 80a1d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 80a1d34:	21c0      	movs	r1, #192	; 0xc0
 80a1d36:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a1d38:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 80a1d3a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a1d3c:	69e2      	ldr	r2, [r4, #28]
 80a1d3e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a1d40:	69e1      	ldr	r1, [r4, #28]
 80a1d42:	2202      	movs	r2, #2
 80a1d44:	f001 f997 	bl	80a3076 <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 80a1d48:	2301      	movs	r3, #1
                lastInActivity = t;
 80a1d4a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 80a1d4e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 80a1d52:	4620      	mov	r0, r4
 80a1d54:	f001 faca 	bl	80a32ec <_ZN9TCPClient9availableEv>
 80a1d58:	2800      	cmp	r0, #0
 80a1d5a:	d0e2      	beq.n	80a1d22 <_ZN4MQTT4loopEv+0x4a>
            uint16_t len = readPacket(&llen);
 80a1d5c:	4620      	mov	r0, r4
 80a1d5e:	f107 0113 	add.w	r1, r7, #19
 80a1d62:	f7ff fd9d 	bl	80a18a0 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 80a1d66:	4683      	mov	fp, r0
 80a1d68:	2800      	cmp	r0, #0
 80a1d6a:	d0da      	beq.n	80a1d22 <_ZN4MQTT4loopEv+0x4a>
                uint8_t type = buffer[0]&0xF0;
 80a1d6c:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 80a1d6e:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a1d70:	7819      	ldrb	r1, [r3, #0]
 80a1d72:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a1d76:	2a30      	cmp	r2, #48	; 0x30
 80a1d78:	d17d      	bne.n	80a1e76 <_ZN4MQTT4loopEv+0x19e>
                    if (callback) {
 80a1d7a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80a1d7e:	f1ba 0f00 	cmp.w	sl, #0
 80a1d82:	d0ce      	beq.n	80a1d22 <_ZN4MQTT4loopEv+0x4a>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a1d84:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
 80a1d88:	f8c7 d004 	str.w	sp, [r7, #4]
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a1d8c:	eb03 020c 	add.w	r2, r3, ip
 80a1d90:	7855      	ldrb	r5, [r2, #1]
 80a1d92:	7891      	ldrb	r1, [r2, #2]
 80a1d94:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 80a1d98:	b28d      	uxth	r5, r1
                        char topic[tl+1];
 80a1d9a:	4669      	mov	r1, sp
 80a1d9c:	f105 0208 	add.w	r2, r5, #8
 80a1da0:	08d2      	lsrs	r2, r2, #3
 80a1da2:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 80a1da6:	4695      	mov	sp, r2
 80a1da8:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 80a1daa:	f10c 0203 	add.w	r2, ip, #3
 80a1dae:	60fa      	str	r2, [r7, #12]
 80a1db0:	eb03 0e02 	add.w	lr, r3, r2
 80a1db4:	eb0d 0205 	add.w	r2, sp, r5
 80a1db8:	f8c7 d008 	str.w	sp, [r7, #8]
 80a1dbc:	603a      	str	r2, [r7, #0]
 80a1dbe:	683a      	ldr	r2, [r7, #0]
 80a1dc0:	68b9      	ldr	r1, [r7, #8]
 80a1dc2:	428a      	cmp	r2, r1
 80a1dc4:	d006      	beq.n	80a1dd4 <_ZN4MQTT4loopEv+0xfc>
                            topic[i] = buffer[llen+3+i];
 80a1dc6:	460a      	mov	r2, r1
 80a1dc8:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80a1dcc:	f802 8b01 	strb.w	r8, [r2], #1
 80a1dd0:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 80a1dd2:	e7f4      	b.n	80a1dbe <_ZN4MQTT4loopEv+0xe6>
                        topic[tl] = 0;
 80a1dd4:	2200      	movs	r2, #0
 80a1dd6:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a1dd8:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1ddc:	68f9      	ldr	r1, [r7, #12]
 80a1dde:	f008 0806 	and.w	r8, r8, #6
 80a1de2:	ebab 020c 	sub.w	r2, fp, ip
 80a1de6:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a1de8:	f1b8 0f02 	cmp.w	r8, #2
 80a1dec:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1df0:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a1df2:	d124      	bne.n	80a1e3e <_ZN4MQTT4loopEv+0x166>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1df4:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a1df8:	4419      	add	r1, r3
 80a1dfa:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 80a1dfe:	f10c 0105 	add.w	r1, ip, #5
 80a1e02:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 80a1e04:	3a02      	subs	r2, #2
 80a1e06:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1e08:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 80a1e0c:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a1e0e:	2240      	movs	r2, #64	; 0x40
 80a1e10:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1e12:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a1e16:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a1e18:	69e3      	ldr	r3, [r4, #28]
 80a1e1a:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a1e1e:	69e3      	ldr	r3, [r4, #28]
 80a1e20:	ea4f 222b 	mov.w	r2, fp, asr #8
 80a1e24:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a1e26:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a1e28:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 80a1e2a:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 80a1e2e:	4620      	mov	r0, r4
 80a1e30:	69e1      	ldr	r1, [r4, #28]
 80a1e32:	f001 f920 	bl	80a3076 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 80a1e36:	6266      	str	r6, [r4, #36]	; 0x24
 80a1e38:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80a1e3c:	e771      	b.n	80a1d22 <_ZN4MQTT4loopEv+0x4a>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a1e3e:	f1b8 0f04 	cmp.w	r8, #4
 80a1e42:	d115      	bne.n	80a1e70 <_ZN4MQTT4loopEv+0x198>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1e44:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a1e48:	4419      	add	r1, r3
 80a1e4a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
 80a1e4e:	f10c 0105 	add.w	r1, ip, #5
 80a1e52:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 80a1e54:	3a02      	subs	r2, #2
 80a1e56:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1e58:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
 80a1e5c:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a1e5e:	2250      	movs	r2, #80	; 0x50
 80a1e60:	69e3      	ldr	r3, [r4, #28]
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1e62:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a1e66:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
 80a1e68:	2202      	movs	r2, #2
 80a1e6a:	69e3      	ldr	r3, [r4, #28]
 80a1e6c:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
 80a1e6e:	e7d6      	b.n	80a1e1e <_ZN4MQTT4loopEv+0x146>
                            callback(topic,payload,len-llen-3-tl);
 80a1e70:	4419      	add	r1, r3
 80a1e72:	47d0      	blx	sl
 80a1e74:	e7e0      	b.n	80a1e38 <_ZN4MQTT4loopEv+0x160>
                } else if (type == MQTTPUBREC) {
 80a1e76:	2a50      	cmp	r2, #80	; 0x50
 80a1e78:	d108      	bne.n	80a1e8c <_ZN4MQTT4loopEv+0x1b4>
                    msgId = (buffer[2] << 8) + buffer[3];
 80a1e7a:	789a      	ldrb	r2, [r3, #2]
 80a1e7c:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 80a1e7e:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 80a1e80:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 80a1e84:	b289      	uxth	r1, r1
 80a1e86:	f7ff fedf 	bl	80a1c48 <_ZN4MQTT14publishReleaseEt>
 80a1e8a:	e74a      	b.n	80a1d22 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBACK) {
 80a1e8c:	2a40      	cmp	r2, #64	; 0x40
 80a1e8e:	d112      	bne.n	80a1eb6 <_ZN4MQTT4loopEv+0x1de>
                if (qoscallback) {
 80a1e90:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80a1e92:	2a00      	cmp	r2, #0
 80a1e94:	f43f af45 	beq.w	80a1d22 <_ZN4MQTT4loopEv+0x4a>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a1e98:	f1bb 0f04 	cmp.w	fp, #4
 80a1e9c:	f47f af41 	bne.w	80a1d22 <_ZN4MQTT4loopEv+0x4a>
 80a1ea0:	f011 0f06 	tst.w	r1, #6
 80a1ea4:	f47f af3d 	bne.w	80a1d22 <_ZN4MQTT4loopEv+0x4a>
                        msgId = (buffer[2]<<8)+buffer[3];
 80a1ea8:	7899      	ldrb	r1, [r3, #2]
 80a1eaa:	78d8      	ldrb	r0, [r3, #3]
 80a1eac:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
 80a1eb0:	b280      	uxth	r0, r0
 80a1eb2:	4790      	blx	r2
 80a1eb4:	e735      	b.n	80a1d22 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBREL) {
 80a1eb6:	2a60      	cmp	r2, #96	; 0x60
 80a1eb8:	d108      	bne.n	80a1ecc <_ZN4MQTT4loopEv+0x1f4>
                msgId = (buffer[2] << 8) + buffer[3];
 80a1eba:	789a      	ldrb	r2, [r3, #2]
 80a1ebc:	78d9      	ldrb	r1, [r3, #3]
                this->publishComplete(msgId);
 80a1ebe:	4620      	mov	r0, r4
                msgId = (buffer[2] << 8) + buffer[3];
 80a1ec0:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
 80a1ec4:	b289      	uxth	r1, r1
 80a1ec6:	f7ff fee3 	bl	80a1c90 <_ZN4MQTT15publishCompleteEt>
 80a1eca:	e72a      	b.n	80a1d22 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPUBCOMP) {
 80a1ecc:	2a70      	cmp	r2, #112	; 0x70
 80a1ece:	d0df      	beq.n	80a1e90 <_ZN4MQTT4loopEv+0x1b8>
                } else if (type == MQTTSUBACK) {
 80a1ed0:	2a90      	cmp	r2, #144	; 0x90
 80a1ed2:	f43f af26 	beq.w	80a1d22 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPINGREQ) {
 80a1ed6:	2ac0      	cmp	r2, #192	; 0xc0
 80a1ed8:	d10a      	bne.n	80a1ef0 <_ZN4MQTT4loopEv+0x218>
                    buffer[0] = MQTTPINGRESP;
 80a1eda:	22d0      	movs	r2, #208	; 0xd0
 80a1edc:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a1ede:	2200      	movs	r2, #0
 80a1ee0:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 80a1ee2:	4620      	mov	r0, r4
                    buffer[1] = 0;
 80a1ee4:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a1ee6:	69e1      	ldr	r1, [r4, #28]
 80a1ee8:	2202      	movs	r2, #2
 80a1eea:	f001 f8c4 	bl	80a3076 <_ZN9TCPClient5writeEPKhj>
 80a1eee:	e718      	b.n	80a1d22 <_ZN4MQTT4loopEv+0x4a>
                } else if (type == MQTTPINGRESP) {
 80a1ef0:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 80a1ef2:	bf04      	itt	eq
 80a1ef4:	2300      	moveq	r3, #0
 80a1ef6:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 80a1efa:	e712      	b.n	80a1d22 <_ZN4MQTT4loopEv+0x4a>

080a1efc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a1efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1efe:	4604      	mov	r4, r0
 80a1f00:	460f      	mov	r7, r1
 80a1f02:	4616      	mov	r6, r2
    if (isConnected()) {
 80a1f04:	f7ff fda0 	bl	80a1a48 <_ZN4MQTT11isConnectedEv>
 80a1f08:	4605      	mov	r5, r0
 80a1f0a:	b310      	cbz	r0, 80a1f52 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
 80a1f0c:	4621      	mov	r1, r4
 80a1f0e:	a801      	add	r0, sp, #4
 80a1f10:	f7ff fc51 	bl	80a17b6 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
 80a1f14:	8c23      	ldrh	r3, [r4, #32]
 80a1f16:	3301      	adds	r3, #1
 80a1f18:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a1f1a:	b1eb      	cbz	r3, 80a1f58 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
 80a1f1c:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
 80a1f1e:	8c23      	ldrh	r3, [r4, #32]
 80a1f20:	69e2      	ldr	r2, [r4, #28]
 80a1f22:	121b      	asrs	r3, r3, #8
 80a1f24:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a1f26:	69e3      	ldr	r3, [r4, #28]
 80a1f28:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a1f2a:	4639      	mov	r1, r7
        buffer[length++] = (nextMsgId & 0xFF);
 80a1f2c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a1f2e:	69e2      	ldr	r2, [r4, #28]
 80a1f30:	2307      	movs	r3, #7
 80a1f32:	4620      	mov	r0, r4
 80a1f34:	f7ff fd6e 	bl	80a1a14 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a1f38:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a1f3a:	2182      	movs	r1, #130	; 0x82
        buffer[length++] = qos;
 80a1f3c:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a1f3e:	3804      	subs	r0, #4
 80a1f40:	b283      	uxth	r3, r0
 80a1f42:	69e2      	ldr	r2, [r4, #28]
 80a1f44:	4620      	mov	r0, r4
 80a1f46:	f7ff fd0b 	bl	80a1960 <_ZN4MQTT5writeEhPht>
 80a1f4a:	4605      	mov	r5, r0
        MutexLocker lock(this);
 80a1f4c:	a801      	add	r0, sp, #4
 80a1f4e:	f7ff fc3d 	bl	80a17cc <_ZN4MQTT11MutexLockerD1Ev>
}
 80a1f52:	4628      	mov	r0, r5
 80a1f54:	b003      	add	sp, #12
 80a1f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
 80a1f58:	2301      	movs	r3, #1
 80a1f5a:	e7df      	b.n	80a1f1c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

080a1f5c <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
 80a1f5c:	2200      	movs	r2, #0
 80a1f5e:	f7ff bfcd 	b.w	80a1efc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

080a1f64 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
 80a1f64:	b538      	push	{r3, r4, r5, lr}
 80a1f66:	4605      	mov	r5, r0
    if (isConnected()) {
 80a1f68:	f7ff fd6e 	bl	80a1a48 <_ZN4MQTT11isConnectedEv>
 80a1f6c:	b110      	cbz	r0, 80a1f74 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a1f6e:	4628      	mov	r0, r5
 80a1f70:	f7ff fd33 	bl	80a19da <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
 80a1f74:	69e8      	ldr	r0, [r5, #28]
 80a1f76:	b108      	cbz	r0, 80a1f7c <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a1f78:	f7fe f895 	bl	80a00a6 <_ZdaPv>
MQTT::~MQTT() {
 80a1f7c:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80a1f80:	f001 faec 	bl	80a355c <_ZN6StringD1Ev>
 80a1f84:	4b0a      	ldr	r3, [pc, #40]	; (80a1fb0 <_ZN4MQTTD1Ev+0x4c>)
	if (_M_pi != nullptr)
 80a1f86:	69ac      	ldr	r4, [r5, #24]
 80a1f88:	602b      	str	r3, [r5, #0]
 80a1f8a:	b17c      	cbz	r4, 80a1fac <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
 80a1f8c:	6863      	ldr	r3, [r4, #4]
 80a1f8e:	3b01      	subs	r3, #1
 80a1f90:	6063      	str	r3, [r4, #4]
 80a1f92:	b95b      	cbnz	r3, 80a1fac <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
 80a1f94:	6823      	ldr	r3, [r4, #0]
 80a1f96:	4620      	mov	r0, r4
 80a1f98:	689b      	ldr	r3, [r3, #8]
 80a1f9a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1f9c:	68a3      	ldr	r3, [r4, #8]
 80a1f9e:	3b01      	subs	r3, #1
 80a1fa0:	60a3      	str	r3, [r4, #8]
 80a1fa2:	b91b      	cbnz	r3, 80a1fac <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
 80a1fa4:	6823      	ldr	r3, [r4, #0]
 80a1fa6:	4620      	mov	r0, r4
 80a1fa8:	68db      	ldr	r3, [r3, #12]
 80a1faa:	4798      	blx	r3
}
 80a1fac:	4628      	mov	r0, r5
 80a1fae:	bd38      	pop	{r3, r4, r5, pc}
 80a1fb0:	080a7e64 	.word	0x080a7e64

080a1fb4 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 80a1fb4:	b510      	push	{r4, lr}
 80a1fb6:	4b04      	ldr	r3, [pc, #16]	; (80a1fc8 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
 80a1fb8:	4604      	mov	r4, r0
 80a1fba:	6003      	str	r3, [r0, #0]
  if(buffer) {
 80a1fbc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a1fbe:	b108      	cbz	r0, 80a1fc4 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
 80a1fc0:	f000 ff42 	bl	80a2e48 <free>
    buffer = NULL;
  }
}
 80a1fc4:	4620      	mov	r0, r4
 80a1fc6:	bd10      	pop	{r4, pc}
 80a1fc8:	080a7990 	.word	0x080a7990

080a1fcc <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 80a1fcc:	b510      	push	{r4, lr}
 80a1fce:	4604      	mov	r4, r0
}
 80a1fd0:	f7ff fff0 	bl	80a1fb4 <_ZN16Adafruit_SSD1306D1Ev>
 80a1fd4:	4620      	mov	r0, r4
 80a1fd6:	2150      	movs	r1, #80	; 0x50
 80a1fd8:	f002 f9b7 	bl	80a434a <_ZdlPvj>
 80a1fdc:	4620      	mov	r0, r4
 80a1fde:	bd10      	pop	{r4, pc}

080a1fe0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a1fe0:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a1fe2:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a1fe4:	db50      	blt.n	80a2088 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
 80a1fe6:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 80a1fea:	428c      	cmp	r4, r1
 80a1fec:	dd4c      	ble.n	80a2088 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
 80a1fee:	2a00      	cmp	r2, #0
 80a1ff0:	db4a      	blt.n	80a2088 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
 80a1ff2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 80a1ff6:	4294      	cmp	r4, r2
 80a1ff8:	dd46      	ble.n	80a2088 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
 80a1ffa:	7e84      	ldrb	r4, [r0, #26]
 80a1ffc:	2c02      	cmp	r4, #2
 80a1ffe:	d022      	beq.n	80a2046 <_ZN16Adafruit_SSD13069drawPixelEsst+0x66>
 80a2000:	2c03      	cmp	r4, #3
 80a2002:	d029      	beq.n	80a2058 <_ZN16Adafruit_SSD13069drawPixelEsst+0x78>
 80a2004:	2c01      	cmp	r4, #1
 80a2006:	d104      	bne.n	80a2012 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
 80a2008:	43d2      	mvns	r2, r2
 80a200a:	8904      	ldrh	r4, [r0, #8]
 80a200c:	4414      	add	r4, r2
      break;
 80a200e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 80a2010:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
 80a2012:	2b01      	cmp	r3, #1
 80a2014:	d026      	beq.n	80a2064 <_ZN16Adafruit_SSD13069drawPixelEsst+0x84>
 80a2016:	2b02      	cmp	r3, #2
 80a2018:	d037      	beq.n	80a208a <_ZN16Adafruit_SSD13069drawPixelEsst+0xaa>
 80a201a:	2b00      	cmp	r3, #0
 80a201c:	d134      	bne.n	80a2088 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
 80a201e:	4613      	mov	r3, r2
 80a2020:	2a00      	cmp	r2, #0
 80a2022:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a2026:	bfb8      	it	lt
 80a2028:	1dd3      	addlt	r3, r2, #7
 80a202a:	f343 03cf 	sbfx	r3, r3, #3, #16
 80a202e:	fb04 1103 	mla	r1, r4, r3, r1
 80a2032:	2301      	movs	r3, #1
 80a2034:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a2036:	f002 0207 	and.w	r2, r2, #7
 80a203a:	4093      	lsls	r3, r2
 80a203c:	5c42      	ldrb	r2, [r0, r1]
 80a203e:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
 80a2042:	5442      	strb	r2, [r0, r1]
    }
  }
}
 80a2044:	e020      	b.n	80a2088 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
      x = WIDTH  - x - 1;
 80a2046:	43c9      	mvns	r1, r1
      y = HEIGHT - y - 1;
 80a2048:	43d2      	mvns	r2, r2
      x = WIDTH  - x - 1;
 80a204a:	8904      	ldrh	r4, [r0, #8]
 80a204c:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
 80a204e:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH  - x - 1;
 80a2050:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 80a2052:	4422      	add	r2, r4
 80a2054:	b212      	sxth	r2, r2
      break;
 80a2056:	e7dc      	b.n	80a2012 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 80a2058:	43c9      	mvns	r1, r1
 80a205a:	8944      	ldrh	r4, [r0, #10]
 80a205c:	440c      	add	r4, r1
      break;
 80a205e:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 80a2060:	b222      	sxth	r2, r4
      break;
 80a2062:	e7d6      	b.n	80a2012 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
 80a2064:	4613      	mov	r3, r2
 80a2066:	2a00      	cmp	r2, #0
 80a2068:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a206c:	bfb8      	it	lt
 80a206e:	1dd3      	addlt	r3, r2, #7
 80a2070:	f343 03cf 	sbfx	r3, r3, #3, #16
 80a2074:	fb04 1103 	mla	r1, r4, r3, r1
 80a2078:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80a207a:	f002 0007 	and.w	r0, r2, #7
 80a207e:	2201      	movs	r2, #1
 80a2080:	4082      	lsls	r2, r0
 80a2082:	5c58      	ldrb	r0, [r3, r1]
 80a2084:	4302      	orrs	r2, r0
 80a2086:	545a      	strb	r2, [r3, r1]
}
 80a2088:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
 80a208a:	4613      	mov	r3, r2
 80a208c:	2a00      	cmp	r2, #0
 80a208e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a2092:	bfb8      	it	lt
 80a2094:	1dd3      	addlt	r3, r2, #7
 80a2096:	f343 03cf 	sbfx	r3, r3, #3, #16
 80a209a:	fb04 1103 	mla	r1, r4, r3, r1
 80a209e:	2301      	movs	r3, #1
 80a20a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a20a2:	f002 0207 	and.w	r2, r2, #7
 80a20a6:	fa03 f202 	lsl.w	r2, r3, r2
 80a20aa:	5c43      	ldrb	r3, [r0, r1]
 80a20ac:	405a      	eors	r2, r3
 80a20ae:	e7c8      	b.n	80a2042 <_ZN16Adafruit_SSD13069drawPixelEsst+0x62>

080a20b0 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a20b0:	b510      	push	{r4, lr}
 80a20b2:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
 80a20b4:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
 80a20b8:	2101      	movs	r1, #1
 80a20ba:	b280      	uxth	r0, r0
 80a20bc:	f002 f87f 	bl	80a41be <digitalWrite>
 80a20c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a20c2:	b118      	cbz	r0, 80a20cc <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
 80a20c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
 80a20c8:	f000 bf0e 	b.w	80a2ee8 <_ZN8SPIClass14endTransactionEv>
}
 80a20cc:	bd10      	pop	{r4, pc}
	...

080a20d0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
 80a20d0:	b570      	push	{r4, r5, r6, lr}
 80a20d2:	4604      	mov	r4, r0
 80a20d4:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
 80a20d6:	2600      	movs	r6, #0
 80a20d8:	f7ff f846 	bl	80a1168 <_ZN12Adafruit_GFXC1Ess>
 80a20dc:	4b11      	ldr	r3, [pc, #68]	; (80a2124 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
 80a20de:	6266      	str	r6, [r4, #36]	; 0x24
 80a20e0:	6023      	str	r3, [r4, #0]
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
 80a20e2:	b915      	cbnz	r5, 80a20ea <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
 80a20e4:	f002 f904 	bl	80a42f0 <_Z19__fetch_global_Wirev>
 80a20e8:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
 80a20ea:	23ff      	movs	r3, #255	; 0xff
 80a20ec:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 80a20f0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a20f4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80a20f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a20fc:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
 80a2100:	4b09      	ldr	r3, [pc, #36]	; (80a2128 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
}
 80a2102:	4620      	mov	r0, r4
 80a2104:	63a3      	str	r3, [r4, #56]	; 0x38
 80a2106:	2301      	movs	r3, #1
 80a2108:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  wireClk(clkDuring), restoreClk(clkAfter) {
 80a210c:	9b05      	ldr	r3, [sp, #20]
 80a210e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
 80a2112:	64a3      	str	r3, [r4, #72]	; 0x48
 80a2114:	9b06      	ldr	r3, [sp, #24]
 80a2116:	86a2      	strh	r2, [r4, #52]	; 0x34
 80a2118:	6426      	str	r6, [r4, #64]	; 0x40
 80a211a:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
 80a211e:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80a2120:	bd70      	pop	{r4, r5, r6, pc}
 80a2122:	bf00      	nop
 80a2124:	080a7990 	.word	0x080a7990
 80a2128:	080a74dc 	.word	0x080a74dc

080a212c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 80a212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a212e:	4604      	mov	r4, r0
  if(wire) { // I2C
 80a2130:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 80a2132:	460d      	mov	r5, r1
  if(wire) { // I2C
 80a2134:	b190      	cbz	r0, 80a215c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
 80a2136:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a213a:	f001 ff0b 	bl	80a3f54 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a213e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2140:	2100      	movs	r1, #0
 80a2142:	6803      	ldr	r3, [r0, #0]
 80a2144:	689b      	ldr	r3, [r3, #8]
 80a2146:	4798      	blx	r3
    WIRE_WRITE(c);
 80a2148:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a214a:	4629      	mov	r1, r5
 80a214c:	6803      	ldr	r3, [r0, #0]
 80a214e:	689b      	ldr	r3, [r3, #8]
 80a2150:	4798      	blx	r3
    wire->endTransmission();
 80a2152:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 80a2154:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
 80a2158:	f001 bf03 	b.w	80a3f62 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 80a215c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 80a2160:	4601      	mov	r1, r0
 80a2162:	b298      	uxth	r0, r3
 80a2164:	f002 f82b 	bl	80a41be <digitalWrite>
  if(spi) {
 80a2168:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a216a:	b120      	cbz	r0, 80a2176 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
 80a216c:	4629      	mov	r1, r5
}
 80a216e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
 80a2172:	f000 bf3f 	b.w	80a2ff4 <_ZN8SPIClass8transferEh>
 80a2176:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a2178:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
 80a217a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a217e:	ea05 0107 	and.w	r1, r5, r7
 80a2182:	b280      	uxth	r0, r0
 80a2184:	f002 f81b 	bl	80a41be <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a2188:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a218c:	2101      	movs	r1, #1
 80a218e:	b280      	uxth	r0, r0
 80a2190:	f002 f815 	bl	80a41be <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a2194:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a2198:	2100      	movs	r1, #0
 80a219a:	b280      	uxth	r0, r0
 80a219c:	f002 f80f 	bl	80a41be <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a21a0:	3e01      	subs	r6, #1
 80a21a2:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80a21a6:	d1e8      	bne.n	80a217a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
 80a21a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a21aa <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a21aa:	b538      	push	{r3, r4, r5, lr}
 80a21ac:	4604      	mov	r4, r0
  TRANSACTION_START
 80a21ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a21b0:	460d      	mov	r5, r1
  TRANSACTION_START
 80a21b2:	b180      	cbz	r0, 80a21d6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a21b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a21b6:	f001 febf 	bl	80a3f38 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 80a21ba:	2d00      	cmp	r5, #0
 80a21bc:	4620      	mov	r0, r4
 80a21be:	bf14      	ite	ne
 80a21c0:	21a7      	movne	r1, #167	; 0xa7
 80a21c2:	21a6      	moveq	r1, #166	; 0xa6
 80a21c4:	f7ff ffb2 	bl	80a212c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 80a21c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a21ca:	b188      	cbz	r0, 80a21f0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
 80a21cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
 80a21ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a21d2:	f001 beb1 	b.w	80a3f38 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 80a21d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a21d8:	b118      	cbz	r0, 80a21e2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
 80a21da:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a21de:	f000 fe9d 	bl	80a2f1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 80a21e2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a21e6:	2100      	movs	r1, #0
 80a21e8:	b280      	uxth	r0, r0
 80a21ea:	f001 ffe8 	bl	80a41be <digitalWrite>
 80a21ee:	e7e4      	b.n	80a21ba <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
 80a21f0:	4620      	mov	r0, r4
}
 80a21f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a21f6:	f7ff bf5b 	b.w	80a20b0 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

080a21fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 80a21fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a21fe:	4604      	mov	r4, r0
  if(wire) { // I2C
 80a2200:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 80a2202:	460d      	mov	r5, r1
  if(wire) { // I2C
 80a2204:	188f      	adds	r7, r1, r2
 80a2206:	b340      	cbz	r0, 80a225a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
 80a2208:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a220c:	f001 fea2 	bl	80a3f54 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a2210:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2212:	2100      	movs	r1, #0
 80a2214:	6803      	ldr	r3, [r0, #0]
    uint8_t bytesOut = 1;
 80a2216:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a2218:	689b      	ldr	r3, [r3, #8]
 80a221a:	4798      	blx	r3
    while(n--) {
 80a221c:	42bd      	cmp	r5, r7
 80a221e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2220:	d017      	beq.n	80a2252 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
 80a2222:	2e1f      	cmp	r6, #31
 80a2224:	d90c      	bls.n	80a2240 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
 80a2226:	f001 fe9c 	bl	80a3f62 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 80a222a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a222e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2230:	f001 fe90 	bl	80a3f54 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a2234:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2236:	2100      	movs	r1, #0
 80a2238:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 80a223a:	2601      	movs	r6, #1
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a223c:	689b      	ldr	r3, [r3, #8]
 80a223e:	4798      	blx	r3
      WIRE_WRITE(pgm_read_byte(c++));
 80a2240:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2242:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2246:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 80a2248:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
 80a224a:	689b      	ldr	r3, [r3, #8]
 80a224c:	4798      	blx	r3
      bytesOut++;
 80a224e:	b2f6      	uxtb	r6, r6
    while(n--) {
 80a2250:	e7e4      	b.n	80a221c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
 80a2252:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
 80a2256:	f001 be84 	b.w	80a3f62 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 80a225a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 80a225e:	4601      	mov	r1, r0
 80a2260:	b298      	uxth	r0, r3
 80a2262:	f001 ffac 	bl	80a41be <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
 80a2266:	42af      	cmp	r7, r5
 80a2268:	d022      	beq.n	80a22b0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
 80a226a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
 80a226c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
 80a2270:	b118      	cbz	r0, 80a227a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
 80a2272:	4649      	mov	r1, r9
 80a2274:	f000 febe 	bl	80a2ff4 <_ZN8SPIClass8transferEh>
 80a2278:	e7f5      	b.n	80a2266 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
 80a227a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a227c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
 80a2280:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a2284:	ea09 0108 	and.w	r1, r9, r8
 80a2288:	b280      	uxth	r0, r0
 80a228a:	f001 ff98 	bl	80a41be <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a228e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a2292:	2101      	movs	r1, #1
 80a2294:	b280      	uxth	r0, r0
 80a2296:	f001 ff92 	bl	80a41be <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a229a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a229e:	2100      	movs	r1, #0
 80a22a0:	b280      	uxth	r0, r0
 80a22a2:	f001 ff8c 	bl	80a41be <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a22a6:	3e01      	subs	r6, #1
 80a22a8:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80a22ac:	d1e8      	bne.n	80a2280 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
 80a22ae:	e7da      	b.n	80a2266 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
 80a22b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a22b4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
 80a22b4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80a22b8:	2100      	movs	r1, #0
 80a22ba:	1dda      	adds	r2, r3, #7
 80a22bc:	bf48      	it	mi
 80a22be:	f103 020e 	addmi.w	r2, r3, #14
 80a22c2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80a22c6:	10d2      	asrs	r2, r2, #3
 80a22c8:	435a      	muls	r2, r3
 80a22ca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a22cc:	f002 bea0 	b.w	80a5010 <memset>

080a22d0 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
 80a22d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a22d4:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a22d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
 80a22d8:	4604      	mov	r4, r0
 80a22da:	460f      	mov	r7, r1
 80a22dc:	4615      	mov	r5, r2
 80a22de:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a22e2:	b1b3      	cbz	r3, 80a2312 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
 80a22e4:	4620      	mov	r0, r4
 80a22e6:	f7ff ffe5 	bl	80a22b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
 80a22ea:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 80a22ee:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80a22f2:	2820      	cmp	r0, #32
 80a22f4:	dc1f      	bgt.n	80a2336 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 80a22f6:	2320      	movs	r3, #32
 80a22f8:	2201      	movs	r2, #1
 80a22fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80a22fe:	2373      	movs	r3, #115	; 0x73
 80a2300:	3820      	subs	r0, #32
 80a2302:	3973      	subs	r1, #115	; 0x73
 80a2304:	9300      	str	r3, [sp, #0]
 80a2306:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a230a:	4b89      	ldr	r3, [pc, #548]	; (80a2530 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
 80a230c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80a2310:	e01f      	b.n	80a2352 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a2312:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80a2316:	1dd8      	adds	r0, r3, #7
 80a2318:	bf48      	it	mi
 80a231a:	f103 000e 	addmi.w	r0, r3, #14
 80a231e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80a2322:	10c0      	asrs	r0, r0, #3
 80a2324:	4358      	muls	r0, r3
 80a2326:	f000 fd87 	bl	80a2e38 <malloc>
 80a232a:	62e0      	str	r0, [r4, #44]	; 0x2c
 80a232c:	2800      	cmp	r0, #0
 80a232e:	d1d9      	bne.n	80a22e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
 80a2330:	b004      	add	sp, #16
 80a2332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
 80a2336:	2340      	movs	r3, #64	; 0x40
 80a2338:	f04f 0c01 	mov.w	ip, #1
 80a233c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80a2340:	2352      	movs	r3, #82	; 0x52
 80a2342:	3840      	subs	r0, #64	; 0x40
 80a2344:	3952      	subs	r1, #82	; 0x52
 80a2346:	9300      	str	r3, [sp, #0]
 80a2348:	4b7a      	ldr	r3, [pc, #488]	; (80a2534 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
 80a234a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a234e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 80a2352:	f340 024f 	sbfx	r2, r0, #1, #16
 80a2356:	f341 014f 	sbfx	r1, r1, #1, #16
 80a235a:	4620      	mov	r0, r4
 80a235c:	f7fe ff1a 	bl	80a1194 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
 80a2360:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
 80a2362:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
 80a2366:	2800      	cmp	r0, #0
 80a2368:	d078      	beq.n	80a245c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 80a236a:	2d00      	cmp	r5, #0
 80a236c:	d174      	bne.n	80a2458 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
 80a236e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80a2372:	2b20      	cmp	r3, #32
 80a2374:	bf0c      	ite	eq
 80a2376:	253c      	moveq	r5, #60	; 0x3c
 80a2378:	253d      	movne	r5, #61	; 0x3d
 80a237a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
 80a237e:	f1b8 0f00 	cmp.w	r8, #0
 80a2382:	d001      	beq.n	80a2388 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
 80a2384:	f001 fddc 	bl	80a3f40 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
 80a2388:	b1fe      	cbz	r6, 80a23ca <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
 80a238a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a238e:	2800      	cmp	r0, #0
 80a2390:	db1b      	blt.n	80a23ca <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
 80a2392:	2101      	movs	r1, #1
 80a2394:	b280      	uxth	r0, r0
 80a2396:	f001 ff01 	bl	80a419c <pinMode>
    digitalWrite(rstPin, HIGH);
 80a239a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a239e:	2101      	movs	r1, #1
 80a23a0:	b280      	uxth	r0, r0
 80a23a2:	f001 ff0c 	bl	80a41be <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
 80a23a6:	2001      	movs	r0, #1
 80a23a8:	f001 fb00 	bl	80a39ac <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 80a23ac:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a23b0:	2100      	movs	r1, #0
 80a23b2:	b280      	uxth	r0, r0
 80a23b4:	f001 ff03 	bl	80a41be <digitalWrite>
    delay(10);                  // Wait 10 ms
 80a23b8:	200a      	movs	r0, #10
 80a23ba:	f001 faf7 	bl	80a39ac <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 80a23be:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a23c2:	2101      	movs	r1, #1
 80a23c4:	b280      	uxth	r0, r0
 80a23c6:	f001 fefa 	bl	80a41be <digitalWrite>
  TRANSACTION_START
 80a23ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a23cc:	2800      	cmp	r0, #0
 80a23ce:	d074      	beq.n	80a24ba <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
 80a23d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a23d2:	f001 fdb1 	bl	80a3f38 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
 80a23d6:	2204      	movs	r2, #4
 80a23d8:	4620      	mov	r0, r4
 80a23da:	4957      	ldr	r1, [pc, #348]	; (80a2538 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
 80a23dc:	f7ff ff0d 	bl	80a21fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
 80a23e0:	7aa1      	ldrb	r1, [r4, #10]
 80a23e2:	4620      	mov	r0, r4
 80a23e4:	3901      	subs	r1, #1
 80a23e6:	b2c9      	uxtb	r1, r1
 80a23e8:	f7ff fea0 	bl	80a212c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
 80a23ec:	4953      	ldr	r1, [pc, #332]	; (80a253c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
 80a23ee:	2204      	movs	r2, #4
 80a23f0:	4620      	mov	r0, r4
 80a23f2:	f7ff ff02 	bl	80a21fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80a23f6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a23fa:	4620      	mov	r0, r4
 80a23fc:	2b01      	cmp	r3, #1
 80a23fe:	bf0c      	ite	eq
 80a2400:	2110      	moveq	r1, #16
 80a2402:	2114      	movne	r1, #20
 80a2404:	f7ff fe92 	bl	80a212c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
 80a2408:	2204      	movs	r2, #4
 80a240a:	4620      	mov	r0, r4
 80a240c:	494c      	ldr	r1, [pc, #304]	; (80a2540 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
 80a240e:	f7ff fef4 	bl	80a21fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
 80a2412:	68a3      	ldr	r3, [r4, #8]
 80a2414:	4a4b      	ldr	r2, [pc, #300]	; (80a2544 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
 80a2416:	4293      	cmp	r3, r2
 80a2418:	d15c      	bne.n	80a24d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
 80a241a:	2204      	movs	r2, #4
 80a241c:	4620      	mov	r0, r4
 80a241e:	494a      	ldr	r1, [pc, #296]	; (80a2548 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
 80a2420:	f7ff feeb 	bl	80a21fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
 80a2424:	21d9      	movs	r1, #217	; 0xd9
 80a2426:	4620      	mov	r0, r4
 80a2428:	f7ff fe80 	bl	80a212c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 80a242c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a2430:	4620      	mov	r0, r4
 80a2432:	2b01      	cmp	r3, #1
 80a2434:	bf0c      	ite	eq
 80a2436:	2122      	moveq	r1, #34	; 0x22
 80a2438:	21f1      	movne	r1, #241	; 0xf1
 80a243a:	f7ff fe77 	bl	80a212c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
 80a243e:	4620      	mov	r0, r4
 80a2440:	2206      	movs	r2, #6
 80a2442:	4942      	ldr	r1, [pc, #264]	; (80a254c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
 80a2444:	f7ff fed9 	bl	80a21fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
 80a2448:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a244a:	2800      	cmp	r0, #0
 80a244c:	d063      	beq.n	80a2516 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
 80a244e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80a2450:	f001 fd72 	bl	80a3f38 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
 80a2454:	2001      	movs	r0, #1
 80a2456:	e76b      	b.n	80a2330 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 80a2458:	b26d      	sxtb	r5, r5
 80a245a:	e78e      	b.n	80a237a <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 80a245c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 80a2460:	2101      	movs	r1, #1
 80a2462:	b280      	uxth	r0, r0
 80a2464:	f001 fe9a 	bl	80a419c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
 80a2468:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a246c:	2101      	movs	r1, #1
 80a246e:	b280      	uxth	r0, r0
 80a2470:	f001 fe94 	bl	80a419c <pinMode>
    SSD1306_DESELECT
 80a2474:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a2478:	2101      	movs	r1, #1
 80a247a:	b280      	uxth	r0, r0
 80a247c:	f001 fe9f 	bl	80a41be <digitalWrite>
    if(spi) { // Hardware SPI
 80a2480:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a2482:	b13d      	cbz	r5, 80a2494 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
 80a2484:	f1b8 0f00 	cmp.w	r8, #0
 80a2488:	f43f af7e 	beq.w	80a2388 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
 80a248c:	4628      	mov	r0, r5
 80a248e:	f000 fd1d 	bl	80a2ecc <_ZN8SPIClass5beginEv>
 80a2492:	e779      	b.n	80a2388 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
 80a2494:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a2498:	2101      	movs	r1, #1
 80a249a:	b280      	uxth	r0, r0
 80a249c:	f001 fe7e 	bl	80a419c <pinMode>
      pinMode(clkPin , OUTPUT);
 80a24a0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a24a4:	2101      	movs	r1, #1
 80a24a6:	b280      	uxth	r0, r0
 80a24a8:	f001 fe78 	bl	80a419c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
 80a24ac:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a24b0:	4629      	mov	r1, r5
 80a24b2:	b280      	uxth	r0, r0
 80a24b4:	f001 fe83 	bl	80a41be <digitalWrite>
 80a24b8:	e766      	b.n	80a2388 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
 80a24ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a24bc:	b118      	cbz	r0, 80a24c6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
 80a24be:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a24c2:	f000 fd2b 	bl	80a2f1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 80a24c6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a24ca:	2100      	movs	r1, #0
 80a24cc:	b280      	uxth	r0, r0
 80a24ce:	f001 fe76 	bl	80a41be <digitalWrite>
 80a24d2:	e780      	b.n	80a23d6 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
 80a24d4:	4a1e      	ldr	r2, [pc, #120]	; (80a2550 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
 80a24d6:	4293      	cmp	r3, r2
 80a24d8:	d10e      	bne.n	80a24f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
 80a24da:	491e      	ldr	r1, [pc, #120]	; (80a2554 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
 80a24dc:	2203      	movs	r2, #3
 80a24de:	4620      	mov	r0, r4
 80a24e0:	f7ff fe8b 	bl	80a21fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
 80a24e4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a24e8:	2b01      	cmp	r3, #1
 80a24ea:	bf0c      	ite	eq
 80a24ec:	219f      	moveq	r1, #159	; 0x9f
 80a24ee:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
 80a24f0:	4620      	mov	r0, r4
 80a24f2:	f7ff fe1b 	bl	80a212c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
 80a24f6:	e795      	b.n	80a2424 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
 80a24f8:	4a17      	ldr	r2, [pc, #92]	; (80a2558 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
 80a24fa:	4293      	cmp	r3, r2
 80a24fc:	d192      	bne.n	80a2424 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
 80a24fe:	4917      	ldr	r1, [pc, #92]	; (80a255c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
 80a2500:	2203      	movs	r2, #3
 80a2502:	4620      	mov	r0, r4
 80a2504:	f7ff fe79 	bl	80a21fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
 80a2508:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a250c:	2b01      	cmp	r3, #1
 80a250e:	bf0c      	ite	eq
 80a2510:	2110      	moveq	r1, #16
 80a2512:	21af      	movne	r1, #175	; 0xaf
 80a2514:	e7ec      	b.n	80a24f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
 80a2516:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a251a:	2101      	movs	r1, #1
 80a251c:	b280      	uxth	r0, r0
 80a251e:	f001 fe4e 	bl	80a41be <digitalWrite>
 80a2522:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a2524:	2800      	cmp	r0, #0
 80a2526:	d095      	beq.n	80a2454 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
 80a2528:	f000 fcde 	bl	80a2ee8 <_ZN8SPIClass14endTransactionEv>
 80a252c:	e792      	b.n	80a2454 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
 80a252e:	bf00      	nop
 80a2530:	080a77a8 	.word	0x080a77a8
 80a2534:	080a74e8 	.word	0x080a74e8
 80a2538:	080a79f0 	.word	0x080a79f0
 80a253c:	080a79f4 	.word	0x080a79f4
 80a2540:	080a79f8 	.word	0x080a79f8
 80a2544:	00200080 	.word	0x00200080
 80a2548:	080a7a02 	.word	0x080a7a02
 80a254c:	080a79fc 	.word	0x080a79fc
 80a2550:	00400080 	.word	0x00400080
 80a2554:	080a7a06 	.word	0x080a7a06
 80a2558:	00100060 	.word	0x00100060
 80a255c:	080a7a09 	.word	0x080a7a09

080a2560 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a2560:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 80a2562:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a2564:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 80a2568:	db3f      	blt.n	80a25ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a256a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80a256e:	4295      	cmp	r5, r2
 80a2570:	dd3b      	ble.n	80a25ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
    if(x < 0) { // Clip left
 80a2572:	2900      	cmp	r1, #0
      w += x;
 80a2574:	bfbe      	ittt	lt
 80a2576:	185b      	addlt	r3, r3, r1
      x  = 0;
 80a2578:	2100      	movlt	r1, #0
      w += x;
 80a257a:	b21b      	sxthlt	r3, r3
    if((x + w) > WIDTH) { // Clip right
 80a257c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80a2580:	185d      	adds	r5, r3, r1
 80a2582:	42b5      	cmp	r5, r6
      w = (WIDTH - x);
 80a2584:	bfc4      	itt	gt
 80a2586:	1a73      	subgt	r3, r6, r1
 80a2588:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
 80a258a:	2b00      	cmp	r3, #0
 80a258c:	dd2d      	ble.n	80a25ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
 80a258e:	10d5      	asrs	r5, r2, #3
 80a2590:	fb06 1105 	mla	r1, r6, r5, r1
 80a2594:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      switch(color) {
 80a2596:	2c01      	cmp	r4, #1
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
 80a2598:	4401      	add	r1, r0
               mask = 1 << (y & 7);
 80a259a:	f002 0007 	and.w	r0, r2, #7
 80a259e:	f04f 0201 	mov.w	r2, #1
 80a25a2:	fa02 f200 	lsl.w	r2, r2, r0
 80a25a6:	b2d2      	uxtb	r2, r2
      switch(color) {
 80a25a8:	d016      	beq.n	80a25d8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x78>
 80a25aa:	2c02      	cmp	r4, #2
 80a25ac:	d00b      	beq.n	80a25c6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x66>
 80a25ae:	b9e4      	cbnz	r4, 80a25ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
 80a25b0:	43d2      	mvns	r2, r2
 80a25b2:	440b      	add	r3, r1
 80a25b4:	b2d2      	uxtb	r2, r2
 80a25b6:	4299      	cmp	r1, r3
 80a25b8:	d017      	beq.n	80a25ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a25ba:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a25be:	4010      	ands	r0, r2
 80a25c0:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a25c4:	e7f7      	b.n	80a25b6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x56>
 80a25c6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
 80a25c8:	4299      	cmp	r1, r3
 80a25ca:	d00e      	beq.n	80a25ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a25cc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a25d0:	4050      	eors	r0, r2
 80a25d2:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a25d6:	e7f7      	b.n	80a25c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x68>
 80a25d8:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
 80a25da:	4299      	cmp	r1, r3
 80a25dc:	d005      	beq.n	80a25ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a25de:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a25e2:	4310      	orrs	r0, r2
 80a25e4:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a25e8:	e7f7      	b.n	80a25da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x7a>
}
 80a25ea:	bd70      	pop	{r4, r5, r6, pc}

080a25ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
 80a25ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 80a25ee:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
 80a25f0:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 80a25f4:	db76      	blt.n	80a26e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
 80a25f6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a25fa:	42a9      	cmp	r1, r5
 80a25fc:	da72      	bge.n	80a26e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
 80a25fe:	2a00      	cmp	r2, #0
      __h += __y;
 80a2600:	bfbe      	ittt	lt
 80a2602:	18d2      	addlt	r2, r2, r3
 80a2604:	b213      	sxthlt	r3, r2
      __y = 0;
 80a2606:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
 80a2608:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a260c:	18d7      	adds	r7, r2, r3
 80a260e:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
 80a2610:	bfc4      	itt	gt
 80a2612:	1aa3      	subgt	r3, r4, r2
 80a2614:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
 80a2616:	2b00      	cmp	r3, #0
 80a2618:	dd64      	ble.n	80a26e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 80a261a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
 80a261e:	fb05 1104 	mla	r1, r5, r4, r1
 80a2622:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
      if(mod) {
 80a2624:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
 80a2628:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 80a262a:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
 80a262e:	d024      	beq.n	80a267a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
 80a2630:	f1c2 0208 	rsb	r2, r2, #8
 80a2634:	b2d2      	uxtb	r2, r2
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a2636:	4293      	cmp	r3, r2
 80a2638:	bf38      	it	cc
 80a263a:	f04f 0cff 	movcc.w	ip, #255	; 0xff
        uint8_t mask = pgm_read_byte(&premask[mod]);
 80a263e:	4d2b      	ldr	r5, [pc, #172]	; (80a26ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a2640:	bf38      	it	cc
 80a2642:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
 80a2646:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a2648:	bf3c      	itt	cc
 80a264a:	fa4c fc0e 	asrcc.w	ip, ip, lr
 80a264e:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
 80a2652:	2e01      	cmp	r6, #1
 80a2654:	d007      	beq.n	80a2666 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
 80a2656:	2e02      	cmp	r6, #2
 80a2658:	d02e      	beq.n	80a26b8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
 80a265a:	b94e      	cbnz	r6, 80a2670 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
 80a265c:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a2660:	ea2c 0505 	bic.w	r5, ip, r5
 80a2664:	e003      	b.n	80a266e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
 80a2666:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a266a:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
 80a266e:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
 80a2670:	4293      	cmp	r3, r2
 80a2672:	d337      	bcc.n	80a26e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
 80a2674:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80a2678:	440c      	add	r4, r1
        h -= mod;
 80a267a:	1a9a      	subs	r2, r3, r2
 80a267c:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
 80a267e:	2a07      	cmp	r2, #7
 80a2680:	d90e      	bls.n	80a26a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
 80a2682:	2e02      	cmp	r6, #2
 80a2684:	d11d      	bne.n	80a26c2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
 80a2686:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
 80a2688:	7821      	ldrb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
 80a268a:	3b08      	subs	r3, #8
              *pBuf ^= 0xFF;  // Invert byte
 80a268c:	43c9      	mvns	r1, r1
 80a268e:	7021      	strb	r1, [r4, #0]
              pBuf  += WIDTH; // Advance pointer 8 rows
 80a2690:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
 80a2694:	b2db      	uxtb	r3, r3
            } while(h >= 8);
 80a2696:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
 80a2698:	440c      	add	r4, r1
            } while(h >= 8);
 80a269a:	d8f5      	bhi.n	80a2688 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
 80a269c:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
 80a26a0:	b302      	cbz	r2, 80a26e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a26a2:	4b13      	ldr	r3, [pc, #76]	; (80a26f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
 80a26a4:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a26a6:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
 80a26a8:	d019      	beq.n	80a26de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
 80a26aa:	2e02      	cmp	r6, #2
 80a26ac:	d01b      	beq.n	80a26e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
 80a26ae:	b9ce      	cbnz	r6, 80a26e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
 80a26b0:	7822      	ldrb	r2, [r4, #0]
 80a26b2:	ea22 0303 	bic.w	r3, r2, r3
 80a26b6:	e014      	b.n	80a26e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
 80a26b8:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a26bc:	ea85 050c 	eor.w	r5, r5, ip
 80a26c0:	e7d5      	b.n	80a266e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
 80a26c2:	2e00      	cmp	r6, #0
 80a26c4:	bf14      	ite	ne
 80a26c6:	25ff      	movne	r5, #255	; 0xff
 80a26c8:	2500      	moveq	r5, #0
 80a26ca:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
 80a26cc:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
 80a26ce:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
 80a26d0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
 80a26d4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
 80a26d6:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
 80a26d8:	440c      	add	r4, r1
            } while(h >= 8);
 80a26da:	d8f7      	bhi.n	80a26cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
 80a26dc:	e7de      	b.n	80a269c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
 80a26de:	7822      	ldrb	r2, [r4, #0]
 80a26e0:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
 80a26e2:	7023      	strb	r3, [r4, #0]
}
 80a26e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
 80a26e6:	7822      	ldrb	r2, [r4, #0]
 80a26e8:	4053      	eors	r3, r2
 80a26ea:	e7fa      	b.n	80a26e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
 80a26ec:	080a79e0 	.word	0x080a79e0
 80a26f0:	080a79e8 	.word	0x080a79e8

080a26f4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a26f4:	b430      	push	{r4, r5}
 80a26f6:	4614      	mov	r4, r2
  switch(rotation) {
 80a26f8:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a26fa:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
 80a26fe:	2a02      	cmp	r2, #2
 80a2700:	d00d      	beq.n	80a271e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
 80a2702:	2a03      	cmp	r2, #3
 80a2704:	d018      	beq.n	80a2738 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
 80a2706:	2a01      	cmp	r2, #1
 80a2708:	d111      	bne.n	80a272e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
 80a270a:	43e4      	mvns	r4, r4
 80a270c:	8902      	ldrh	r2, [r0, #8]
 80a270e:	4414      	add	r4, r2
 80a2710:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
 80a2712:	460a      	mov	r2, r1
 80a2714:	9502      	str	r5, [sp, #8]
 80a2716:	4621      	mov	r1, r4
}
 80a2718:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
 80a271a:	f7ff bf67 	b.w	80a25ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
 80a271e:	43e4      	mvns	r4, r4
 80a2720:	8942      	ldrh	r2, [r0, #10]
 80a2722:	4414      	add	r4, r2
    x -= (w-1);
 80a2724:	18ca      	adds	r2, r1, r3
 80a2726:	8901      	ldrh	r1, [r0, #8]
    y  = HEIGHT - y - 1;
 80a2728:	b224      	sxth	r4, r4
    x -= (w-1);
 80a272a:	1a89      	subs	r1, r1, r2
 80a272c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
 80a272e:	4622      	mov	r2, r4
 80a2730:	9502      	str	r5, [sp, #8]
}
 80a2732:	bc30      	pop	{r4, r5}
  else      drawFastHLineInternal(x, y, w, color);
 80a2734:	f7ff bf14 	b.w	80a2560 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
 80a2738:	18ca      	adds	r2, r1, r3
 80a273a:	8941      	ldrh	r1, [r0, #10]
 80a273c:	1a89      	subs	r1, r1, r2
 80a273e:	b209      	sxth	r1, r1
    break;
 80a2740:	e7e7      	b.n	80a2712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

080a2742 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a2742:	b430      	push	{r4, r5}
 80a2744:	4614      	mov	r4, r2
  switch(rotation) {
 80a2746:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a2748:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
 80a274c:	2a02      	cmp	r2, #2
 80a274e:	d00d      	beq.n	80a276c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
 80a2750:	2a03      	cmp	r2, #3
 80a2752:	d018      	beq.n	80a2786 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
 80a2754:	2a01      	cmp	r2, #1
 80a2756:	d111      	bne.n	80a277c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
 80a2758:	18e2      	adds	r2, r4, r3
 80a275a:	8904      	ldrh	r4, [r0, #8]
 80a275c:	1aa4      	subs	r4, r4, r2
 80a275e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
 80a2760:	460a      	mov	r2, r1
 80a2762:	9502      	str	r5, [sp, #8]
 80a2764:	4621      	mov	r1, r4
}
 80a2766:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
 80a2768:	f7ff befa 	b.w	80a2560 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
 80a276c:	43c9      	mvns	r1, r1
 80a276e:	8902      	ldrh	r2, [r0, #8]
 80a2770:	4411      	add	r1, r2
    y -= (h-1);
 80a2772:	18e2      	adds	r2, r4, r3
 80a2774:	8944      	ldrh	r4, [r0, #10]
    x = WIDTH  - x - 1;
 80a2776:	b209      	sxth	r1, r1
    y -= (h-1);
 80a2778:	1aa4      	subs	r4, r4, r2
 80a277a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
 80a277c:	4622      	mov	r2, r4
 80a277e:	9502      	str	r5, [sp, #8]
}
 80a2780:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
 80a2782:	f7ff bf33 	b.w	80a25ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 80a2786:	43c9      	mvns	r1, r1
 80a2788:	8942      	ldrh	r2, [r0, #10]
 80a278a:	4411      	add	r1, r2
 80a278c:	b209      	sxth	r1, r1
    break;
 80a278e:	e7e7      	b.n	80a2760 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

080a2790 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
 80a2790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2794:	4604      	mov	r4, r0
  TRANSACTION_START
 80a2796:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80a2798:	2800      	cmp	r0, #0
 80a279a:	d041      	beq.n	80a2820 <_ZN16Adafruit_SSD13067displayEv+0x90>
 80a279c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a279e:	f001 fbcb 	bl	80a3f38 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
 80a27a2:	2205      	movs	r2, #5
 80a27a4:	4620      	mov	r0, r4
 80a27a6:	4946      	ldr	r1, [pc, #280]	; (80a28c0 <_ZN16Adafruit_SSD13067displayEv+0x130>)
 80a27a8:	f7ff fd27 	bl	80a21fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
 80a27ac:	7a21      	ldrb	r1, [r4, #8]
 80a27ae:	4620      	mov	r0, r4
 80a27b0:	3901      	subs	r1, #1
 80a27b2:	b2c9      	uxtb	r1, r1
 80a27b4:	f7ff fcba 	bl	80a212c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  if(wire) { // I2C
 80a27b8:	e9d4 060a 	ldrd	r0, r6, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a27bc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80a27c0:	1ddd      	adds	r5, r3, #7
 80a27c2:	bf48      	it	mi
 80a27c4:	f103 050e 	addmi.w	r5, r3, #14
 80a27c8:	8923      	ldrh	r3, [r4, #8]
 80a27ca:	10ed      	asrs	r5, r5, #3
 80a27cc:	435d      	muls	r5, r3
 80a27ce:	b2ad      	uxth	r5, r5
  uint8_t *ptr   = buffer;
 80a27d0:	4435      	add	r5, r6
  if(wire) { // I2C
 80a27d2:	2800      	cmp	r0, #0
 80a27d4:	d03a      	beq.n	80a284c <_ZN16Adafruit_SSD13067displayEv+0xbc>
    wire->beginTransmission(i2caddr);
 80a27d6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a27da:	f001 fbbb 	bl	80a3f54 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
 80a27de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a27e0:	2140      	movs	r1, #64	; 0x40
 80a27e2:	6803      	ldr	r3, [r0, #0]
    uint8_t bytesOut = 1;
 80a27e4:	2701      	movs	r7, #1
    WIRE_WRITE((uint8_t)0x40);
 80a27e6:	689b      	ldr	r3, [r3, #8]
 80a27e8:	4798      	blx	r3
    while(count--) {
 80a27ea:	42ae      	cmp	r6, r5
 80a27ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a27ee:	d024      	beq.n	80a283a <_ZN16Adafruit_SSD13067displayEv+0xaa>
      if(bytesOut >= WIRE_MAX) {
 80a27f0:	2f1f      	cmp	r7, #31
 80a27f2:	d90c      	bls.n	80a280e <_ZN16Adafruit_SSD13067displayEv+0x7e>
        wire->endTransmission();
 80a27f4:	f001 fbb5 	bl	80a3f62 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 80a27f8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a27fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a27fe:	f001 fba9 	bl	80a3f54 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
 80a2802:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2804:	2140      	movs	r1, #64	; 0x40
 80a2806:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 80a2808:	2701      	movs	r7, #1
        WIRE_WRITE((uint8_t)0x40);
 80a280a:	689b      	ldr	r3, [r3, #8]
 80a280c:	4798      	blx	r3
      WIRE_WRITE(*ptr++);
 80a280e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2810:	f816 1b01 	ldrb.w	r1, [r6], #1
 80a2814:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 80a2816:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
 80a2818:	689b      	ldr	r3, [r3, #8]
 80a281a:	4798      	blx	r3
      bytesOut++;
 80a281c:	b2ff      	uxtb	r7, r7
    while(count--) {
 80a281e:	e7e4      	b.n	80a27ea <_ZN16Adafruit_SSD13067displayEv+0x5a>
  TRANSACTION_START
 80a2820:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a2822:	b118      	cbz	r0, 80a282c <_ZN16Adafruit_SSD13067displayEv+0x9c>
 80a2824:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a2828:	f000 fb78 	bl	80a2f1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 80a282c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a2830:	2100      	movs	r1, #0
 80a2832:	b280      	uxth	r0, r0
 80a2834:	f001 fcc3 	bl	80a41be <digitalWrite>
 80a2838:	e7b3      	b.n	80a27a2 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
 80a283a:	f001 fb92 	bl	80a3f62 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
 80a283e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a2840:	b378      	cbz	r0, 80a28a2 <_ZN16Adafruit_SSD13067displayEv+0x112>
 80a2842:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
 80a2844:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2848:	f001 bb76 	b.w	80a3f38 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
 80a284c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 80a2850:	2101      	movs	r1, #1
 80a2852:	b280      	uxth	r0, r0
 80a2854:	f001 fcb3 	bl	80a41be <digitalWrite>
    while(count--) SPIwrite(*ptr++);
 80a2858:	42ae      	cmp	r6, r5
 80a285a:	d0f0      	beq.n	80a283e <_ZN16Adafruit_SSD13067displayEv+0xae>
  if(spi) {
 80a285c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
 80a285e:	f816 9b01 	ldrb.w	r9, [r6], #1
  if(spi) {
 80a2862:	b118      	cbz	r0, 80a286c <_ZN16Adafruit_SSD13067displayEv+0xdc>
    (void)spi->transfer(d);
 80a2864:	4649      	mov	r1, r9
 80a2866:	f000 fbc5 	bl	80a2ff4 <_ZN8SPIClass8transferEh>
 80a286a:	e7f5      	b.n	80a2858 <_ZN16Adafruit_SSD13067displayEv+0xc8>
 80a286c:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a286e:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
 80a2872:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a2876:	ea09 0108 	and.w	r1, r9, r8
 80a287a:	b280      	uxth	r0, r0
 80a287c:	f001 fc9f 	bl	80a41be <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a2880:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a2884:	2101      	movs	r1, #1
 80a2886:	b280      	uxth	r0, r0
 80a2888:	f001 fc99 	bl	80a41be <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a288c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a2890:	2100      	movs	r1, #0
 80a2892:	b280      	uxth	r0, r0
 80a2894:	f001 fc93 	bl	80a41be <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a2898:	3f01      	subs	r7, #1
 80a289a:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80a289e:	d1e8      	bne.n	80a2872 <_ZN16Adafruit_SSD13067displayEv+0xe2>
 80a28a0:	e7da      	b.n	80a2858 <_ZN16Adafruit_SSD13067displayEv+0xc8>
  TRANSACTION_END
 80a28a2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a28a6:	2101      	movs	r1, #1
 80a28a8:	b280      	uxth	r0, r0
 80a28aa:	f001 fc88 	bl	80a41be <digitalWrite>
 80a28ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a28b0:	b118      	cbz	r0, 80a28ba <_ZN16Adafruit_SSD13067displayEv+0x12a>
}
 80a28b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
 80a28b6:	f000 bb17 	b.w	80a2ee8 <_ZN8SPIClass14endTransactionEv>
}
 80a28ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a28be:	bf00      	nop
 80a28c0:	080a7a0c 	.word	0x080a7a0c

080a28c4 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
 80a28c4:	f001 b872 	b.w	80a39ac <delay>

080a28c8 <_Z11BlynkMillisv>:
 80a28c8:	f000 b868 	b.w	80a299c <HAL_Timer_Get_Milli_Seconds>

080a28cc <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
 80a28cc:	4770      	bx	lr

080a28ce <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
 80a28ce:	4770      	bx	lr

080a28d0 <BlynkNoOpCbk>:
{}
 80a28d0:	4770      	bx	lr
	...

080a28d4 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
 80a28d4:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
 80a28d6:	bf5a      	itte	pl
 80a28d8:	4b02      	ldrpl	r3, [pc, #8]	; (80a28e4 <GetReadHandler+0x10>)
 80a28da:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
 80a28de:	2000      	movmi	r0, #0
#endif
}
 80a28e0:	4770      	bx	lr
 80a28e2:	bf00      	nop
 80a28e4:	080a7a14 	.word	0x080a7a14

080a28e8 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
 80a28e8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
 80a28ea:	bf5a      	itte	pl
 80a28ec:	4b02      	ldrpl	r3, [pc, #8]	; (80a28f8 <GetWriteHandler+0x10>)
 80a28ee:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
 80a28f2:	2000      	movmi	r0, #0
#endif
}
 80a28f4:	4770      	bx	lr
 80a28f6:	bf00      	nop
 80a28f8:	080a7c14 	.word	0x080a7c14

080a28fc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a28fc:	b508      	push	{r3, lr}
 80a28fe:	4b02      	ldr	r3, [pc, #8]	; (80a2908 <HAL_Validate_Pin_Function+0xc>)
 80a2900:	681b      	ldr	r3, [r3, #0]
 80a2902:	685b      	ldr	r3, [r3, #4]
 80a2904:	9301      	str	r3, [sp, #4]
 80a2906:	bd08      	pop	{r3, pc}
 80a2908:	080601b0 	.word	0x080601b0

080a290c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a290c:	b508      	push	{r3, lr}
 80a290e:	4b02      	ldr	r3, [pc, #8]	; (80a2918 <HAL_Pin_Mode+0xc>)
 80a2910:	681b      	ldr	r3, [r3, #0]
 80a2912:	689b      	ldr	r3, [r3, #8]
 80a2914:	9301      	str	r3, [sp, #4]
 80a2916:	bd08      	pop	{r3, pc}
 80a2918:	080601b0 	.word	0x080601b0

080a291c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a291c:	b508      	push	{r3, lr}
 80a291e:	4b02      	ldr	r3, [pc, #8]	; (80a2928 <HAL_Get_Pin_Mode+0xc>)
 80a2920:	681b      	ldr	r3, [r3, #0]
 80a2922:	68db      	ldr	r3, [r3, #12]
 80a2924:	9301      	str	r3, [sp, #4]
 80a2926:	bd08      	pop	{r3, pc}
 80a2928:	080601b0 	.word	0x080601b0

080a292c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a292c:	b508      	push	{r3, lr}
 80a292e:	4b02      	ldr	r3, [pc, #8]	; (80a2938 <HAL_GPIO_Write+0xc>)
 80a2930:	681b      	ldr	r3, [r3, #0]
 80a2932:	691b      	ldr	r3, [r3, #16]
 80a2934:	9301      	str	r3, [sp, #4]
 80a2936:	bd08      	pop	{r3, pc}
 80a2938:	080601b0 	.word	0x080601b0

080a293c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a293c:	b508      	push	{r3, lr}
 80a293e:	4b02      	ldr	r3, [pc, #8]	; (80a2948 <HAL_GPIO_Read+0xc>)
 80a2940:	681b      	ldr	r3, [r3, #0]
 80a2942:	695b      	ldr	r3, [r3, #20]
 80a2944:	9301      	str	r3, [sp, #4]
 80a2946:	bd08      	pop	{r3, pc}
 80a2948:	080601b0 	.word	0x080601b0

080a294c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a294c:	b508      	push	{r3, lr}
 80a294e:	4b02      	ldr	r3, [pc, #8]	; (80a2958 <HAL_DAC_Write+0xc>)
 80a2950:	681b      	ldr	r3, [r3, #0]
 80a2952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2954:	9301      	str	r3, [sp, #4]
 80a2956:	bd08      	pop	{r3, pc}
 80a2958:	080601b0 	.word	0x080601b0

080a295c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a295c:	b508      	push	{r3, lr}
 80a295e:	4b02      	ldr	r3, [pc, #8]	; (80a2968 <hal_adc_read+0xc>)
 80a2960:	681b      	ldr	r3, [r3, #0]
 80a2962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2964:	9301      	str	r3, [sp, #4]
 80a2966:	bd08      	pop	{r3, pc}
 80a2968:	080601b0 	.word	0x080601b0

080a296c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 80a296c:	b508      	push	{r3, lr}
 80a296e:	4b02      	ldr	r3, [pc, #8]	; (80a2978 <hal_pwm_write_ext+0xc>)
 80a2970:	681b      	ldr	r3, [r3, #0]
 80a2972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a2974:	9301      	str	r3, [sp, #4]
 80a2976:	bd08      	pop	{r3, pc}
 80a2978:	080601b0 	.word	0x080601b0

080a297c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a297c:	b508      	push	{r3, lr}
 80a297e:	4b02      	ldr	r3, [pc, #8]	; (80a2988 <HAL_RNG_GetRandomNumber+0xc>)
 80a2980:	681b      	ldr	r3, [r3, #0]
 80a2982:	685b      	ldr	r3, [r3, #4]
 80a2984:	9301      	str	r3, [sp, #4]
 80a2986:	bd08      	pop	{r3, pc}
 80a2988:	0806019c 	.word	0x0806019c

080a298c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a298c:	b508      	push	{r3, lr}
 80a298e:	4b02      	ldr	r3, [pc, #8]	; (80a2998 <HAL_Delay_Microseconds+0xc>)
 80a2990:	681b      	ldr	r3, [r3, #0]
 80a2992:	68db      	ldr	r3, [r3, #12]
 80a2994:	9301      	str	r3, [sp, #4]
 80a2996:	bd08      	pop	{r3, pc}
 80a2998:	0806019c 	.word	0x0806019c

080a299c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a299c:	b508      	push	{r3, lr}
 80a299e:	4b02      	ldr	r3, [pc, #8]	; (80a29a8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a29a0:	681b      	ldr	r3, [r3, #0]
 80a29a2:	695b      	ldr	r3, [r3, #20]
 80a29a4:	9301      	str	r3, [sp, #4]
 80a29a6:	bd08      	pop	{r3, pc}
 80a29a8:	0806019c 	.word	0x0806019c

080a29ac <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a29ac:	b508      	push	{r3, lr}
 80a29ae:	4b02      	ldr	r3, [pc, #8]	; (80a29b8 <os_mutex_create+0xc>)
 80a29b0:	681b      	ldr	r3, [r3, #0]
 80a29b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a29b4:	9301      	str	r3, [sp, #4]
 80a29b6:	bd08      	pop	{r3, pc}
 80a29b8:	080601d0 	.word	0x080601d0

080a29bc <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
 80a29bc:	b508      	push	{r3, lr}
 80a29be:	4b02      	ldr	r3, [pc, #8]	; (80a29c8 <os_mutex_destroy+0xc>)
 80a29c0:	681b      	ldr	r3, [r3, #0]
 80a29c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a29c4:	9301      	str	r3, [sp, #4]
 80a29c6:	bd08      	pop	{r3, pc}
 80a29c8:	080601d0 	.word	0x080601d0

080a29cc <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a29cc:	b508      	push	{r3, lr}
 80a29ce:	4b02      	ldr	r3, [pc, #8]	; (80a29d8 <os_mutex_lock+0xc>)
 80a29d0:	681b      	ldr	r3, [r3, #0]
 80a29d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a29d4:	9301      	str	r3, [sp, #4]
 80a29d6:	bd08      	pop	{r3, pc}
 80a29d8:	080601d0 	.word	0x080601d0

080a29dc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a29dc:	b508      	push	{r3, lr}
 80a29de:	4b02      	ldr	r3, [pc, #8]	; (80a29e8 <os_mutex_unlock+0xc>)
 80a29e0:	681b      	ldr	r3, [r3, #0]
 80a29e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a29e4:	9301      	str	r3, [sp, #4]
 80a29e6:	bd08      	pop	{r3, pc}
 80a29e8:	080601d0 	.word	0x080601d0

080a29ec <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a29ec:	b508      	push	{r3, lr}
 80a29ee:	4b02      	ldr	r3, [pc, #8]	; (80a29f8 <os_mutex_recursive_create+0xc>)
 80a29f0:	681b      	ldr	r3, [r3, #0]
 80a29f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a29f4:	9301      	str	r3, [sp, #4]
 80a29f6:	bd08      	pop	{r3, pc}
 80a29f8:	080601d0 	.word	0x080601d0

080a29fc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a29fc:	b508      	push	{r3, lr}
 80a29fe:	4b02      	ldr	r3, [pc, #8]	; (80a2a08 <os_mutex_recursive_destroy+0xc>)
 80a2a00:	681b      	ldr	r3, [r3, #0]
 80a2a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2a04:	9301      	str	r3, [sp, #4]
 80a2a06:	bd08      	pop	{r3, pc}
 80a2a08:	080601d0 	.word	0x080601d0

080a2a0c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a2a0c:	b508      	push	{r3, lr}
 80a2a0e:	4b02      	ldr	r3, [pc, #8]	; (80a2a18 <os_mutex_recursive_lock+0xc>)
 80a2a10:	681b      	ldr	r3, [r3, #0]
 80a2a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2a14:	9301      	str	r3, [sp, #4]
 80a2a16:	bd08      	pop	{r3, pc}
 80a2a18:	080601d0 	.word	0x080601d0

080a2a1c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a2a1c:	b508      	push	{r3, lr}
 80a2a1e:	4b02      	ldr	r3, [pc, #8]	; (80a2a28 <os_mutex_recursive_unlock+0xc>)
 80a2a20:	681b      	ldr	r3, [r3, #0]
 80a2a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2a24:	9301      	str	r3, [sp, #4]
 80a2a26:	bd08      	pop	{r3, pc}
 80a2a28:	080601d0 	.word	0x080601d0

080a2a2c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a2a2c:	b508      	push	{r3, lr}
 80a2a2e:	4b02      	ldr	r3, [pc, #8]	; (80a2a38 <hal_usart_init+0xc>)
 80a2a30:	681b      	ldr	r3, [r3, #0]
 80a2a32:	699b      	ldr	r3, [r3, #24]
 80a2a34:	9301      	str	r3, [sp, #4]
 80a2a36:	bd08      	pop	{r3, pc}
 80a2a38:	080601c4 	.word	0x080601c4

080a2a3c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a2a3c:	b508      	push	{r3, lr}
 80a2a3e:	4b02      	ldr	r3, [pc, #8]	; (80a2a48 <hal_usart_write+0xc>)
 80a2a40:	681b      	ldr	r3, [r3, #0]
 80a2a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2a44:	9301      	str	r3, [sp, #4]
 80a2a46:	bd08      	pop	{r3, pc}
 80a2a48:	080601c4 	.word	0x080601c4

080a2a4c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a2a4c:	b508      	push	{r3, lr}
 80a2a4e:	4b02      	ldr	r3, [pc, #8]	; (80a2a58 <hal_usart_available+0xc>)
 80a2a50:	681b      	ldr	r3, [r3, #0]
 80a2a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2a54:	9301      	str	r3, [sp, #4]
 80a2a56:	bd08      	pop	{r3, pc}
 80a2a58:	080601c4 	.word	0x080601c4

080a2a5c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a2a5c:	b508      	push	{r3, lr}
 80a2a5e:	4b02      	ldr	r3, [pc, #8]	; (80a2a68 <hal_usart_read+0xc>)
 80a2a60:	681b      	ldr	r3, [r3, #0]
 80a2a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2a64:	9301      	str	r3, [sp, #4]
 80a2a66:	bd08      	pop	{r3, pc}
 80a2a68:	080601c4 	.word	0x080601c4

080a2a6c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a2a6c:	b508      	push	{r3, lr}
 80a2a6e:	4b02      	ldr	r3, [pc, #8]	; (80a2a78 <hal_usart_peek+0xc>)
 80a2a70:	681b      	ldr	r3, [r3, #0]
 80a2a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2a74:	9301      	str	r3, [sp, #4]
 80a2a76:	bd08      	pop	{r3, pc}
 80a2a78:	080601c4 	.word	0x080601c4

080a2a7c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a2a7c:	b508      	push	{r3, lr}
 80a2a7e:	4b02      	ldr	r3, [pc, #8]	; (80a2a88 <hal_usart_flush+0xc>)
 80a2a80:	681b      	ldr	r3, [r3, #0]
 80a2a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2a84:	9301      	str	r3, [sp, #4]
 80a2a86:	bd08      	pop	{r3, pc}
 80a2a88:	080601c4 	.word	0x080601c4

080a2a8c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a2a8c:	b508      	push	{r3, lr}
 80a2a8e:	4b02      	ldr	r3, [pc, #8]	; (80a2a98 <hal_usart_is_enabled+0xc>)
 80a2a90:	681b      	ldr	r3, [r3, #0]
 80a2a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2a94:	9301      	str	r3, [sp, #4]
 80a2a96:	bd08      	pop	{r3, pc}
 80a2a98:	080601c4 	.word	0x080601c4

080a2a9c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a2a9c:	b508      	push	{r3, lr}
 80a2a9e:	4b02      	ldr	r3, [pc, #8]	; (80a2aa8 <hal_usart_available_data_for_write+0xc>)
 80a2aa0:	681b      	ldr	r3, [r3, #0]
 80a2aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2aa4:	9301      	str	r3, [sp, #4]
 80a2aa6:	bd08      	pop	{r3, pc}
 80a2aa8:	080601c4 	.word	0x080601c4

080a2aac <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a2aac:	b508      	push	{r3, lr}
 80a2aae:	4b02      	ldr	r3, [pc, #8]	; (80a2ab8 <hal_i2c_set_speed+0xc>)
 80a2ab0:	681b      	ldr	r3, [r3, #0]
 80a2ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2ab4:	9301      	str	r3, [sp, #4]
 80a2ab6:	bd08      	pop	{r3, pc}
 80a2ab8:	080601ac 	.word	0x080601ac

080a2abc <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a2abc:	b508      	push	{r3, lr}
 80a2abe:	4b02      	ldr	r3, [pc, #8]	; (80a2ac8 <hal_i2c_begin+0xc>)
 80a2ac0:	681b      	ldr	r3, [r3, #0]
 80a2ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2ac4:	9301      	str	r3, [sp, #4]
 80a2ac6:	bd08      	pop	{r3, pc}
 80a2ac8:	080601ac 	.word	0x080601ac

080a2acc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a2acc:	b508      	push	{r3, lr}
 80a2ace:	4b02      	ldr	r3, [pc, #8]	; (80a2ad8 <hal_i2c_begin_transmission+0xc>)
 80a2ad0:	681b      	ldr	r3, [r3, #0]
 80a2ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2ad4:	9301      	str	r3, [sp, #4]
 80a2ad6:	bd08      	pop	{r3, pc}
 80a2ad8:	080601ac 	.word	0x080601ac

080a2adc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a2adc:	b508      	push	{r3, lr}
 80a2ade:	4b02      	ldr	r3, [pc, #8]	; (80a2ae8 <hal_i2c_end_transmission+0xc>)
 80a2ae0:	681b      	ldr	r3, [r3, #0]
 80a2ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2ae4:	9301      	str	r3, [sp, #4]
 80a2ae6:	bd08      	pop	{r3, pc}
 80a2ae8:	080601ac 	.word	0x080601ac

080a2aec <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a2aec:	b508      	push	{r3, lr}
 80a2aee:	4b02      	ldr	r3, [pc, #8]	; (80a2af8 <hal_i2c_write+0xc>)
 80a2af0:	681b      	ldr	r3, [r3, #0]
 80a2af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2af4:	9301      	str	r3, [sp, #4]
 80a2af6:	bd08      	pop	{r3, pc}
 80a2af8:	080601ac 	.word	0x080601ac

080a2afc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a2afc:	b508      	push	{r3, lr}
 80a2afe:	4b02      	ldr	r3, [pc, #8]	; (80a2b08 <hal_i2c_available+0xc>)
 80a2b00:	681b      	ldr	r3, [r3, #0]
 80a2b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2b04:	9301      	str	r3, [sp, #4]
 80a2b06:	bd08      	pop	{r3, pc}
 80a2b08:	080601ac 	.word	0x080601ac

080a2b0c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a2b0c:	b508      	push	{r3, lr}
 80a2b0e:	4b02      	ldr	r3, [pc, #8]	; (80a2b18 <hal_i2c_read+0xc>)
 80a2b10:	681b      	ldr	r3, [r3, #0]
 80a2b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2b14:	9301      	str	r3, [sp, #4]
 80a2b16:	bd08      	pop	{r3, pc}
 80a2b18:	080601ac 	.word	0x080601ac

080a2b1c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a2b1c:	b508      	push	{r3, lr}
 80a2b1e:	4b02      	ldr	r3, [pc, #8]	; (80a2b28 <hal_i2c_peek+0xc>)
 80a2b20:	681b      	ldr	r3, [r3, #0]
 80a2b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2b24:	9301      	str	r3, [sp, #4]
 80a2b26:	bd08      	pop	{r3, pc}
 80a2b28:	080601ac 	.word	0x080601ac

080a2b2c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a2b2c:	b508      	push	{r3, lr}
 80a2b2e:	4b02      	ldr	r3, [pc, #8]	; (80a2b38 <hal_i2c_flush+0xc>)
 80a2b30:	681b      	ldr	r3, [r3, #0]
 80a2b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2b34:	9301      	str	r3, [sp, #4]
 80a2b36:	bd08      	pop	{r3, pc}
 80a2b38:	080601ac 	.word	0x080601ac

080a2b3c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a2b3c:	b508      	push	{r3, lr}
 80a2b3e:	4b02      	ldr	r3, [pc, #8]	; (80a2b48 <hal_i2c_is_enabled+0xc>)
 80a2b40:	681b      	ldr	r3, [r3, #0]
 80a2b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2b44:	9301      	str	r3, [sp, #4]
 80a2b46:	bd08      	pop	{r3, pc}
 80a2b48:	080601ac 	.word	0x080601ac

080a2b4c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a2b4c:	b508      	push	{r3, lr}
 80a2b4e:	4b03      	ldr	r3, [pc, #12]	; (80a2b5c <hal_i2c_init+0x10>)
 80a2b50:	681b      	ldr	r3, [r3, #0]
 80a2b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2b56:	9301      	str	r3, [sp, #4]
 80a2b58:	bd08      	pop	{r3, pc}
 80a2b5a:	0000      	.short	0x0000
 80a2b5c:	080601ac 	.word	0x080601ac

080a2b60 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a2b60:	b508      	push	{r3, lr}
 80a2b62:	4b02      	ldr	r3, [pc, #8]	; (80a2b6c <socket_active_status+0xc>)
 80a2b64:	681b      	ldr	r3, [r3, #0]
 80a2b66:	681b      	ldr	r3, [r3, #0]
 80a2b68:	9301      	str	r3, [sp, #4]
 80a2b6a:	bd08      	pop	{r3, pc}
 80a2b6c:	080601bc 	.word	0x080601bc

080a2b70 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2b70:	b508      	push	{r3, lr}
 80a2b72:	4b02      	ldr	r3, [pc, #8]	; (80a2b7c <socket_handle_valid+0xc>)
 80a2b74:	681b      	ldr	r3, [r3, #0]
 80a2b76:	685b      	ldr	r3, [r3, #4]
 80a2b78:	9301      	str	r3, [sp, #4]
 80a2b7a:	bd08      	pop	{r3, pc}
 80a2b7c:	080601bc 	.word	0x080601bc

080a2b80 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2b80:	b508      	push	{r3, lr}
 80a2b82:	4b02      	ldr	r3, [pc, #8]	; (80a2b8c <socket_create+0xc>)
 80a2b84:	681b      	ldr	r3, [r3, #0]
 80a2b86:	689b      	ldr	r3, [r3, #8]
 80a2b88:	9301      	str	r3, [sp, #4]
 80a2b8a:	bd08      	pop	{r3, pc}
 80a2b8c:	080601bc 	.word	0x080601bc

080a2b90 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a2b90:	b508      	push	{r3, lr}
 80a2b92:	4b02      	ldr	r3, [pc, #8]	; (80a2b9c <socket_connect+0xc>)
 80a2b94:	681b      	ldr	r3, [r3, #0]
 80a2b96:	68db      	ldr	r3, [r3, #12]
 80a2b98:	9301      	str	r3, [sp, #4]
 80a2b9a:	bd08      	pop	{r3, pc}
 80a2b9c:	080601bc 	.word	0x080601bc

080a2ba0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a2ba0:	b508      	push	{r3, lr}
 80a2ba2:	4b02      	ldr	r3, [pc, #8]	; (80a2bac <socket_receive+0xc>)
 80a2ba4:	681b      	ldr	r3, [r3, #0]
 80a2ba6:	691b      	ldr	r3, [r3, #16]
 80a2ba8:	9301      	str	r3, [sp, #4]
 80a2baa:	bd08      	pop	{r3, pc}
 80a2bac:	080601bc 	.word	0x080601bc

080a2bb0 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a2bb0:	b508      	push	{r3, lr}
 80a2bb2:	4b02      	ldr	r3, [pc, #8]	; (80a2bbc <socket_close+0xc>)
 80a2bb4:	681b      	ldr	r3, [r3, #0]
 80a2bb6:	6a1b      	ldr	r3, [r3, #32]
 80a2bb8:	9301      	str	r3, [sp, #4]
 80a2bba:	bd08      	pop	{r3, pc}
 80a2bbc:	080601bc 	.word	0x080601bc

080a2bc0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2bc0:	b508      	push	{r3, lr}
 80a2bc2:	4b02      	ldr	r3, [pc, #8]	; (80a2bcc <socket_handle_invalid+0xc>)
 80a2bc4:	681b      	ldr	r3, [r3, #0]
 80a2bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2bc8:	9301      	str	r3, [sp, #4]
 80a2bca:	bd08      	pop	{r3, pc}
 80a2bcc:	080601bc 	.word	0x080601bc

080a2bd0 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a2bd0:	b508      	push	{r3, lr}
 80a2bd2:	4b02      	ldr	r3, [pc, #8]	; (80a2bdc <socket_send_ex+0xc>)
 80a2bd4:	681b      	ldr	r3, [r3, #0]
 80a2bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2bd8:	9301      	str	r3, [sp, #4]
 80a2bda:	bd08      	pop	{r3, pc}
 80a2bdc:	080601bc 	.word	0x080601bc

080a2be0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a2be0:	b508      	push	{r3, lr}
 80a2be2:	4b02      	ldr	r3, [pc, #8]	; (80a2bec <hal_spi_begin+0xc>)
 80a2be4:	681b      	ldr	r3, [r3, #0]
 80a2be6:	681b      	ldr	r3, [r3, #0]
 80a2be8:	9301      	str	r3, [sp, #4]
 80a2bea:	bd08      	pop	{r3, pc}
 80a2bec:	080601b4 	.word	0x080601b4

080a2bf0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a2bf0:	b508      	push	{r3, lr}
 80a2bf2:	4b02      	ldr	r3, [pc, #8]	; (80a2bfc <hal_spi_transfer+0xc>)
 80a2bf4:	681b      	ldr	r3, [r3, #0]
 80a2bf6:	695b      	ldr	r3, [r3, #20]
 80a2bf8:	9301      	str	r3, [sp, #4]
 80a2bfa:	bd08      	pop	{r3, pc}
 80a2bfc:	080601b4 	.word	0x080601b4

080a2c00 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a2c00:	b508      	push	{r3, lr}
 80a2c02:	4b02      	ldr	r3, [pc, #8]	; (80a2c0c <hal_spi_init+0xc>)
 80a2c04:	681b      	ldr	r3, [r3, #0]
 80a2c06:	69db      	ldr	r3, [r3, #28]
 80a2c08:	9301      	str	r3, [sp, #4]
 80a2c0a:	bd08      	pop	{r3, pc}
 80a2c0c:	080601b4 	.word	0x080601b4

080a2c10 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a2c10:	b508      	push	{r3, lr}
 80a2c12:	4b02      	ldr	r3, [pc, #8]	; (80a2c1c <hal_spi_is_enabled+0xc>)
 80a2c14:	681b      	ldr	r3, [r3, #0]
 80a2c16:	6a1b      	ldr	r3, [r3, #32]
 80a2c18:	9301      	str	r3, [sp, #4]
 80a2c1a:	bd08      	pop	{r3, pc}
 80a2c1c:	080601b4 	.word	0x080601b4

080a2c20 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a2c20:	b508      	push	{r3, lr}
 80a2c22:	4b02      	ldr	r3, [pc, #8]	; (80a2c2c <hal_spi_info+0xc>)
 80a2c24:	681b      	ldr	r3, [r3, #0]
 80a2c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2c28:	9301      	str	r3, [sp, #4]
 80a2c2a:	bd08      	pop	{r3, pc}
 80a2c2c:	080601b4 	.word	0x080601b4

080a2c30 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a2c30:	b508      	push	{r3, lr}
 80a2c32:	4b02      	ldr	r3, [pc, #8]	; (80a2c3c <hal_spi_set_settings+0xc>)
 80a2c34:	681b      	ldr	r3, [r3, #0]
 80a2c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2c38:	9301      	str	r3, [sp, #4]
 80a2c3a:	bd08      	pop	{r3, pc}
 80a2c3c:	080601b4 	.word	0x080601b4

080a2c40 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2c40:	b508      	push	{r3, lr}
 80a2c42:	4b02      	ldr	r3, [pc, #8]	; (80a2c4c <HAL_USB_USART_Init+0xc>)
 80a2c44:	681b      	ldr	r3, [r3, #0]
 80a2c46:	681b      	ldr	r3, [r3, #0]
 80a2c48:	9301      	str	r3, [sp, #4]
 80a2c4a:	bd08      	pop	{r3, pc}
 80a2c4c:	080601d8 	.word	0x080601d8

080a2c50 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2c50:	b508      	push	{r3, lr}
 80a2c52:	4b02      	ldr	r3, [pc, #8]	; (80a2c5c <HAL_USB_USART_Begin+0xc>)
 80a2c54:	681b      	ldr	r3, [r3, #0]
 80a2c56:	685b      	ldr	r3, [r3, #4]
 80a2c58:	9301      	str	r3, [sp, #4]
 80a2c5a:	bd08      	pop	{r3, pc}
 80a2c5c:	080601d8 	.word	0x080601d8

080a2c60 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2c60:	b508      	push	{r3, lr}
 80a2c62:	4b02      	ldr	r3, [pc, #8]	; (80a2c6c <HAL_USB_USART_Available_Data+0xc>)
 80a2c64:	681b      	ldr	r3, [r3, #0]
 80a2c66:	691b      	ldr	r3, [r3, #16]
 80a2c68:	9301      	str	r3, [sp, #4]
 80a2c6a:	bd08      	pop	{r3, pc}
 80a2c6c:	080601d8 	.word	0x080601d8

080a2c70 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2c70:	b508      	push	{r3, lr}
 80a2c72:	4b02      	ldr	r3, [pc, #8]	; (80a2c7c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2c74:	681b      	ldr	r3, [r3, #0]
 80a2c76:	695b      	ldr	r3, [r3, #20]
 80a2c78:	9301      	str	r3, [sp, #4]
 80a2c7a:	bd08      	pop	{r3, pc}
 80a2c7c:	080601d8 	.word	0x080601d8

080a2c80 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2c80:	b508      	push	{r3, lr}
 80a2c82:	4b02      	ldr	r3, [pc, #8]	; (80a2c8c <HAL_USB_USART_Receive_Data+0xc>)
 80a2c84:	681b      	ldr	r3, [r3, #0]
 80a2c86:	699b      	ldr	r3, [r3, #24]
 80a2c88:	9301      	str	r3, [sp, #4]
 80a2c8a:	bd08      	pop	{r3, pc}
 80a2c8c:	080601d8 	.word	0x080601d8

080a2c90 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2c90:	b508      	push	{r3, lr}
 80a2c92:	4b02      	ldr	r3, [pc, #8]	; (80a2c9c <HAL_USB_USART_Send_Data+0xc>)
 80a2c94:	681b      	ldr	r3, [r3, #0]
 80a2c96:	69db      	ldr	r3, [r3, #28]
 80a2c98:	9301      	str	r3, [sp, #4]
 80a2c9a:	bd08      	pop	{r3, pc}
 80a2c9c:	080601d8 	.word	0x080601d8

080a2ca0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2ca0:	b508      	push	{r3, lr}
 80a2ca2:	4b02      	ldr	r3, [pc, #8]	; (80a2cac <HAL_USB_USART_Flush_Data+0xc>)
 80a2ca4:	681b      	ldr	r3, [r3, #0]
 80a2ca6:	6a1b      	ldr	r3, [r3, #32]
 80a2ca8:	9301      	str	r3, [sp, #4]
 80a2caa:	bd08      	pop	{r3, pc}
 80a2cac:	080601d8 	.word	0x080601d8

080a2cb0 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a2cb0:	b508      	push	{r3, lr}
 80a2cb2:	4b02      	ldr	r3, [pc, #8]	; (80a2cbc <HAL_NET_SetNetWatchDog+0xc>)
 80a2cb4:	681b      	ldr	r3, [r3, #0]
 80a2cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2cb8:	9301      	str	r3, [sp, #4]
 80a2cba:	bd08      	pop	{r3, pc}
 80a2cbc:	080601c0 	.word	0x080601c0

080a2cc0 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2cc0:	b508      	push	{r3, lr}
 80a2cc2:	4b02      	ldr	r3, [pc, #8]	; (80a2ccc <inet_gethostbyname+0xc>)
 80a2cc4:	681b      	ldr	r3, [r3, #0]
 80a2cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2cc8:	9301      	str	r3, [sp, #4]
 80a2cca:	bd08      	pop	{r3, pc}
 80a2ccc:	080601c0 	.word	0x080601c0

080a2cd0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a2cd0:	b508      	push	{r3, lr}
 80a2cd2:	4b02      	ldr	r3, [pc, #8]	; (80a2cdc <panic_+0xc>)
 80a2cd4:	681b      	ldr	r3, [r3, #0]
 80a2cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2cd8:	9301      	str	r3, [sp, #4]
 80a2cda:	bd08      	pop	{r3, pc}
 80a2cdc:	080201a8 	.word	0x080201a8

080a2ce0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a2ce0:	b508      	push	{r3, lr}
 80a2ce2:	4b02      	ldr	r3, [pc, #8]	; (80a2cec <log_message+0xc>)
 80a2ce4:	681b      	ldr	r3, [r3, #0]
 80a2ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a2ce8:	9301      	str	r3, [sp, #4]
 80a2cea:	bd08      	pop	{r3, pc}
 80a2cec:	080201a8 	.word	0x080201a8

080a2cf0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2cf0:	b508      	push	{r3, lr}
 80a2cf2:	4b02      	ldr	r3, [pc, #8]	; (80a2cfc <set_system_mode+0xc>)
 80a2cf4:	681b      	ldr	r3, [r3, #0]
 80a2cf6:	685b      	ldr	r3, [r3, #4]
 80a2cf8:	9301      	str	r3, [sp, #4]
 80a2cfa:	bd08      	pop	{r3, pc}
 80a2cfc:	080601a4 	.word	0x080601a4

080a2d00 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2d00:	b508      	push	{r3, lr}
 80a2d02:	4b02      	ldr	r3, [pc, #8]	; (80a2d0c <system_delay_ms+0xc>)
 80a2d04:	681b      	ldr	r3, [r3, #0]
 80a2d06:	695b      	ldr	r3, [r3, #20]
 80a2d08:	9301      	str	r3, [sp, #4]
 80a2d0a:	bd08      	pop	{r3, pc}
 80a2d0c:	080601a4 	.word	0x080601a4

080a2d10 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a2d10:	b508      	push	{r3, lr}
 80a2d12:	4b02      	ldr	r3, [pc, #8]	; (80a2d1c <system_thread_set_state+0xc>)
 80a2d14:	681b      	ldr	r3, [r3, #0]
 80a2d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2d18:	9301      	str	r3, [sp, #4]
 80a2d1a:	bd08      	pop	{r3, pc}
 80a2d1c:	080601a4 	.word	0x080601a4

080a2d20 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2d20:	b508      	push	{r3, lr}
 80a2d22:	4b03      	ldr	r3, [pc, #12]	; (80a2d30 <system_ctrl_set_app_request_handler+0x10>)
 80a2d24:	681b      	ldr	r3, [r3, #0]
 80a2d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2d2a:	9301      	str	r3, [sp, #4]
 80a2d2c:	bd08      	pop	{r3, pc}
 80a2d2e:	0000      	.short	0x0000
 80a2d30:	080601a4 	.word	0x080601a4

080a2d34 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2d34:	b508      	push	{r3, lr}
 80a2d36:	4b03      	ldr	r3, [pc, #12]	; (80a2d44 <system_ctrl_set_result+0x10>)
 80a2d38:	681b      	ldr	r3, [r3, #0]
 80a2d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2d3e:	9301      	str	r3, [sp, #4]
 80a2d40:	bd08      	pop	{r3, pc}
 80a2d42:	0000      	.short	0x0000
 80a2d44:	080601a4 	.word	0x080601a4

080a2d48 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2d48:	b508      	push	{r3, lr}
 80a2d4a:	4b02      	ldr	r3, [pc, #8]	; (80a2d54 <network_connect+0xc>)
 80a2d4c:	681b      	ldr	r3, [r3, #0]
 80a2d4e:	685b      	ldr	r3, [r3, #4]
 80a2d50:	9301      	str	r3, [sp, #4]
 80a2d52:	bd08      	pop	{r3, pc}
 80a2d54:	080601c8 	.word	0x080601c8

080a2d58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2d58:	b508      	push	{r3, lr}
 80a2d5a:	4b02      	ldr	r3, [pc, #8]	; (80a2d64 <network_connecting+0xc>)
 80a2d5c:	681b      	ldr	r3, [r3, #0]
 80a2d5e:	689b      	ldr	r3, [r3, #8]
 80a2d60:	9301      	str	r3, [sp, #4]
 80a2d62:	bd08      	pop	{r3, pc}
 80a2d64:	080601c8 	.word	0x080601c8

080a2d68 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2d68:	b508      	push	{r3, lr}
 80a2d6a:	4b02      	ldr	r3, [pc, #8]	; (80a2d74 <network_disconnect+0xc>)
 80a2d6c:	681b      	ldr	r3, [r3, #0]
 80a2d6e:	68db      	ldr	r3, [r3, #12]
 80a2d70:	9301      	str	r3, [sp, #4]
 80a2d72:	bd08      	pop	{r3, pc}
 80a2d74:	080601c8 	.word	0x080601c8

080a2d78 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2d78:	b508      	push	{r3, lr}
 80a2d7a:	4b02      	ldr	r3, [pc, #8]	; (80a2d84 <network_ready+0xc>)
 80a2d7c:	681b      	ldr	r3, [r3, #0]
 80a2d7e:	691b      	ldr	r3, [r3, #16]
 80a2d80:	9301      	str	r3, [sp, #4]
 80a2d82:	bd08      	pop	{r3, pc}
 80a2d84:	080601c8 	.word	0x080601c8

080a2d88 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2d88:	b508      	push	{r3, lr}
 80a2d8a:	4b02      	ldr	r3, [pc, #8]	; (80a2d94 <network_on+0xc>)
 80a2d8c:	681b      	ldr	r3, [r3, #0]
 80a2d8e:	695b      	ldr	r3, [r3, #20]
 80a2d90:	9301      	str	r3, [sp, #4]
 80a2d92:	bd08      	pop	{r3, pc}
 80a2d94:	080601c8 	.word	0x080601c8

080a2d98 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2d98:	b508      	push	{r3, lr}
 80a2d9a:	4b02      	ldr	r3, [pc, #8]	; (80a2da4 <network_off+0xc>)
 80a2d9c:	681b      	ldr	r3, [r3, #0]
 80a2d9e:	699b      	ldr	r3, [r3, #24]
 80a2da0:	9301      	str	r3, [sp, #4]
 80a2da2:	bd08      	pop	{r3, pc}
 80a2da4:	080601c8 	.word	0x080601c8

080a2da8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2da8:	b508      	push	{r3, lr}
 80a2daa:	4b02      	ldr	r3, [pc, #8]	; (80a2db4 <network_listen+0xc>)
 80a2dac:	681b      	ldr	r3, [r3, #0]
 80a2dae:	69db      	ldr	r3, [r3, #28]
 80a2db0:	9301      	str	r3, [sp, #4]
 80a2db2:	bd08      	pop	{r3, pc}
 80a2db4:	080601c8 	.word	0x080601c8

080a2db8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2db8:	b508      	push	{r3, lr}
 80a2dba:	4b02      	ldr	r3, [pc, #8]	; (80a2dc4 <network_listening+0xc>)
 80a2dbc:	681b      	ldr	r3, [r3, #0]
 80a2dbe:	6a1b      	ldr	r3, [r3, #32]
 80a2dc0:	9301      	str	r3, [sp, #4]
 80a2dc2:	bd08      	pop	{r3, pc}
 80a2dc4:	080601c8 	.word	0x080601c8

080a2dc8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2dc8:	b508      	push	{r3, lr}
 80a2dca:	4b02      	ldr	r3, [pc, #8]	; (80a2dd4 <network_set_listen_timeout+0xc>)
 80a2dcc:	681b      	ldr	r3, [r3, #0]
 80a2dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2dd0:	9301      	str	r3, [sp, #4]
 80a2dd2:	bd08      	pop	{r3, pc}
 80a2dd4:	080601c8 	.word	0x080601c8

080a2dd8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2dd8:	b508      	push	{r3, lr}
 80a2dda:	4b02      	ldr	r3, [pc, #8]	; (80a2de4 <network_get_listen_timeout+0xc>)
 80a2ddc:	681b      	ldr	r3, [r3, #0]
 80a2dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2de0:	9301      	str	r3, [sp, #4]
 80a2de2:	bd08      	pop	{r3, pc}
 80a2de4:	080601c8 	.word	0x080601c8

080a2de8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a2de8:	b508      	push	{r3, lr}
 80a2dea:	4b02      	ldr	r3, [pc, #8]	; (80a2df4 <network_is_on+0xc>)
 80a2dec:	681b      	ldr	r3, [r3, #0]
 80a2dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2df0:	9301      	str	r3, [sp, #4]
 80a2df2:	bd08      	pop	{r3, pc}
 80a2df4:	080601c8 	.word	0x080601c8

080a2df8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a2df8:	b508      	push	{r3, lr}
 80a2dfa:	4b02      	ldr	r3, [pc, #8]	; (80a2e04 <network_is_off+0xc>)
 80a2dfc:	681b      	ldr	r3, [r3, #0]
 80a2dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2e00:	9301      	str	r3, [sp, #4]
 80a2e02:	bd08      	pop	{r3, pc}
 80a2e04:	080601c8 	.word	0x080601c8

080a2e08 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a2e08:	b508      	push	{r3, lr}
 80a2e0a:	4b02      	ldr	r3, [pc, #8]	; (80a2e14 <spark_process+0xc>)
 80a2e0c:	681b      	ldr	r3, [r3, #0]
 80a2e0e:	689b      	ldr	r3, [r3, #8]
 80a2e10:	9301      	str	r3, [sp, #4]
 80a2e12:	bd08      	pop	{r3, pc}
 80a2e14:	080601cc 	.word	0x080601cc

080a2e18 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a2e18:	b508      	push	{r3, lr}
 80a2e1a:	4b02      	ldr	r3, [pc, #8]	; (80a2e24 <spark_deviceID+0xc>)
 80a2e1c:	681b      	ldr	r3, [r3, #0]
 80a2e1e:	69db      	ldr	r3, [r3, #28]
 80a2e20:	9301      	str	r3, [sp, #4]
 80a2e22:	bd08      	pop	{r3, pc}
 80a2e24:	080601cc 	.word	0x080601cc

080a2e28 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2e28:	b508      	push	{r3, lr}
 80a2e2a:	4b02      	ldr	r3, [pc, #8]	; (80a2e34 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2e2c:	681b      	ldr	r3, [r3, #0]
 80a2e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2e30:	9301      	str	r3, [sp, #4]
 80a2e32:	bd08      	pop	{r3, pc}
 80a2e34:	080601cc 	.word	0x080601cc

080a2e38 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2e38:	b508      	push	{r3, lr}
 80a2e3a:	4b02      	ldr	r3, [pc, #8]	; (80a2e44 <malloc+0xc>)
 80a2e3c:	681b      	ldr	r3, [r3, #0]
 80a2e3e:	681b      	ldr	r3, [r3, #0]
 80a2e40:	9301      	str	r3, [sp, #4]
 80a2e42:	bd08      	pop	{r3, pc}
 80a2e44:	080601a0 	.word	0x080601a0

080a2e48 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2e48:	b508      	push	{r3, lr}
 80a2e4a:	4b02      	ldr	r3, [pc, #8]	; (80a2e54 <free+0xc>)
 80a2e4c:	681b      	ldr	r3, [r3, #0]
 80a2e4e:	685b      	ldr	r3, [r3, #4]
 80a2e50:	9301      	str	r3, [sp, #4]
 80a2e52:	bd08      	pop	{r3, pc}
 80a2e54:	080601a0 	.word	0x080601a0

080a2e58 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2e58:	b508      	push	{r3, lr}
 80a2e5a:	4b02      	ldr	r3, [pc, #8]	; (80a2e64 <realloc+0xc>)
 80a2e5c:	681b      	ldr	r3, [r3, #0]
 80a2e5e:	689b      	ldr	r3, [r3, #8]
 80a2e60:	9301      	str	r3, [sp, #4]
 80a2e62:	bd08      	pop	{r3, pc}
 80a2e64:	080601a0 	.word	0x080601a0

080a2e68 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a2e68:	b508      	push	{r3, lr}
 80a2e6a:	4b02      	ldr	r3, [pc, #8]	; (80a2e74 <snprintf+0xc>)
 80a2e6c:	681b      	ldr	r3, [r3, #0]
 80a2e6e:	69db      	ldr	r3, [r3, #28]
 80a2e70:	9301      	str	r3, [sp, #4]
 80a2e72:	bd08      	pop	{r3, pc}
 80a2e74:	080601a0 	.word	0x080601a0

080a2e78 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a2e78:	b508      	push	{r3, lr}
 80a2e7a:	4b02      	ldr	r3, [pc, #8]	; (80a2e84 <vsnprintf+0xc>)
 80a2e7c:	681b      	ldr	r3, [r3, #0]
 80a2e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2e80:	9301      	str	r3, [sp, #4]
 80a2e82:	bd08      	pop	{r3, pc}
 80a2e84:	080601a0 	.word	0x080601a0

080a2e88 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2e88:	b508      	push	{r3, lr}
 80a2e8a:	4b02      	ldr	r3, [pc, #8]	; (80a2e94 <_malloc_r+0xc>)
 80a2e8c:	681b      	ldr	r3, [r3, #0]
 80a2e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2e90:	9301      	str	r3, [sp, #4]
 80a2e92:	bd08      	pop	{r3, pc}
 80a2e94:	080601a0 	.word	0x080601a0

080a2e98 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a2e98:	b508      	push	{r3, lr}
 80a2e9a:	4b02      	ldr	r3, [pc, #8]	; (80a2ea4 <newlib_impure_ptr_callback+0xc>)
 80a2e9c:	681b      	ldr	r3, [r3, #0]
 80a2e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2ea0:	9301      	str	r3, [sp, #4]
 80a2ea2:	bd08      	pop	{r3, pc}
 80a2ea4:	080601a0 	.word	0x080601a0

080a2ea8 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2ea8:	6880      	ldr	r0, [r0, #8]
 80a2eaa:	f7ff bdb7 	b.w	80a2a1c <os_mutex_recursive_unlock>

080a2eae <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2eae:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a2eb0:	2600      	movs	r6, #0
 80a2eb2:	4604      	mov	r4, r0
 80a2eb4:	460d      	mov	r5, r1
 80a2eb6:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a2eba:	f7ff fd97 	bl	80a29ec <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2ebe:	4628      	mov	r0, r5
    _spi = spi;
 80a2ec0:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2ec2:	f7ff fe9d 	bl	80a2c00 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2ec6:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2ec8:	6066      	str	r6, [r4, #4]
}
 80a2eca:	bd70      	pop	{r4, r5, r6, pc}

080a2ecc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a2ecc:	b510      	push	{r4, lr}
 80a2ece:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 80a2ed0:	6880      	ldr	r0, [r0, #8]
 80a2ed2:	f7ff fd9b 	bl	80a2a0c <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a2ed6:	7820      	ldrb	r0, [r4, #0]
 80a2ed8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2edc:	f7ff fe80 	bl	80a2be0 <hal_spi_begin>
        unlock();
 80a2ee0:	4620      	mov	r0, r4
 80a2ee2:	f7ff ffe1 	bl	80a2ea8 <_ZN8SPIClass6unlockEv>
    }
}
 80a2ee6:	bd10      	pop	{r4, pc}

080a2ee8 <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 80a2ee8:	b508      	push	{r3, lr}
    // Release peripheral
    unlock();
 80a2eea:	f7ff ffdd 	bl	80a2ea8 <_ZN8SPIClass6unlockEv>
}
 80a2eee:	bd08      	pop	{r3, pc}

080a2ef0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a2ef0:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a2ef2:	2400      	movs	r4, #0
 80a2ef4:	0840      	lsrs	r0, r0, #1
 80a2ef6:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a2ef8:	6818      	ldr	r0, [r3, #0]
 80a2efa:	b2e5      	uxtb	r5, r4
 80a2efc:	4288      	cmp	r0, r1
 80a2efe:	d906      	bls.n	80a2f0e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2f00:	3401      	adds	r4, #1
 80a2f02:	2c08      	cmp	r4, #8
 80a2f04:	d002      	beq.n	80a2f0c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a2f06:	0840      	lsrs	r0, r0, #1
 80a2f08:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a2f0a:	e7f5      	b.n	80a2ef8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2f0c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a2f0e:	4b02      	ldr	r3, [pc, #8]	; (80a2f18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2f10:	5d5b      	ldrb	r3, [r3, r5]
 80a2f12:	7013      	strb	r3, [r2, #0]
}
 80a2f14:	bd30      	pop	{r4, r5, pc}
 80a2f16:	bf00      	nop
 80a2f18:	080a7e14 	.word	0x080a7e14

080a2f1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 80a2f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2f20:	4606      	mov	r6, r0
 80a2f22:	b08f      	sub	sp, #60	; 0x3c
 80a2f24:	6880      	ldr	r0, [r0, #8]
 80a2f26:	460c      	mov	r4, r1
 80a2f28:	f7ff fd70 	bl	80a2a0c <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a2f2c:	2214      	movs	r2, #20
 80a2f2e:	2100      	movs	r1, #0
 80a2f30:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 80a2f32:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a2f34:	f002 f86c 	bl	80a5010 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a2f38:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a2f3a:	2200      	movs	r2, #0
 80a2f3c:	4628      	mov	r0, r5
 80a2f3e:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 80a2f40:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80a2f44:	f7ff fe6c 	bl	80a2c20 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80a2f48:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80a2f4c:	b113      	cbz	r3, 80a2f54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80a2f4e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a2f52:	b155      	cbz	r5, 80a2f6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  SPISettings()
  {
 80a2f54:	2700      	movs	r7, #0
 80a2f56:	2501      	movs	r5, #1
 80a2f58:	46b9      	mov	r9, r7
 80a2f5a:	46b8      	mov	r8, r7
  virtual ~SPISettings() {
  }

  bool operator==(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a2f5c:	7923      	ldrb	r3, [r4, #4]
 80a2f5e:	b15d      	cbz	r5, 80a2f78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80a2f60:	b1c3      	cbz	r3, 80a2f94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80a2f62:	2000      	movs	r0, #0
 80a2f64:	b00f      	add	sp, #60	; 0x3c
 80a2f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80a2f6a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a2f6e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a2f72:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 80a2f76:	e7f1      	b.n	80a2f5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
      return true;

    if (default_ == other.default_ &&
 80a2f78:	2b00      	cmp	r3, #0
 80a2f7a:	d135      	bne.n	80a2fe8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 80a2f7c:	68a3      	ldr	r3, [r4, #8]
 80a2f7e:	4543      	cmp	r3, r8
 80a2f80:	d108      	bne.n	80a2f94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a2f82:	f88d 9020 	strb.w	r9, [sp, #32]
 80a2f86:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a2f8a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a2f8e:	89a3      	ldrh	r3, [r4, #12]
 80a2f90:	429a      	cmp	r2, r3
 80a2f92:	d0e6      	beq.n	80a2f62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 80a2f94:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a2f96:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 80a2f98:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a2f9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a2f9e:	ab04      	add	r3, sp, #16
 80a2fa0:	f10d 020f 	add.w	r2, sp, #15
 80a2fa4:	f7ff ffa4 	bl	80a2ef0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    return false;
  }

  bool operator<=(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a2fa8:	7921      	ldrb	r1, [r4, #4]
 80a2faa:	b985      	cbnz	r5, 80a2fce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
      return true;

    if (default_ == other.default_ &&
 80a2fac:	b989      	cbnz	r1, 80a2fd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a2fae:	68a3      	ldr	r3, [r4, #8]
 80a2fb0:	4543      	cmp	r3, r8
 80a2fb2:	d30e      	bcc.n	80a2fd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a2fb4:	f88d 9020 	strb.w	r9, [sp, #32]
 80a2fb8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a2fbc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a2fc0:	89a3      	ldrh	r3, [r4, #12]
 80a2fc2:	429a      	cmp	r2, r3
 80a2fc4:	d105      	bne.n	80a2fd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80a2fc6:	9b04      	ldr	r3, [sp, #16]
 80a2fc8:	4543      	cmp	r3, r8
 80a2fca:	d102      	bne.n	80a2fd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a2fcc:	e7c9      	b.n	80a2f62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 80a2fce:	2900      	cmp	r1, #0
 80a2fd0:	d1f9      	bne.n	80a2fc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 80a2fd2:	2300      	movs	r3, #0
 80a2fd4:	9301      	str	r3, [sp, #4]
 80a2fd6:	7b63      	ldrb	r3, [r4, #13]
 80a2fd8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a2fdc:	9300      	str	r3, [sp, #0]
 80a2fde:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a2fe0:	7830      	ldrb	r0, [r6, #0]
 80a2fe2:	f7ff fe25 	bl	80a2c30 <hal_spi_set_settings>
    return 0;
 80a2fe6:	e7bc      	b.n	80a2f62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a2fe8:	462b      	mov	r3, r5
 80a2fea:	462a      	mov	r2, r5
 80a2fec:	2101      	movs	r1, #1
 80a2fee:	e9cd 5500 	strd	r5, r5, [sp]
 80a2ff2:	e7f5      	b.n	80a2fe0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

080a2ff4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2ff4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a2ff6:	7800      	ldrb	r0, [r0, #0]
 80a2ff8:	f7ff fdfa 	bl	80a2bf0 <hal_spi_transfer>
}
 80a2ffc:	b2c0      	uxtb	r0, r0
 80a2ffe:	bd08      	pop	{r3, pc}

080a3000 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a3000:	b510      	push	{r4, lr}
 80a3002:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a3004:	6800      	ldr	r0, [r0, #0]
 80a3006:	b118      	cbz	r0, 80a3010 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a3008:	f7ff ff1e 	bl	80a2e48 <free>
            wakeupSource_ = nullptr;
 80a300c:	2300      	movs	r3, #0
 80a300e:	6023      	str	r3, [r4, #0]
        }
    }
 80a3010:	bd10      	pop	{r4, pc}

080a3012 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a3012:	b510      	push	{r4, lr}
 80a3014:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a3016:	f7ff fff3 	bl	80a3000 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a301a:	4620      	mov	r0, r4
 80a301c:	bd10      	pop	{r4, pc}
	...

080a3020 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a3020:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a3022:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3024:	b510      	push	{r4, lr}
 80a3026:	4b08      	ldr	r3, [pc, #32]	; (80a3048 <_GLOBAL__sub_I_System+0x28>)
 80a3028:	4c08      	ldr	r4, [pc, #32]	; (80a304c <_GLOBAL__sub_I_System+0x2c>)
 80a302a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a302c:	4b08      	ldr	r3, [pc, #32]	; (80a3050 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a302e:	6020      	str	r0, [r4, #0]
 80a3030:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a3032:	71a0      	strb	r0, [r4, #6]
 80a3034:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3036:	f7ff fe5b 	bl	80a2cf0 <set_system_mode>
SystemClass System;
 80a303a:	4620      	mov	r0, r4
 80a303c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a3040:	4a04      	ldr	r2, [pc, #16]	; (80a3054 <_GLOBAL__sub_I_System+0x34>)
 80a3042:	4905      	ldr	r1, [pc, #20]	; (80a3058 <_GLOBAL__sub_I_System+0x38>)
 80a3044:	f001 b97c 	b.w	80a4340 <__aeabi_atexit>
 80a3048:	20000338 	.word	0x20000338
 80a304c:	2000032c 	.word	0x2000032c
 80a3050:	ffff0000 	.word	0xffff0000
 80a3054:	200001d8 	.word	0x200001d8
 80a3058:	080a3013 	.word	0x080a3013

080a305c <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a305c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a305e:	6803      	ldr	r3, [r0, #0]
{
 80a3060:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3064:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3066:	2201      	movs	r2, #1
 80a3068:	f247 5330 	movw	r3, #30000	; 0x7530
 80a306c:	f10d 0107 	add.w	r1, sp, #7
 80a3070:	47a0      	blx	r4
}
 80a3072:	b002      	add	sp, #8
 80a3074:	bd10      	pop	{r4, pc}

080a3076 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3076:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3078:	6803      	ldr	r3, [r0, #0]
 80a307a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a307c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3080:	46a4      	mov	ip, r4
}
 80a3082:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3084:	4760      	bx	ip

080a3086 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3086:	b513      	push	{r0, r1, r4, lr}
 80a3088:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a308a:	6802      	ldr	r2, [r0, #0]
{
 80a308c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3090:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3092:	f10d 0107 	add.w	r1, sp, #7
 80a3096:	2201      	movs	r2, #1
 80a3098:	47a0      	blx	r4
}
 80a309a:	b002      	add	sp, #8
 80a309c:	bd10      	pop	{r4, pc}

080a309e <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a309e:	4770      	bx	lr

080a30a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a30a0:	4770      	bx	lr
	...

080a30a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a30a4:	b510      	push	{r4, lr}
 80a30a6:	4604      	mov	r4, r0
	    ||
 80a30a8:	4b06      	ldr	r3, [pc, #24]	; (80a30c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a30aa:	4608      	mov	r0, r1
	    ||
 80a30ac:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a30ae:	f104 040c 	add.w	r4, r4, #12
 80a30b2:	d004      	beq.n	80a30be <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a30b4:	f001 f94e 	bl	80a4354 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a30b8:	2800      	cmp	r0, #0
	return nullptr;
 80a30ba:	bf08      	it	eq
 80a30bc:	2400      	moveq	r4, #0
      }
 80a30be:	4620      	mov	r0, r4
 80a30c0:	bd10      	pop	{r4, pc}
 80a30c2:	bf00      	nop
 80a30c4:	080a7e54 	.word	0x080a7e54

080a30c8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a30c8:	b510      	push	{r4, lr}
 80a30ca:	4604      	mov	r4, r0
 80a30cc:	21ac      	movs	r1, #172	; 0xac
 80a30ce:	f001 f93c 	bl	80a434a <_ZdlPvj>
 80a30d2:	4620      	mov	r0, r4
 80a30d4:	bd10      	pop	{r4, pc}

080a30d6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a30d6:	f7fc bfe4 	b.w	80a00a2 <_ZdlPv>
	...

080a30dc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a30dc:	b538      	push	{r3, r4, r5, lr}
 80a30de:	4b0b      	ldr	r3, [pc, #44]	; (80a310c <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a30e0:	6984      	ldr	r4, [r0, #24]
 80a30e2:	4605      	mov	r5, r0
 80a30e4:	6003      	str	r3, [r0, #0]
 80a30e6:	b17c      	cbz	r4, 80a3108 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a30e8:	6863      	ldr	r3, [r4, #4]
 80a30ea:	3b01      	subs	r3, #1
 80a30ec:	6063      	str	r3, [r4, #4]
 80a30ee:	b95b      	cbnz	r3, 80a3108 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a30f0:	6823      	ldr	r3, [r4, #0]
 80a30f2:	4620      	mov	r0, r4
 80a30f4:	689b      	ldr	r3, [r3, #8]
 80a30f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a30f8:	68a3      	ldr	r3, [r4, #8]
 80a30fa:	3b01      	subs	r3, #1
 80a30fc:	60a3      	str	r3, [r4, #8]
 80a30fe:	b91b      	cbnz	r3, 80a3108 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3100:	6823      	ldr	r3, [r4, #0]
 80a3102:	4620      	mov	r0, r4
 80a3104:	68db      	ldr	r3, [r3, #12]
 80a3106:	4798      	blx	r3
 80a3108:	4628      	mov	r0, r5
 80a310a:	bd38      	pop	{r3, r4, r5, pc}
 80a310c:	080a7e64 	.word	0x080a7e64

080a3110 <_ZN9TCPClientD0Ev>:
 80a3110:	b510      	push	{r4, lr}
 80a3112:	4604      	mov	r4, r0
 80a3114:	f7ff ffe2 	bl	80a30dc <_ZN9TCPClientD1Ev>
 80a3118:	4620      	mov	r0, r4
 80a311a:	211c      	movs	r1, #28
 80a311c:	f001 f915 	bl	80a434a <_ZdlPvj>
 80a3120:	4620      	mov	r0, r4
 80a3122:	bd10      	pop	{r4, pc}

080a3124 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3124:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3126:	4604      	mov	r4, r0
 80a3128:	4606      	mov	r6, r0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a312a:	694d      	ldr	r5, [r1, #20]
 80a312c:	4b04      	ldr	r3, [pc, #16]	; (80a3140 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a312e:	358c      	adds	r5, #140	; 0x8c
 80a3130:	f844 3b04 	str.w	r3, [r4], #4
 80a3134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3138:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a313a:	4630      	mov	r0, r6
 80a313c:	7023      	strb	r3, [r4, #0]
 80a313e:	bd70      	pop	{r4, r5, r6, pc}
 80a3140:	080a7ee0 	.word	0x080a7ee0

080a3144 <_ZN9TCPClient4peekEv>:
{
 80a3144:	b510      	push	{r4, lr}
 80a3146:	6943      	ldr	r3, [r0, #20]
 80a3148:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a314a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a314e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3152:	429a      	cmp	r2, r3
 80a3154:	d005      	beq.n	80a3162 <_ZN9TCPClient4peekEv+0x1e>
 80a3156:	6963      	ldr	r3, [r4, #20]
 80a3158:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a315c:	4413      	add	r3, r2
 80a315e:	7918      	ldrb	r0, [r3, #4]
}
 80a3160:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3162:	6803      	ldr	r3, [r0, #0]
 80a3164:	691b      	ldr	r3, [r3, #16]
 80a3166:	4798      	blx	r3
 80a3168:	2800      	cmp	r0, #0
 80a316a:	d1f4      	bne.n	80a3156 <_ZN9TCPClient4peekEv+0x12>
 80a316c:	f04f 30ff 	mov.w	r0, #4294967295
 80a3170:	e7f6      	b.n	80a3160 <_ZN9TCPClient4peekEv+0x1c>

080a3172 <_ZN9TCPClient4readEv>:
{
 80a3172:	b510      	push	{r4, lr}
 80a3174:	6943      	ldr	r3, [r0, #20]
 80a3176:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3178:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a317c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3180:	429a      	cmp	r2, r3
 80a3182:	d008      	beq.n	80a3196 <_ZN9TCPClient4readEv+0x24>
 80a3184:	6963      	ldr	r3, [r4, #20]
 80a3186:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a318a:	1c51      	adds	r1, r2, #1
 80a318c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3190:	4413      	add	r3, r2
 80a3192:	7918      	ldrb	r0, [r3, #4]
}
 80a3194:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3196:	6803      	ldr	r3, [r0, #0]
 80a3198:	691b      	ldr	r3, [r3, #16]
 80a319a:	4798      	blx	r3
 80a319c:	2800      	cmp	r0, #0
 80a319e:	d1f1      	bne.n	80a3184 <_ZN9TCPClient4readEv+0x12>
 80a31a0:	f04f 30ff 	mov.w	r0, #4294967295
 80a31a4:	e7f6      	b.n	80a3194 <_ZN9TCPClient4readEv+0x22>

080a31a6 <_ZN9TCPClient4readEPhj>:
{
 80a31a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a31a8:	6943      	ldr	r3, [r0, #20]
 80a31aa:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a31ac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a31b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a31b4:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a31b6:	429a      	cmp	r2, r3
{
 80a31b8:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a31ba:	d016      	beq.n	80a31ea <_ZN9TCPClient4readEPhj+0x44>
 80a31bc:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a31be:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a31c0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a31c4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a31c8:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a31ca:	42bc      	cmp	r4, r7
 80a31cc:	bf28      	it	cs
 80a31ce:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a31d0:	3304      	adds	r3, #4
 80a31d2:	4622      	mov	r2, r4
 80a31d4:	4419      	add	r1, r3
 80a31d6:	f001 ff0d 	bl	80a4ff4 <memcpy>
 80a31da:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a31dc:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a31e0:	4423      	add	r3, r4
 80a31e2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a31e6:	4620      	mov	r0, r4
 80a31e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a31ea:	6803      	ldr	r3, [r0, #0]
 80a31ec:	691b      	ldr	r3, [r3, #16]
 80a31ee:	4798      	blx	r3
 80a31f0:	2800      	cmp	r0, #0
 80a31f2:	d1e3      	bne.n	80a31bc <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a31f4:	f04f 34ff 	mov.w	r4, #4294967295
 80a31f8:	e7f5      	b.n	80a31e6 <_ZN9TCPClient4readEPhj+0x40>

080a31fa <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a31fa:	2300      	movs	r3, #0
 80a31fc:	6942      	ldr	r2, [r0, #20]
 80a31fe:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3202:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3204:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a3208:	4770      	bx	lr
	...

080a320c <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a320c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3210:	461f      	mov	r7, r3
    stop();
 80a3212:	6803      	ldr	r3, [r0, #0]
{
 80a3214:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a3216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3218:	4605      	mov	r5, r0
 80a321a:	460c      	mov	r4, r1
 80a321c:	4616      	mov	r6, r2
    stop();
 80a321e:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a3220:	4638      	mov	r0, r7
 80a3222:	f000 ff5f 	bl	80a40e4 <_ZN5spark12NetworkClass4fromEm>
 80a3226:	6803      	ldr	r3, [r0, #0]
 80a3228:	68db      	ldr	r3, [r3, #12]
 80a322a:	4798      	blx	r3
 80a322c:	2800      	cmp	r0, #0
 80a322e:	d054      	beq.n	80a32da <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3230:	4633      	mov	r3, r6
 80a3232:	2206      	movs	r2, #6
 80a3234:	2101      	movs	r1, #1
 80a3236:	2002      	movs	r0, #2
 80a3238:	9700      	str	r7, [sp, #0]
 80a323a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a323e:	f7ff fc9f 	bl	80a2b80 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3242:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3244:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3248:	f04f 0800 	mov.w	r8, #0
 80a324c:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a3250:	696b      	ldr	r3, [r5, #20]
 80a3252:	2001      	movs	r0, #1
 80a3254:	681b      	ldr	r3, [r3, #0]
 80a3256:	4923      	ldr	r1, [pc, #140]	; (80a32e4 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3258:	9301      	str	r3, [sp, #4]
 80a325a:	4b23      	ldr	r3, [pc, #140]	; (80a32e8 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a325c:	aa02      	add	r2, sp, #8
 80a325e:	9300      	str	r3, [sp, #0]
 80a3260:	4643      	mov	r3, r8
 80a3262:	f7ff fd3d 	bl	80a2ce0 <log_message>
          if (socket_handle_valid(d_->sock))
 80a3266:	696b      	ldr	r3, [r5, #20]
 80a3268:	6818      	ldr	r0, [r3, #0]
 80a326a:	f7ff fc81 	bl	80a2b70 <socket_handle_valid>
 80a326e:	2800      	cmp	r0, #0
 80a3270:	d033      	beq.n	80a32da <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a3272:	4628      	mov	r0, r5
 80a3274:	f7ff ffc1 	bl	80a31fa <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a3278:	2302      	movs	r3, #2
 80a327a:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a327e:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3280:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3282:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3286:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3288:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a328c:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3290:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3292:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a3296:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a329a:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a329e:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a32a2:	f7ff fd05 	bl	80a2cb0 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a32a6:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a32a8:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a32aa:	2210      	movs	r2, #16
 80a32ac:	6818      	ldr	r0, [r3, #0]
 80a32ae:	a902      	add	r1, sp, #8
 80a32b0:	f7ff fc6e 	bl	80a2b90 <socket_connect>
 80a32b4:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a32b6:	4630      	mov	r0, r6
 80a32b8:	f7ff fcfa 	bl	80a2cb0 <HAL_NET_SetNetWatchDog>
 80a32bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a32be:	696e      	ldr	r6, [r5, #20]
 80a32c0:	368c      	adds	r6, #140	; 0x8c
 80a32c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a32c4:	6823      	ldr	r3, [r4, #0]
 80a32c6:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a32c8:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a32ca:	f1b9 0f00 	cmp.w	r9, #0
 80a32ce:	d007      	beq.n	80a32e0 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a32d0:	682b      	ldr	r3, [r5, #0]
 80a32d2:	4628      	mov	r0, r5
 80a32d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a32d6:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a32d8:	4640      	mov	r0, r8
}
 80a32da:	b00b      	add	sp, #44	; 0x2c
 80a32dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a32e0:	2001      	movs	r0, #1
        return connected;
 80a32e2:	e7fa      	b.n	80a32da <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a32e4:	080a7e1c 	.word	0x080a7e1c
 80a32e8:	080a7e23 	.word	0x080a7e23

080a32ec <_ZN9TCPClient9availableEv>:
{
 80a32ec:	b538      	push	{r3, r4, r5, lr}
 80a32ee:	6942      	ldr	r2, [r0, #20]
 80a32f0:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a32f2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a32f6:	b12b      	cbz	r3, 80a3304 <_ZN9TCPClient9availableEv+0x18>
 80a32f8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a32fc:	429a      	cmp	r2, r3
 80a32fe:	d101      	bne.n	80a3304 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a3300:	f7ff ff7b 	bl	80a31fa <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3304:	6920      	ldr	r0, [r4, #16]
 80a3306:	f000 feed 	bl	80a40e4 <_ZN5spark12NetworkClass4fromEm>
 80a330a:	6803      	ldr	r3, [r0, #0]
 80a330c:	68db      	ldr	r3, [r3, #12]
 80a330e:	4798      	blx	r3
 80a3310:	b1f8      	cbz	r0, 80a3352 <_ZN9TCPClient9availableEv+0x66>
 80a3312:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a3314:	6818      	ldr	r0, [r3, #0]
 80a3316:	f7ff fc2b 	bl	80a2b70 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a331a:	b1d0      	cbz	r0, 80a3352 <_ZN9TCPClient9availableEv+0x66>
 80a331c:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a331e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a3322:	297f      	cmp	r1, #127	; 0x7f
 80a3324:	d815      	bhi.n	80a3352 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a3326:	1d05      	adds	r5, r0, #4
 80a3328:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a332c:	2300      	movs	r3, #0
 80a332e:	6800      	ldr	r0, [r0, #0]
 80a3330:	4429      	add	r1, r5
 80a3332:	f7ff fc35 	bl	80a2ba0 <socket_receive>
            if (ret > 0)
 80a3336:	2800      	cmp	r0, #0
 80a3338:	dd0b      	ble.n	80a3352 <_ZN9TCPClient9availableEv+0x66>
 80a333a:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a333c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3340:	b90a      	cbnz	r2, 80a3346 <_ZN9TCPClient9availableEv+0x5a>
 80a3342:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a3346:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a3348:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a334c:	4410      	add	r0, r2
 80a334e:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a3352:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a3354:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a3358:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a335c:	1ac0      	subs	r0, r0, r3
 80a335e:	bd38      	pop	{r3, r4, r5, pc}

080a3360 <_ZN9TCPClient4stopEv>:
{
 80a3360:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a3362:	6943      	ldr	r3, [r0, #20]
{
 80a3364:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3366:	6818      	ldr	r0, [r3, #0]
 80a3368:	f7ff fc02 	bl	80a2b70 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a336c:	b118      	cbz	r0, 80a3376 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a336e:	6963      	ldr	r3, [r4, #20]
 80a3370:	6818      	ldr	r0, [r3, #0]
 80a3372:	f7ff fc1d 	bl	80a2bb0 <socket_close>
 80a3376:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3378:	f7ff fc22 	bl	80a2bc0 <socket_handle_invalid>
 80a337c:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a337e:	6960      	ldr	r0, [r4, #20]
 80a3380:	2211      	movs	r2, #17
 80a3382:	2100      	movs	r1, #0
 80a3384:	308c      	adds	r0, #140	; 0x8c
 80a3386:	f001 fe43 	bl	80a5010 <memset>
  flush_buffer();
 80a338a:	4620      	mov	r0, r4
}
 80a338c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a3390:	f7ff bf33 	b.w	80a31fa <_ZN9TCPClient12flush_bufferEv>

080a3394 <_ZN9TCPClient6statusEv>:
{
 80a3394:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3396:	6943      	ldr	r3, [r0, #20]
{
 80a3398:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a339a:	6818      	ldr	r0, [r3, #0]
 80a339c:	f7ff fbe8 	bl	80a2b70 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a33a0:	b908      	cbnz	r0, 80a33a6 <_ZN9TCPClient6statusEv+0x12>
 80a33a2:	2000      	movs	r0, #0
}
 80a33a4:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a33a6:	6920      	ldr	r0, [r4, #16]
 80a33a8:	f000 fe9c 	bl	80a40e4 <_ZN5spark12NetworkClass4fromEm>
 80a33ac:	6803      	ldr	r3, [r0, #0]
 80a33ae:	68db      	ldr	r3, [r3, #12]
 80a33b0:	4798      	blx	r3
 80a33b2:	2800      	cmp	r0, #0
 80a33b4:	d0f5      	beq.n	80a33a2 <_ZN9TCPClient6statusEv+0xe>
 80a33b6:	6963      	ldr	r3, [r4, #20]
 80a33b8:	6818      	ldr	r0, [r3, #0]
 80a33ba:	f7ff fbd1 	bl	80a2b60 <socket_active_status>
 80a33be:	fab0 f080 	clz	r0, r0
 80a33c2:	0940      	lsrs	r0, r0, #5
 80a33c4:	e7ee      	b.n	80a33a4 <_ZN9TCPClient6statusEv+0x10>

080a33c6 <_ZN9TCPClientcvbEv>:
{
 80a33c6:	b508      	push	{r3, lr}
   return (status()!=0);
 80a33c8:	f7ff ffe4 	bl	80a3394 <_ZN9TCPClient6statusEv>
}
 80a33cc:	3800      	subs	r0, #0
 80a33ce:	bf18      	it	ne
 80a33d0:	2001      	movne	r0, #1
 80a33d2:	bd08      	pop	{r3, pc}

080a33d4 <_ZN9TCPClient5writeEPKhjm>:
{
 80a33d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a33d8:	2700      	movs	r7, #0
 80a33da:	6047      	str	r7, [r0, #4]
 80a33dc:	4604      	mov	r4, r0
 80a33de:	460d      	mov	r5, r1
 80a33e0:	4616      	mov	r6, r2
 80a33e2:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a33e4:	f7ff ffd6 	bl	80a3394 <_ZN9TCPClient6statusEv>
 80a33e8:	b170      	cbz	r0, 80a3408 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a33ea:	e9cd 8700 	strd	r8, r7, [sp]
 80a33ee:	6960      	ldr	r0, [r4, #20]
 80a33f0:	463b      	mov	r3, r7
 80a33f2:	4632      	mov	r2, r6
 80a33f4:	4629      	mov	r1, r5
 80a33f6:	6800      	ldr	r0, [r0, #0]
 80a33f8:	f7ff fbea 	bl	80a2bd0 <socket_send_ex>
    if (ret < 0) {
 80a33fc:	2800      	cmp	r0, #0
 80a33fe:	da00      	bge.n	80a3402 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a3400:	6060      	str	r0, [r4, #4]
}
 80a3402:	b002      	add	sp, #8
 80a3404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3408:	f04f 30ff 	mov.w	r0, #4294967295
 80a340c:	e7f8      	b.n	80a3400 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a340e <_ZN9TCPClient9connectedEv>:
{
 80a340e:	b570      	push	{r4, r5, r6, lr}
 80a3410:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a3412:	f7ff ffbf 	bl	80a3394 <_ZN9TCPClient6statusEv>
 80a3416:	b9e8      	cbnz	r0, 80a3454 <_ZN9TCPClient9connectedEv+0x46>
 80a3418:	696b      	ldr	r3, [r5, #20]
 80a341a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a341e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3422:	4291      	cmp	r1, r2
 80a3424:	d116      	bne.n	80a3454 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a3426:	6818      	ldr	r0, [r3, #0]
 80a3428:	f7ff fba2 	bl	80a2b70 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a342c:	b908      	cbnz	r0, 80a3432 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a342e:	2000      	movs	r0, #0
}
 80a3430:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3432:	696b      	ldr	r3, [r5, #20]
 80a3434:	6818      	ldr	r0, [r3, #0]
 80a3436:	f7ff fb93 	bl	80a2b60 <socket_active_status>
 80a343a:	2801      	cmp	r0, #1
 80a343c:	4604      	mov	r4, r0
 80a343e:	d1f6      	bne.n	80a342e <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a3440:	682b      	ldr	r3, [r5, #0]
 80a3442:	4628      	mov	r0, r5
 80a3444:	691b      	ldr	r3, [r3, #16]
 80a3446:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3448:	b930      	cbnz	r0, 80a3458 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a344a:	682b      	ldr	r3, [r5, #0]
 80a344c:	4628      	mov	r0, r5
 80a344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3450:	4798      	blx	r3
 80a3452:	e7ec      	b.n	80a342e <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a3454:	2001      	movs	r0, #1
 80a3456:	e7eb      	b.n	80a3430 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a3458:	4620      	mov	r0, r4
 80a345a:	e7e9      	b.n	80a3430 <_ZN9TCPClient9connectedEv+0x22>

080a345c <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a345c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a345e:	b510      	push	{r4, lr}
 80a3460:	4604      	mov	r4, r0
          total(0) {
 80a3462:	6001      	str	r1, [r0, #0]
 80a3464:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a3468:	3088      	adds	r0, #136	; 0x88
 80a346a:	f000 fb87 	bl	80a3b7c <_ZN9IPAddressC1Ev>
}
 80a346e:	4620      	mov	r0, r4
 80a3470:	bd10      	pop	{r4, pc}
	...

080a3474 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a3474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a347a:	2300      	movs	r3, #0
 80a347c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a3480:	4a0d      	ldr	r2, [pc, #52]	; (80a34b8 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a3482:	6103      	str	r3, [r0, #16]
 80a3484:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a3486:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a3488:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a348a:	20ac      	movs	r0, #172	; 0xac
 80a348c:	460e      	mov	r6, r1
 80a348e:	f7fc fe04 	bl	80a009a <_Znwj>
	  auto __pi = ::new (__mem)
 80a3492:	1e05      	subs	r5, r0, #0
 80a3494:	f105 070c 	add.w	r7, r5, #12
 80a3498:	d008      	beq.n	80a34ac <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a349a:	2301      	movs	r3, #1
 80a349c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a34a0:	4b06      	ldr	r3, [pc, #24]	; (80a34bc <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a34a2:	4631      	mov	r1, r6
 80a34a4:	4638      	mov	r0, r7
 80a34a6:	602b      	str	r3, [r5, #0]
 80a34a8:	f7ff ffd8 	bl	80a345c <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a34ac:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a34ae:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a34b2:	f7ff fea2 	bl	80a31fa <_ZN9TCPClient12flush_bufferEv>
}
 80a34b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a34b8:	080a7e64 	.word	0x080a7e64
 80a34bc:	080a7e40 	.word	0x080a7e40

080a34c0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a34c0:	b510      	push	{r4, lr}
 80a34c2:	4604      	mov	r4, r0
 80a34c4:	f7ff fb7c 	bl	80a2bc0 <socket_handle_invalid>
 80a34c8:	4601      	mov	r1, r0
 80a34ca:	4620      	mov	r0, r4
 80a34cc:	f7ff ffd2 	bl	80a3474 <_ZN9TCPClientC1Em>
}
 80a34d0:	4620      	mov	r0, r4
 80a34d2:	bd10      	pop	{r4, pc}

080a34d4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a34d4:	b510      	push	{r4, lr}
 80a34d6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a34d8:	6800      	ldr	r0, [r0, #0]
 80a34da:	f7ff fb49 	bl	80a2b70 <socket_handle_valid>
 80a34de:	b110      	cbz	r0, 80a34e6 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a34e0:	6820      	ldr	r0, [r4, #0]
 80a34e2:	f7ff fb65 	bl	80a2bb0 <socket_close>
    }
}
 80a34e6:	4620      	mov	r0, r4
 80a34e8:	bd10      	pop	{r4, pc}

080a34ea <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a34ea:	300c      	adds	r0, #12
 80a34ec:	f7ff bff2 	b.w	80a34d4 <_ZN9TCPClient4DataD1Ev>

080a34f0 <_ZN9TCPClient7connectEPKctm>:
{
 80a34f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a34f4:	461f      	mov	r7, r3
    stop();
 80a34f6:	6803      	ldr	r3, [r0, #0]
{
 80a34f8:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a34fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a34fc:	4606      	mov	r6, r0
 80a34fe:	460d      	mov	r5, r1
 80a3500:	4690      	mov	r8, r2
    stop();
 80a3502:	4798      	blx	r3
    if (Network.ready())
 80a3504:	4813      	ldr	r0, [pc, #76]	; (80a3554 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a3506:	f000 fd98 	bl	80a403a <_ZN5spark12NetworkClass5readyEv>
 80a350a:	b1f0      	cbz	r0, 80a354a <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a350c:	a802      	add	r0, sp, #8
 80a350e:	f000 fb35 	bl	80a3b7c <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a3512:	4628      	mov	r0, r5
 80a3514:	f001 fdb2 	bl	80a507c <strlen>
 80a3518:	2400      	movs	r4, #0
 80a351a:	b281      	uxth	r1, r0
 80a351c:	463b      	mov	r3, r7
 80a351e:	4628      	mov	r0, r5
 80a3520:	9400      	str	r4, [sp, #0]
 80a3522:	aa03      	add	r2, sp, #12
 80a3524:	f7ff fbcc 	bl	80a2cc0 <inet_gethostbyname>
 80a3528:	b990      	cbnz	r0, 80a3550 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a352a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a352c:	ad09      	add	r5, sp, #36	; 0x24
 80a352e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a3532:	4b09      	ldr	r3, [pc, #36]	; (80a3558 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a3534:	ac03      	add	r4, sp, #12
 80a3536:	9308      	str	r3, [sp, #32]
 80a3538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a353a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a353c:	6823      	ldr	r3, [r4, #0]
 80a353e:	4642      	mov	r2, r8
 80a3540:	702b      	strb	r3, [r5, #0]
 80a3542:	4630      	mov	r0, r6
 80a3544:	463b      	mov	r3, r7
 80a3546:	a908      	add	r1, sp, #32
 80a3548:	47c8      	blx	r9
}
 80a354a:	b00f      	add	sp, #60	; 0x3c
 80a354c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a3550:	4620      	mov	r0, r4
 80a3552:	e7fa      	b.n	80a354a <_ZN9TCPClient7connectEPKctm+0x5a>
 80a3554:	200007b8 	.word	0x200007b8
 80a3558:	080a7ee0 	.word	0x080a7ee0

080a355c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a355c:	b510      	push	{r4, lr}
 80a355e:	4604      	mov	r4, r0
{
	free(buffer);
 80a3560:	6800      	ldr	r0, [r0, #0]
 80a3562:	f7ff fc71 	bl	80a2e48 <free>
}
 80a3566:	4620      	mov	r0, r4
 80a3568:	bd10      	pop	{r4, pc}

080a356a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a356a:	b510      	push	{r4, lr}
 80a356c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a356e:	6800      	ldr	r0, [r0, #0]
 80a3570:	b108      	cbz	r0, 80a3576 <_ZN6String10invalidateEv+0xc>
 80a3572:	f7ff fc69 	bl	80a2e48 <free>
	buffer = NULL;
 80a3576:	2300      	movs	r3, #0
	capacity = len = 0;
 80a3578:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a357c:	6023      	str	r3, [r4, #0]
}
 80a357e:	bd10      	pop	{r4, pc}

080a3580 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a3580:	b538      	push	{r3, r4, r5, lr}
 80a3582:	4604      	mov	r4, r0
 80a3584:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3586:	6800      	ldr	r0, [r0, #0]
 80a3588:	3101      	adds	r1, #1
 80a358a:	f7ff fc65 	bl	80a2e58 <realloc>
	if (newbuffer) {
 80a358e:	b110      	cbz	r0, 80a3596 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3590:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a3594:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3596:	bd38      	pop	{r3, r4, r5, pc}

080a3598 <_ZN6String7reserveEj>:
{
 80a3598:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a359a:	6803      	ldr	r3, [r0, #0]
{
 80a359c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a359e:	b123      	cbz	r3, 80a35aa <_ZN6String7reserveEj+0x12>
 80a35a0:	6843      	ldr	r3, [r0, #4]
 80a35a2:	428b      	cmp	r3, r1
 80a35a4:	d301      	bcc.n	80a35aa <_ZN6String7reserveEj+0x12>
 80a35a6:	2001      	movs	r0, #1
}
 80a35a8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a35aa:	4620      	mov	r0, r4
 80a35ac:	f7ff ffe8 	bl	80a3580 <_ZN6String12changeBufferEj>
 80a35b0:	2800      	cmp	r0, #0
 80a35b2:	d0f9      	beq.n	80a35a8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a35b4:	68a3      	ldr	r3, [r4, #8]
 80a35b6:	2b00      	cmp	r3, #0
 80a35b8:	d1f5      	bne.n	80a35a6 <_ZN6String7reserveEj+0xe>
 80a35ba:	6822      	ldr	r2, [r4, #0]
 80a35bc:	7013      	strb	r3, [r2, #0]
 80a35be:	e7f2      	b.n	80a35a6 <_ZN6String7reserveEj+0xe>

080a35c0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a35c0:	b570      	push	{r4, r5, r6, lr}
 80a35c2:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a35c4:	4611      	mov	r1, r2
{
 80a35c6:	4604      	mov	r4, r0
 80a35c8:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a35ca:	f7ff ffe5 	bl	80a3598 <_ZN6String7reserveEj>
 80a35ce:	b920      	cbnz	r0, 80a35da <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a35d0:	4620      	mov	r0, r4
 80a35d2:	f7ff ffca 	bl	80a356a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a35d6:	4620      	mov	r0, r4
 80a35d8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a35da:	462a      	mov	r2, r5
 80a35dc:	4631      	mov	r1, r6
 80a35de:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a35e0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a35e2:	f001 fd07 	bl	80a4ff4 <memcpy>
	buffer[len] = 0;
 80a35e6:	2100      	movs	r1, #0
 80a35e8:	6822      	ldr	r2, [r4, #0]
 80a35ea:	68a3      	ldr	r3, [r4, #8]
 80a35ec:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a35ee:	e7f2      	b.n	80a35d6 <_ZN6String4copyEPKcj+0x16>

080a35f0 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a35f0:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a35f2:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a35f4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a35f6:	460d      	mov	r5, r1
	capacity = 0;
 80a35f8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a35fc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a35fe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a3600:	b139      	cbz	r1, 80a3612 <_ZN6StringC1EPKc+0x22>
 80a3602:	4608      	mov	r0, r1
 80a3604:	f001 fd3a 	bl	80a507c <strlen>
 80a3608:	4629      	mov	r1, r5
 80a360a:	4602      	mov	r2, r0
 80a360c:	4620      	mov	r0, r4
 80a360e:	f7ff ffd7 	bl	80a35c0 <_ZN6String4copyEPKcj>
}
 80a3612:	4620      	mov	r0, r4
 80a3614:	bd38      	pop	{r3, r4, r5, pc}

080a3616 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a3616:	b538      	push	{r3, r4, r5, lr}
 80a3618:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a361a:	460c      	mov	r4, r1
 80a361c:	b149      	cbz	r1, 80a3632 <_ZN6StringaSEPKc+0x1c>
 80a361e:	4608      	mov	r0, r1
 80a3620:	f001 fd2c 	bl	80a507c <strlen>
 80a3624:	4621      	mov	r1, r4
 80a3626:	4602      	mov	r2, r0
 80a3628:	4628      	mov	r0, r5
 80a362a:	f7ff ffc9 	bl	80a35c0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a362e:	4628      	mov	r0, r5
 80a3630:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a3632:	f7ff ff9a 	bl	80a356a <_ZN6String10invalidateEv>
 80a3636:	e7fa      	b.n	80a362e <_ZN6StringaSEPKc+0x18>

080a3638 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a3638:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a363a:	6882      	ldr	r2, [r0, #8]
 80a363c:	b93a      	cbnz	r2, 80a364e <_ZNK6String6equalsEPKc+0x16>
 80a363e:	b121      	cbz	r1, 80a364a <_ZNK6String6equalsEPKc+0x12>
 80a3640:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a3642:	fab0 f080 	clz	r0, r0
 80a3646:	0940      	lsrs	r0, r0, #5
 80a3648:	e000      	b.n	80a364c <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a364a:	2001      	movs	r0, #1
}
 80a364c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a364e:	6800      	ldr	r0, [r0, #0]
 80a3650:	b909      	cbnz	r1, 80a3656 <_ZNK6String6equalsEPKc+0x1e>
 80a3652:	7800      	ldrb	r0, [r0, #0]
 80a3654:	e7f5      	b.n	80a3642 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a3656:	f001 fd07 	bl	80a5068 <strcmp>
 80a365a:	e7f2      	b.n	80a3642 <_ZNK6String6equalsEPKc+0xa>

080a365c <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
 80a365c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80a365e:	6800      	ldr	r0, [r0, #0]
 80a3660:	b120      	cbz	r0, 80a366c <_ZNK6String7toFloatEv+0x10>
 80a3662:	f001 fcad 	bl	80a4fc0 <atof>
 80a3666:	f001 fc3d 	bl	80a4ee4 <__aeabi_d2f>
	return 0;
}
 80a366a:	bd08      	pop	{r3, pc}
	return 0;
 80a366c:	2000      	movs	r0, #0
 80a366e:	e7fc      	b.n	80a366a <_ZNK6String7toFloatEv+0xe>

080a3670 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3672:	4606      	mov	r6, r0
 80a3674:	460d      	mov	r5, r1
  size_t n = 0;
 80a3676:	2400      	movs	r4, #0
 80a3678:	188f      	adds	r7, r1, r2
  while (size--) {
 80a367a:	42bd      	cmp	r5, r7
 80a367c:	d00c      	beq.n	80a3698 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a367e:	6833      	ldr	r3, [r6, #0]
 80a3680:	4630      	mov	r0, r6
 80a3682:	689b      	ldr	r3, [r3, #8]
 80a3684:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3688:	4798      	blx	r3
     if (chunk>=0)
 80a368a:	1e03      	subs	r3, r0, #0
 80a368c:	db01      	blt.n	80a3692 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a368e:	441c      	add	r4, r3
  while (size--) {
 80a3690:	e7f3      	b.n	80a367a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a3692:	2c00      	cmp	r4, #0
 80a3694:	bf08      	it	eq
 80a3696:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3698:	4620      	mov	r0, r4
 80a369a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a369c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a369c:	b570      	push	{r4, r5, r6, lr}
 80a369e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a36a0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a36a2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a36a4:	b149      	cbz	r1, 80a36ba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a36a6:	f001 fce9 	bl	80a507c <strlen>
 80a36aa:	682b      	ldr	r3, [r5, #0]
 80a36ac:	4602      	mov	r2, r0
 80a36ae:	4621      	mov	r1, r4
 80a36b0:	4628      	mov	r0, r5
    }
 80a36b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a36b6:	68db      	ldr	r3, [r3, #12]
 80a36b8:	4718      	bx	r3
    }
 80a36ba:	bd70      	pop	{r4, r5, r6, pc}

080a36bc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a36bc:	b508      	push	{r3, lr}
  return write(str);
 80a36be:	f7ff ffed 	bl	80a369c <_ZN5Print5writeEPKc>
}
 80a36c2:	bd08      	pop	{r3, pc}

080a36c4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a36c4:	6803      	ldr	r3, [r0, #0]
 80a36c6:	689b      	ldr	r3, [r3, #8]
 80a36c8:	4718      	bx	r3

080a36ca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a36ca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a36cc:	210d      	movs	r1, #13
{
 80a36ce:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a36d0:	f7ff fff8 	bl	80a36c4 <_ZN5Print5printEc>
  n += print('\n');
 80a36d4:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a36d6:	4604      	mov	r4, r0
  n += print('\n');
 80a36d8:	4628      	mov	r0, r5
 80a36da:	f7ff fff3 	bl	80a36c4 <_ZN5Print5printEc>
  return n;
}
 80a36de:	4420      	add	r0, r4
 80a36e0:	bd38      	pop	{r3, r4, r5, pc}

080a36e2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a36e2:	b538      	push	{r3, r4, r5, lr}
 80a36e4:	4605      	mov	r5, r0
  return write(str);
 80a36e6:	f7ff ffd9 	bl	80a369c <_ZN5Print5writeEPKc>
 80a36ea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a36ec:	4628      	mov	r0, r5
 80a36ee:	f7ff ffec 	bl	80a36ca <_ZN5Print7printlnEv>
  return n;
}
 80a36f2:	4420      	add	r0, r4
 80a36f4:	bd38      	pop	{r3, r4, r5, pc}

080a36f6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a36f6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a36f8:	2a01      	cmp	r2, #1
 80a36fa:	bf98      	it	ls
 80a36fc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a36fe:	b530      	push	{r4, r5, lr}
 80a3700:	b08b      	sub	sp, #44	; 0x2c
 80a3702:	460c      	mov	r4, r1
  *str = '\0';
 80a3704:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a3708:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a370a:	4625      	mov	r5, r4
 80a370c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a3710:	fb04 5312 	mls	r3, r4, r2, r5
 80a3714:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3716:	2b09      	cmp	r3, #9
 80a3718:	bf94      	ite	ls
 80a371a:	3330      	addls	r3, #48	; 0x30
 80a371c:	3337      	addhi	r3, #55	; 0x37
 80a371e:	b2db      	uxtb	r3, r3
  } while(n);
 80a3720:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3722:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a3726:	d9f0      	bls.n	80a370a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a3728:	f7ff ffb8 	bl	80a369c <_ZN5Print5writeEPKc>
}
 80a372c:	b00b      	add	sp, #44	; 0x2c
 80a372e:	bd30      	pop	{r4, r5, pc}

080a3730 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3734:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3736:	4619      	mov	r1, r3
 80a3738:	4610      	mov	r0, r2
{
 80a373a:	4692      	mov	sl, r2
 80a373c:	461f      	mov	r7, r3
 80a373e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a3742:	f001 fb71 	bl	80a4e28 <__aeabi_dcmpun>
 80a3746:	b140      	cbz	r0, 80a375a <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a3748:	4950      	ldr	r1, [pc, #320]	; (80a388c <_ZN5Print10printFloatEdh+0x15c>)
 80a374a:	4628      	mov	r0, r5
 80a374c:	f7ff ffa6 	bl	80a369c <_ZN5Print5writeEPKc>
 80a3750:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a3752:	4620      	mov	r0, r4
 80a3754:	b003      	add	sp, #12
 80a3756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a375a:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a375e:	f04f 32ff 	mov.w	r2, #4294967295
 80a3762:	4650      	mov	r0, sl
 80a3764:	4621      	mov	r1, r4
 80a3766:	4b4a      	ldr	r3, [pc, #296]	; (80a3890 <_ZN5Print10printFloatEdh+0x160>)
 80a3768:	f001 fb5e 	bl	80a4e28 <__aeabi_dcmpun>
 80a376c:	b948      	cbnz	r0, 80a3782 <_ZN5Print10printFloatEdh+0x52>
 80a376e:	f04f 32ff 	mov.w	r2, #4294967295
 80a3772:	4650      	mov	r0, sl
 80a3774:	4621      	mov	r1, r4
 80a3776:	4b46      	ldr	r3, [pc, #280]	; (80a3890 <_ZN5Print10printFloatEdh+0x160>)
 80a3778:	f001 fb38 	bl	80a4dec <__aeabi_dcmple>
 80a377c:	b908      	cbnz	r0, 80a3782 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a377e:	4945      	ldr	r1, [pc, #276]	; (80a3894 <_ZN5Print10printFloatEdh+0x164>)
 80a3780:	e7e3      	b.n	80a374a <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a3782:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3786:	4650      	mov	r0, sl
 80a3788:	4639      	mov	r1, r7
 80a378a:	4b43      	ldr	r3, [pc, #268]	; (80a3898 <_ZN5Print10printFloatEdh+0x168>)
 80a378c:	f001 fb42 	bl	80a4e14 <__aeabi_dcmpgt>
 80a3790:	b108      	cbz	r0, 80a3796 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a3792:	4942      	ldr	r1, [pc, #264]	; (80a389c <_ZN5Print10printFloatEdh+0x16c>)
 80a3794:	e7d9      	b.n	80a374a <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a3796:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a379a:	4650      	mov	r0, sl
 80a379c:	4639      	mov	r1, r7
 80a379e:	4b40      	ldr	r3, [pc, #256]	; (80a38a0 <_ZN5Print10printFloatEdh+0x170>)
 80a37a0:	f001 fb1a 	bl	80a4dd8 <__aeabi_dcmplt>
 80a37a4:	2800      	cmp	r0, #0
 80a37a6:	d1f4      	bne.n	80a3792 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a37a8:	2200      	movs	r2, #0
 80a37aa:	2300      	movs	r3, #0
 80a37ac:	4650      	mov	r0, sl
 80a37ae:	4639      	mov	r1, r7
 80a37b0:	f001 fb12 	bl	80a4dd8 <__aeabi_dcmplt>
 80a37b4:	4604      	mov	r4, r0
 80a37b6:	b130      	cbz	r0, 80a37c6 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a37b8:	212d      	movs	r1, #45	; 0x2d
 80a37ba:	4628      	mov	r0, r5
 80a37bc:	f7ff ff82 	bl	80a36c4 <_ZN5Print5printEc>
 80a37c0:	4604      	mov	r4, r0
     number = -number;
 80a37c2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a37c6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a37ca:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a37cc:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a37d0:	4934      	ldr	r1, [pc, #208]	; (80a38a4 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a37d2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a38ac <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a37d6:	fa5f f38b 	uxtb.w	r3, fp
 80a37da:	429e      	cmp	r6, r3
 80a37dc:	d906      	bls.n	80a37ec <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a37de:	4642      	mov	r2, r8
 80a37e0:	464b      	mov	r3, r9
 80a37e2:	f001 f9b1 	bl	80a4b48 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a37e6:	f10b 0b01 	add.w	fp, fp, #1
 80a37ea:	e7f4      	b.n	80a37d6 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a37ec:	463b      	mov	r3, r7
 80a37ee:	4652      	mov	r2, sl
 80a37f0:	f000 feca 	bl	80a4588 <__adddf3>
 80a37f4:	4689      	mov	r9, r1
 80a37f6:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a37f8:	f001 fb54 	bl	80a4ea4 <__aeabi_d2uiz>
 80a37fc:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a37fe:	f000 ffff 	bl	80a4800 <__aeabi_ui2d>
 80a3802:	4602      	mov	r2, r0
 80a3804:	460b      	mov	r3, r1
 80a3806:	4640      	mov	r0, r8
 80a3808:	4649      	mov	r1, r9
 80a380a:	f000 febb 	bl	80a4584 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a380e:	220a      	movs	r2, #10
 80a3810:	4680      	mov	r8, r0
 80a3812:	4689      	mov	r9, r1
 80a3814:	4628      	mov	r0, r5
 80a3816:	4639      	mov	r1, r7
 80a3818:	f7ff ff6d 	bl	80a36f6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a381c:	4404      	add	r4, r0
  if (digits > 0) {
 80a381e:	b126      	cbz	r6, 80a382a <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a3820:	4628      	mov	r0, r5
 80a3822:	4921      	ldr	r1, [pc, #132]	; (80a38a8 <_ZN5Print10printFloatEdh+0x178>)
 80a3824:	f7ff ff3a 	bl	80a369c <_ZN5Print5writeEPKc>
    n += print(".");
 80a3828:	4404      	add	r4, r0
    remainder *= 10.0;
 80a382a:	f04f 0a00 	mov.w	sl, #0
 80a382e:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a38ac <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a3832:	3e01      	subs	r6, #1
 80a3834:	b2f6      	uxtb	r6, r6
 80a3836:	2eff      	cmp	r6, #255	; 0xff
 80a3838:	d08b      	beq.n	80a3752 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a383a:	4652      	mov	r2, sl
 80a383c:	465b      	mov	r3, fp
 80a383e:	4640      	mov	r0, r8
 80a3840:	4649      	mov	r1, r9
 80a3842:	f001 f857 	bl	80a48f4 <__aeabi_dmul>
 80a3846:	4680      	mov	r8, r0
 80a3848:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a384a:	f001 fb03 	bl	80a4e54 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a384e:	1e07      	subs	r7, r0, #0
 80a3850:	da19      	bge.n	80a3886 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a3852:	212d      	movs	r1, #45	; 0x2d
 80a3854:	4628      	mov	r0, r5
 80a3856:	f7ff ff35 	bl	80a36c4 <_ZN5Print5printEc>
 80a385a:	4603      	mov	r3, r0
            val = -n;
 80a385c:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a385e:	220a      	movs	r2, #10
 80a3860:	4628      	mov	r0, r5
 80a3862:	9301      	str	r3, [sp, #4]
 80a3864:	f7ff ff47 	bl	80a36f6 <_ZN5Print11printNumberEmh>
 80a3868:	9b01      	ldr	r3, [sp, #4]
 80a386a:	4403      	add	r3, r0
    remainder -= toPrint;
 80a386c:	4638      	mov	r0, r7
    n += print(toPrint);
 80a386e:	441c      	add	r4, r3
    remainder -= toPrint;
 80a3870:	f000 ffd6 	bl	80a4820 <__aeabi_i2d>
 80a3874:	4602      	mov	r2, r0
 80a3876:	460b      	mov	r3, r1
 80a3878:	4640      	mov	r0, r8
 80a387a:	4649      	mov	r1, r9
 80a387c:	f000 fe82 	bl	80a4584 <__aeabi_dsub>
 80a3880:	4680      	mov	r8, r0
 80a3882:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a3884:	e7d5      	b.n	80a3832 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a3886:	4639      	mov	r1, r7
        size_t t = 0;
 80a3888:	2300      	movs	r3, #0
 80a388a:	e7e8      	b.n	80a385e <_ZN5Print10printFloatEdh+0x12e>
 80a388c:	080a7ea8 	.word	0x080a7ea8
 80a3890:	7fefffff 	.word	0x7fefffff
 80a3894:	080a7eac 	.word	0x080a7eac
 80a3898:	41efffff 	.word	0x41efffff
 80a389c:	080a7eb0 	.word	0x080a7eb0
 80a38a0:	c1efffff 	.word	0xc1efffff
 80a38a4:	3fe00000 	.word	0x3fe00000
 80a38a8:	080a7eb4 	.word	0x080a7eb4
 80a38ac:	40240000 	.word	0x40240000

080a38b0 <_ZN5Print7printlnEdi>:
{
 80a38b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a38b2:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a38b6:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a38b8:	9100      	str	r1, [sp, #0]
 80a38ba:	f7ff ff39 	bl	80a3730 <_ZN5Print10printFloatEdh>
 80a38be:	4604      	mov	r4, r0
  n += println();
 80a38c0:	4628      	mov	r0, r5
 80a38c2:	f7ff ff02 	bl	80a36ca <_ZN5Print7printlnEv>
}
 80a38c6:	4420      	add	r0, r4
 80a38c8:	b003      	add	sp, #12
 80a38ca:	bd30      	pop	{r4, r5, pc}

080a38cc <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a38cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a38d0:	b086      	sub	sp, #24
 80a38d2:	af00      	add	r7, sp, #0
 80a38d4:	4605      	mov	r5, r0
 80a38d6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a38d8:	1d38      	adds	r0, r7, #4
 80a38da:	2114      	movs	r1, #20
{
 80a38dc:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a38de:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a38e0:	f7ff faca 	bl	80a2e78 <vsnprintf>

    if (n<bufsize)
 80a38e4:	2813      	cmp	r0, #19
 80a38e6:	d80e      	bhi.n	80a3906 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a38e8:	4628      	mov	r0, r5
 80a38ea:	1d39      	adds	r1, r7, #4
 80a38ec:	f7ff fed6 	bl	80a369c <_ZN5Print5writeEPKc>
 80a38f0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a38f2:	b11e      	cbz	r6, 80a38fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a38f4:	4628      	mov	r0, r5
 80a38f6:	f7ff fee8 	bl	80a36ca <_ZN5Print7printlnEv>
 80a38fa:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a38fc:	4620      	mov	r0, r4
 80a38fe:	3718      	adds	r7, #24
 80a3900:	46bd      	mov	sp, r7
 80a3902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a3906:	f100 0308 	add.w	r3, r0, #8
 80a390a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a390e:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a3910:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a3914:	4622      	mov	r2, r4
 80a3916:	1c41      	adds	r1, r0, #1
 80a3918:	683b      	ldr	r3, [r7, #0]
 80a391a:	4668      	mov	r0, sp
 80a391c:	f7ff faac 	bl	80a2e78 <vsnprintf>
  return write(str);
 80a3920:	4669      	mov	r1, sp
 80a3922:	4628      	mov	r0, r5
 80a3924:	f7ff feba 	bl	80a369c <_ZN5Print5writeEPKc>
 80a3928:	4604      	mov	r4, r0
 80a392a:	46c5      	mov	sp, r8
 80a392c:	e7e1      	b.n	80a38f2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a392e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80a392e:	b510      	push	{r4, lr}
 80a3930:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a3932:	f7ff f833 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80a3936:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80a3938:	6823      	ldr	r3, [r4, #0]
 80a393a:	4620      	mov	r0, r4
 80a393c:	695b      	ldr	r3, [r3, #20]
 80a393e:	4798      	blx	r3
    if (c >= 0) return c;
 80a3940:	2800      	cmp	r0, #0
 80a3942:	da08      	bge.n	80a3956 <_ZN6Stream9timedReadEv+0x28>
 80a3944:	f7ff f82a 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 80a3948:	68e3      	ldr	r3, [r4, #12]
 80a394a:	1ac0      	subs	r0, r0, r3
 80a394c:	68a3      	ldr	r3, [r4, #8]
 80a394e:	4298      	cmp	r0, r3
 80a3950:	d3f2      	bcc.n	80a3938 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 80a3952:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a3956:	bd10      	pop	{r4, pc}

080a3958 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 80a3958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a395a:	4606      	mov	r6, r0
 80a395c:	460d      	mov	r5, r1
 80a395e:	4617      	mov	r7, r2
  size_t count = 0;
 80a3960:	2400      	movs	r4, #0
  while (count < length) {
 80a3962:	42bc      	cmp	r4, r7
 80a3964:	d007      	beq.n	80a3976 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
 80a3966:	4630      	mov	r0, r6
 80a3968:	f7ff ffe1 	bl	80a392e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 80a396c:	1e03      	subs	r3, r0, #0
 80a396e:	db02      	blt.n	80a3976 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
 80a3970:	552b      	strb	r3, [r5, r4]
    count++;
 80a3972:	3401      	adds	r4, #1
  while (count < length) {
 80a3974:	e7f5      	b.n	80a3962 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
 80a3976:	4620      	mov	r0, r4
 80a3978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a397a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a397a:	2300      	movs	r3, #0
 80a397c:	6840      	ldr	r0, [r0, #4]
 80a397e:	461a      	mov	r2, r3
 80a3980:	4619      	mov	r1, r3
 80a3982:	f7ff ba01 	b.w	80a2d88 <network_on>
	...

080a3988 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3988:	4b01      	ldr	r3, [pc, #4]	; (80a3990 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a398a:	4a02      	ldr	r2, [pc, #8]	; (80a3994 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a398c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a398e:	4770      	bx	lr
 80a3990:	2000033c 	.word	0x2000033c
 80a3994:	080a7eb6 	.word	0x080a7eb6

080a3998 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3998:	4b02      	ldr	r3, [pc, #8]	; (80a39a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a399a:	681a      	ldr	r2, [r3, #0]
 80a399c:	4b02      	ldr	r3, [pc, #8]	; (80a39a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a399e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a39a0:	4770      	bx	lr
 80a39a2:	bf00      	nop
 80a39a4:	20000000 	.word	0x20000000
 80a39a8:	20000340 	.word	0x20000340

080a39ac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a39ac:	2100      	movs	r1, #0
 80a39ae:	f7ff b9a7 	b.w	80a2d00 <system_delay_ms>

080a39b2 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a39b2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a39b4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a39b6:	4604      	mov	r4, r0
      if (_M_manager)
 80a39b8:	b113      	cbz	r3, 80a39c0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a39ba:	2203      	movs	r2, #3
 80a39bc:	4601      	mov	r1, r0
 80a39be:	4798      	blx	r3
    }
 80a39c0:	4620      	mov	r0, r4
 80a39c2:	bd10      	pop	{r4, pc}

080a39c4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a39c4:	b510      	push	{r4, lr}
 80a39c6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a39c8:	f7ff fff3 	bl	80a39b2 <_ZNSt14_Function_baseD1Ev>
 80a39cc:	4620      	mov	r0, r4
 80a39ce:	bd10      	pop	{r4, pc}

080a39d0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a39d0:	2300      	movs	r3, #0
 80a39d2:	4803      	ldr	r0, [pc, #12]	; (80a39e0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a39d4:	4a03      	ldr	r2, [pc, #12]	; (80a39e4 <_GLOBAL__sub_I_RGB+0x14>)
 80a39d6:	4904      	ldr	r1, [pc, #16]	; (80a39e8 <_GLOBAL__sub_I_RGB+0x18>)
 80a39d8:	6083      	str	r3, [r0, #8]
 80a39da:	f000 bcb1 	b.w	80a4340 <__aeabi_atexit>
 80a39de:	bf00      	nop
 80a39e0:	20000344 	.word	0x20000344
 80a39e4:	200001d8 	.word	0x200001d8
 80a39e8:	080a39c5 	.word	0x080a39c5

080a39ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a39ec:	4b01      	ldr	r3, [pc, #4]	; (80a39f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a39ee:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a39f0:	4770      	bx	lr
 80a39f2:	bf00      	nop
 80a39f4:	20000004 	.word	0x20000004

080a39f8 <serialEventRun>:
{
 80a39f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a39fa:	4b13      	ldr	r3, [pc, #76]	; (80a3a48 <serialEventRun+0x50>)
 80a39fc:	b143      	cbz	r3, 80a3a10 <serialEventRun+0x18>
 80a39fe:	f000 f97d 	bl	80a3cfc <_Z16_fetch_usbserialv>
 80a3a02:	6803      	ldr	r3, [r0, #0]
 80a3a04:	691b      	ldr	r3, [r3, #16]
 80a3a06:	4798      	blx	r3
 80a3a08:	2800      	cmp	r0, #0
 80a3a0a:	dd01      	ble.n	80a3a10 <serialEventRun+0x18>
        serialEvent();
 80a3a0c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a3a10:	4b0e      	ldr	r3, [pc, #56]	; (80a3a4c <serialEventRun+0x54>)
 80a3a12:	b143      	cbz	r3, 80a3a26 <serialEventRun+0x2e>
 80a3a14:	f000 fa2a 	bl	80a3e6c <_Z22__fetch_global_Serial1v>
 80a3a18:	6803      	ldr	r3, [r0, #0]
 80a3a1a:	691b      	ldr	r3, [r3, #16]
 80a3a1c:	4798      	blx	r3
 80a3a1e:	2800      	cmp	r0, #0
 80a3a20:	dd01      	ble.n	80a3a26 <serialEventRun+0x2e>
        serialEvent1();
 80a3a22:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a3a26:	4b0a      	ldr	r3, [pc, #40]	; (80a3a50 <serialEventRun+0x58>)
 80a3a28:	b10b      	cbz	r3, 80a3a2e <serialEventRun+0x36>
 80a3a2a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3a2e:	4b09      	ldr	r3, [pc, #36]	; (80a3a54 <serialEventRun+0x5c>)
 80a3a30:	b143      	cbz	r3, 80a3a44 <serialEventRun+0x4c>
 80a3a32:	f000 f9a1 	bl	80a3d78 <_Z17_fetch_usbserial1v>
 80a3a36:	6803      	ldr	r3, [r0, #0]
 80a3a38:	691b      	ldr	r3, [r3, #16]
 80a3a3a:	4798      	blx	r3
 80a3a3c:	2800      	cmp	r0, #0
 80a3a3e:	dd01      	ble.n	80a3a44 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a3a40:	f3af 8000 	nop.w
}
 80a3a44:	bd08      	pop	{r3, pc}
 80a3a46:	bf00      	nop
	...

080a3a58 <_post_loop>:
{
 80a3a58:	b508      	push	{r3, lr}
	serialEventRun();
 80a3a5a:	f7ff ffcd 	bl	80a39f8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3a5e:	f7fe ff9d 	bl	80a299c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3a62:	4b01      	ldr	r3, [pc, #4]	; (80a3a68 <_post_loop+0x10>)
 80a3a64:	6018      	str	r0, [r3, #0]
}
 80a3a66:	bd08      	pop	{r3, pc}
 80a3a68:	200007c0 	.word	0x200007c0

080a3a6c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3a6c:	4802      	ldr	r0, [pc, #8]	; (80a3a78 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a3a6e:	4a03      	ldr	r2, [pc, #12]	; (80a3a7c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3a70:	4903      	ldr	r1, [pc, #12]	; (80a3a80 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a3a72:	1a12      	subs	r2, r2, r0
 80a3a74:	f001 babe 	b.w	80a4ff4 <memcpy>
 80a3a78:	40024000 	.word	0x40024000
 80a3a7c:	40024004 	.word	0x40024004
 80a3a80:	080a8370 	.word	0x080a8370

080a3a84 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3a84:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a3a86:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3a88:	461a      	mov	r2, r3
 80a3a8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3a8e:	9300      	str	r3, [sp, #0]
 80a3a90:	f7ff f950 	bl	80a2d34 <system_ctrl_set_result>
}
 80a3a94:	b003      	add	sp, #12
 80a3a96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3a9c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a3a9c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3a9e:	8843      	ldrh	r3, [r0, #2]
 80a3aa0:	2b0a      	cmp	r3, #10
 80a3aa2:	d008      	beq.n	80a3ab6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3aa4:	2b50      	cmp	r3, #80	; 0x50
 80a3aa6:	d10b      	bne.n	80a3ac0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a3aa8:	4b09      	ldr	r3, [pc, #36]	; (80a3ad0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3aaa:	681b      	ldr	r3, [r3, #0]
 80a3aac:	b14b      	cbz	r3, 80a3ac2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a3aae:	b003      	add	sp, #12
 80a3ab0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a3ab4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a3ab6:	f7ff ffe5 	bl	80a3a84 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a3aba:	b003      	add	sp, #12
 80a3abc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3ac0:	2300      	movs	r3, #0
 80a3ac2:	461a      	mov	r2, r3
 80a3ac4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3ac8:	9300      	str	r3, [sp, #0]
 80a3aca:	f7ff f933 	bl	80a2d34 <system_ctrl_set_result>
}
 80a3ace:	e7f4      	b.n	80a3aba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a3ad0:	20000358 	.word	0x20000358

080a3ad4 <module_user_init_hook>:
{
 80a3ad4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3ad6:	4c12      	ldr	r4, [pc, #72]	; (80a3b20 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a3ad8:	2100      	movs	r1, #0
 80a3ada:	4812      	ldr	r0, [pc, #72]	; (80a3b24 <module_user_init_hook+0x50>)
 80a3adc:	f7ff f9dc 	bl	80a2e98 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3ae0:	4d11      	ldr	r5, [pc, #68]	; (80a3b28 <module_user_init_hook+0x54>)
 80a3ae2:	6823      	ldr	r3, [r4, #0]
 80a3ae4:	42ab      	cmp	r3, r5
 80a3ae6:	bf0c      	ite	eq
 80a3ae8:	2201      	moveq	r2, #1
 80a3aea:	2200      	movne	r2, #0
 80a3aec:	4b0f      	ldr	r3, [pc, #60]	; (80a3b2c <module_user_init_hook+0x58>)
 80a3aee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3af0:	d002      	beq.n	80a3af8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a3af2:	f7ff ffbb 	bl	80a3a6c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3af6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3af8:	f7fe ff40 	bl	80a297c <HAL_RNG_GetRandomNumber>
 80a3afc:	4604      	mov	r4, r0
    srand(seed);
 80a3afe:	f001 fa8f 	bl	80a5020 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3b02:	4b0b      	ldr	r3, [pc, #44]	; (80a3b30 <module_user_init_hook+0x5c>)
 80a3b04:	b113      	cbz	r3, 80a3b0c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a3b06:	4620      	mov	r0, r4
 80a3b08:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3b0c:	2100      	movs	r1, #0
 80a3b0e:	4808      	ldr	r0, [pc, #32]	; (80a3b30 <module_user_init_hook+0x5c>)
 80a3b10:	f7ff f98a 	bl	80a2e28 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3b18:	2100      	movs	r1, #0
 80a3b1a:	4806      	ldr	r0, [pc, #24]	; (80a3b34 <module_user_init_hook+0x60>)
 80a3b1c:	f7ff b900 	b.w	80a2d20 <system_ctrl_set_app_request_handler>
 80a3b20:	40024000 	.word	0x40024000
 80a3b24:	080a39ed 	.word	0x080a39ed
 80a3b28:	9a271c1e 	.word	0x9a271c1e
 80a3b2c:	20000354 	.word	0x20000354
 80a3b30:	00000000 	.word	0x00000000
 80a3b34:	080a3a9d 	.word	0x080a3a9d

080a3b38 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 80a3b38:	4770      	bx	lr

080a3b3a <_ZN9IPAddressD0Ev>:
 80a3b3a:	b510      	push	{r4, lr}
 80a3b3c:	4604      	mov	r4, r0
 80a3b3e:	2118      	movs	r1, #24
 80a3b40:	f000 fc03 	bl	80a434a <_ZdlPvj>
 80a3b44:	4620      	mov	r0, r4
 80a3b46:	bd10      	pop	{r4, pc}

080a3b48 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3b4a:	460e      	mov	r6, r1
 80a3b4c:	2400      	movs	r4, #0
 80a3b4e:	f100 0708 	add.w	r7, r0, #8
 80a3b52:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a3b54:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a3b58:	220a      	movs	r2, #10
 80a3b5a:	4630      	mov	r0, r6
 80a3b5c:	f7ff fdcb 	bl	80a36f6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3b60:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3b62:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a3b64:	d101      	bne.n	80a3b6a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a3b66:	4620      	mov	r0, r4
 80a3b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a3b6a:	2c00      	cmp	r4, #0
 80a3b6c:	d0f2      	beq.n	80a3b54 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3b6e:	212e      	movs	r1, #46	; 0x2e
 80a3b70:	4630      	mov	r0, r6
 80a3b72:	f7ff fda7 	bl	80a36c4 <_ZN5Print5printEc>
 80a3b76:	4404      	add	r4, r0
 80a3b78:	e7ec      	b.n	80a3b54 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a3b7c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a3b7c:	b510      	push	{r4, lr}
 80a3b7e:	4604      	mov	r4, r0
 80a3b80:	4b04      	ldr	r3, [pc, #16]	; (80a3b94 <_ZN9IPAddressC1Ev+0x18>)
    void clear() { memset(&address, 0, sizeof (address)); }
 80a3b82:	2211      	movs	r2, #17
 80a3b84:	2100      	movs	r1, #0
 80a3b86:	f840 3b04 	str.w	r3, [r0], #4
 80a3b8a:	f001 fa41 	bl	80a5010 <memset>
}
 80a3b8e:	4620      	mov	r0, r4
 80a3b90:	bd10      	pop	{r4, pc}
 80a3b92:	bf00      	nop
 80a3b94:	080a7ee0 	.word	0x080a7ee0

080a3b98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a3b98:	4603      	mov	r3, r0
 80a3b9a:	4a07      	ldr	r2, [pc, #28]	; (80a3bb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3b9c:	b510      	push	{r4, lr}
 80a3b9e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a3ba2:	f101 0210 	add.w	r2, r1, #16
 80a3ba6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a3baa:	4291      	cmp	r1, r2
 80a3bac:	f843 4b04 	str.w	r4, [r3], #4
 80a3bb0:	d1f9      	bne.n	80a3ba6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a3bb2:	780a      	ldrb	r2, [r1, #0]
 80a3bb4:	701a      	strb	r2, [r3, #0]
}
 80a3bb6:	bd10      	pop	{r4, pc}
 80a3bb8:	080a7ee0 	.word	0x080a7ee0

080a3bbc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a3bbc:	4a02      	ldr	r2, [pc, #8]	; (80a3bc8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a3bbe:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a3bc2:	2204      	movs	r2, #4
 80a3bc4:	7502      	strb	r2, [r0, #20]
}
 80a3bc6:	4770      	bx	lr
 80a3bc8:	080a7ee0 	.word	0x080a7ee0

080a3bcc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a3bcc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3bce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3bd2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a3bd6:	2304      	movs	r3, #4
 80a3bd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a3bdc:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a3be0:	6044      	str	r4, [r0, #4]
 80a3be2:	7503      	strb	r3, [r0, #20]
}
 80a3be4:	bd10      	pop	{r4, pc}
	...

080a3be8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a3be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3bea:	4d04      	ldr	r5, [pc, #16]	; (80a3bfc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3bec:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3bee:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a3bf2:	9500      	str	r5, [sp, #0]
 80a3bf4:	f7ff ffea 	bl	80a3bcc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a3bf8:	b003      	add	sp, #12
 80a3bfa:	bd30      	pop	{r4, r5, pc}
 80a3bfc:	080a7ee0 	.word	0x080a7ee0

080a3c00 <_ZN9IPAddressaSEPKh>:
{
 80a3c00:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a3c02:	78cb      	ldrb	r3, [r1, #3]
 80a3c04:	9300      	str	r3, [sp, #0]
 80a3c06:	788b      	ldrb	r3, [r1, #2]
 80a3c08:	784a      	ldrb	r2, [r1, #1]
 80a3c0a:	7809      	ldrb	r1, [r1, #0]
 80a3c0c:	f7ff ffde 	bl	80a3bcc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a3c10:	b002      	add	sp, #8
 80a3c12:	bd10      	pop	{r4, pc}

080a3c14 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
 80a3c14:	b510      	push	{r4, lr}
 80a3c16:	4604      	mov	r4, r0
 80a3c18:	4b02      	ldr	r3, [pc, #8]	; (80a3c24 <_ZN9IPAddressC1EPKh+0x10>)
 80a3c1a:	6003      	str	r3, [r0, #0]
    *this = address;
 80a3c1c:	f7ff fff0 	bl	80a3c00 <_ZN9IPAddressaSEPKh>
}
 80a3c20:	4620      	mov	r0, r4
 80a3c22:	bd10      	pop	{r4, pc}
 80a3c24:	080a7ee0 	.word	0x080a7ee0

080a3c28 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3c28:	7441      	strb	r1, [r0, #17]
}
 80a3c2a:	4770      	bx	lr

080a3c2c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3c2c:	4770      	bx	lr

080a3c2e <_ZN9USBSerial4readEv>:
{
 80a3c2e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3c30:	2100      	movs	r1, #0
 80a3c32:	7c00      	ldrb	r0, [r0, #16]
 80a3c34:	f7ff f824 	bl	80a2c80 <HAL_USB_USART_Receive_Data>
}
 80a3c38:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3c3c:	bd08      	pop	{r3, pc}

080a3c3e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a3c3e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3c40:	2101      	movs	r1, #1
 80a3c42:	7c00      	ldrb	r0, [r0, #16]
 80a3c44:	f7ff f81c 	bl	80a2c80 <HAL_USB_USART_Receive_Data>
}
 80a3c48:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3c4c:	bd08      	pop	{r3, pc}

080a3c4e <_ZN9USBSerial17availableForWriteEv>:
{
 80a3c4e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3c50:	7c00      	ldrb	r0, [r0, #16]
 80a3c52:	f7ff f80d 	bl	80a2c70 <HAL_USB_USART_Available_Data_For_Write>
}
 80a3c56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3c5a:	bd08      	pop	{r3, pc}

080a3c5c <_ZN9USBSerial9availableEv>:
{
 80a3c5c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3c5e:	7c00      	ldrb	r0, [r0, #16]
 80a3c60:	f7fe fffe 	bl	80a2c60 <HAL_USB_USART_Available_Data>
}
 80a3c64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3c68:	bd08      	pop	{r3, pc}

080a3c6a <_ZN9USBSerial5writeEh>:
{
 80a3c6a:	b538      	push	{r3, r4, r5, lr}
 80a3c6c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3c6e:	7c00      	ldrb	r0, [r0, #16]
{
 80a3c70:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3c72:	f7fe fffd 	bl	80a2c70 <HAL_USB_USART_Available_Data_For_Write>
 80a3c76:	2800      	cmp	r0, #0
 80a3c78:	dc01      	bgt.n	80a3c7e <_ZN9USBSerial5writeEh+0x14>
 80a3c7a:	7c60      	ldrb	r0, [r4, #17]
 80a3c7c:	b128      	cbz	r0, 80a3c8a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3c7e:	4629      	mov	r1, r5
 80a3c80:	7c20      	ldrb	r0, [r4, #16]
 80a3c82:	f7ff f805 	bl	80a2c90 <HAL_USB_USART_Send_Data>
 80a3c86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a3c8a:	bd38      	pop	{r3, r4, r5, pc}

080a3c8c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a3c8c:	7c00      	ldrb	r0, [r0, #16]
 80a3c8e:	f7ff b807 	b.w	80a2ca0 <HAL_USB_USART_Flush_Data>

080a3c92 <_ZN9USBSerialD0Ev>:
 80a3c92:	b510      	push	{r4, lr}
 80a3c94:	4604      	mov	r4, r0
 80a3c96:	2114      	movs	r1, #20
 80a3c98:	f000 fb57 	bl	80a434a <_ZdlPvj>
 80a3c9c:	4620      	mov	r0, r4
 80a3c9e:	bd10      	pop	{r4, pc}

080a3ca0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3ca0:	b510      	push	{r4, lr}
 80a3ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3ca6:	4604      	mov	r4, r0
 80a3ca8:	4608      	mov	r0, r1
 80a3caa:	2100      	movs	r1, #0
 80a3cac:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3cb0:	4b04      	ldr	r3, [pc, #16]	; (80a3cc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a3cb2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3cb4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a3cb6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a3cb8:	4611      	mov	r1, r2
  _blocking = true;
 80a3cba:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a3cbc:	f7fe ffc0 	bl	80a2c40 <HAL_USB_USART_Init>
}
 80a3cc0:	4620      	mov	r0, r4
 80a3cc2:	bd10      	pop	{r4, pc}
 80a3cc4:	080a7ef4 	.word	0x080a7ef4

080a3cc8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3cc8:	2200      	movs	r2, #0
 80a3cca:	7c00      	ldrb	r0, [r0, #16]
 80a3ccc:	f7fe bfc0 	b.w	80a2c50 <HAL_USB_USART_Begin>

080a3cd0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3cd0:	b510      	push	{r4, lr}
 80a3cd2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3cd4:	2214      	movs	r2, #20
 80a3cd6:	2100      	movs	r1, #0
 80a3cd8:	f001 f99a 	bl	80a5010 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3cdc:	4b05      	ldr	r3, [pc, #20]	; (80a3cf4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3cde:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a3ce0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3ce2:	4b05      	ldr	r3, [pc, #20]	; (80a3cf8 <_Z19acquireSerialBufferv+0x28>)
 80a3ce4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3ce6:	f240 1301 	movw	r3, #257	; 0x101
 80a3cea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3cec:	2381      	movs	r3, #129	; 0x81
 80a3cee:	8223      	strh	r3, [r4, #16]
}
 80a3cf0:	bd10      	pop	{r4, pc}
 80a3cf2:	bf00      	nop
 80a3cf4:	2000038c 	.word	0x2000038c
 80a3cf8:	2000048d 	.word	0x2000048d

080a3cfc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3cfc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3cfe:	4d0f      	ldr	r5, [pc, #60]	; (80a3d3c <_Z16_fetch_usbserialv+0x40>)
{
 80a3d00:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3d02:	a801      	add	r0, sp, #4
 80a3d04:	f7ff ffe4 	bl	80a3cd0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3d08:	7829      	ldrb	r1, [r5, #0]
 80a3d0a:	f3bf 8f5b 	dmb	ish
 80a3d0e:	f011 0401 	ands.w	r4, r1, #1
 80a3d12:	d110      	bne.n	80a3d36 <_Z16_fetch_usbserialv+0x3a>
 80a3d14:	4628      	mov	r0, r5
 80a3d16:	f7fc f9d3 	bl	80a00c0 <__cxa_guard_acquire>
 80a3d1a:	b160      	cbz	r0, 80a3d36 <_Z16_fetch_usbserialv+0x3a>
 80a3d1c:	4621      	mov	r1, r4
 80a3d1e:	aa01      	add	r2, sp, #4
 80a3d20:	4807      	ldr	r0, [pc, #28]	; (80a3d40 <_Z16_fetch_usbserialv+0x44>)
 80a3d22:	f7ff ffbd 	bl	80a3ca0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3d26:	4628      	mov	r0, r5
 80a3d28:	f7fc f9cf 	bl	80a00ca <__cxa_guard_release>
 80a3d2c:	4a05      	ldr	r2, [pc, #20]	; (80a3d44 <_Z16_fetch_usbserialv+0x48>)
 80a3d2e:	4906      	ldr	r1, [pc, #24]	; (80a3d48 <_Z16_fetch_usbserialv+0x4c>)
 80a3d30:	4803      	ldr	r0, [pc, #12]	; (80a3d40 <_Z16_fetch_usbserialv+0x44>)
 80a3d32:	f000 fb05 	bl	80a4340 <__aeabi_atexit>
	return _usbserial;
}
 80a3d36:	4802      	ldr	r0, [pc, #8]	; (80a3d40 <_Z16_fetch_usbserialv+0x44>)
 80a3d38:	b007      	add	sp, #28
 80a3d3a:	bd30      	pop	{r4, r5, pc}
 80a3d3c:	2000035c 	.word	0x2000035c
 80a3d40:	20000364 	.word	0x20000364
 80a3d44:	200001d8 	.word	0x200001d8
 80a3d48:	080a3c2d 	.word	0x080a3c2d

080a3d4c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3d4c:	b510      	push	{r4, lr}
 80a3d4e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3d50:	2214      	movs	r2, #20
 80a3d52:	2100      	movs	r1, #0
 80a3d54:	f001 f95c 	bl	80a5010 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3d58:	4b05      	ldr	r3, [pc, #20]	; (80a3d70 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3d5a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a3d5c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3d5e:	4b05      	ldr	r3, [pc, #20]	; (80a3d74 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3d60:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3d62:	f240 1301 	movw	r3, #257	; 0x101
 80a3d66:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3d68:	2381      	movs	r3, #129	; 0x81
 80a3d6a:	8223      	strh	r3, [r4, #16]
}
 80a3d6c:	bd10      	pop	{r4, pc}
 80a3d6e:	bf00      	nop
 80a3d70:	2000050e 	.word	0x2000050e
 80a3d74:	2000060f 	.word	0x2000060f

080a3d78 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3d78:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3d7a:	4c0f      	ldr	r4, [pc, #60]	; (80a3db8 <_Z17_fetch_usbserial1v+0x40>)
{
 80a3d7c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3d7e:	a801      	add	r0, sp, #4
 80a3d80:	f7ff ffe4 	bl	80a3d4c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3d84:	7823      	ldrb	r3, [r4, #0]
 80a3d86:	f3bf 8f5b 	dmb	ish
 80a3d8a:	07db      	lsls	r3, r3, #31
 80a3d8c:	d410      	bmi.n	80a3db0 <_Z17_fetch_usbserial1v+0x38>
 80a3d8e:	4620      	mov	r0, r4
 80a3d90:	f7fc f996 	bl	80a00c0 <__cxa_guard_acquire>
 80a3d94:	b160      	cbz	r0, 80a3db0 <_Z17_fetch_usbserial1v+0x38>
 80a3d96:	2101      	movs	r1, #1
 80a3d98:	aa01      	add	r2, sp, #4
 80a3d9a:	4808      	ldr	r0, [pc, #32]	; (80a3dbc <_Z17_fetch_usbserial1v+0x44>)
 80a3d9c:	f7ff ff80 	bl	80a3ca0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3da0:	4620      	mov	r0, r4
 80a3da2:	f7fc f992 	bl	80a00ca <__cxa_guard_release>
 80a3da6:	4a06      	ldr	r2, [pc, #24]	; (80a3dc0 <_Z17_fetch_usbserial1v+0x48>)
 80a3da8:	4906      	ldr	r1, [pc, #24]	; (80a3dc4 <_Z17_fetch_usbserial1v+0x4c>)
 80a3daa:	4804      	ldr	r0, [pc, #16]	; (80a3dbc <_Z17_fetch_usbserial1v+0x44>)
 80a3dac:	f000 fac8 	bl	80a4340 <__aeabi_atexit>
  return _usbserial1;
}
 80a3db0:	4802      	ldr	r0, [pc, #8]	; (80a3dbc <_Z17_fetch_usbserial1v+0x44>)
 80a3db2:	b006      	add	sp, #24
 80a3db4:	bd10      	pop	{r4, pc}
 80a3db6:	bf00      	nop
 80a3db8:	20000360 	.word	0x20000360
 80a3dbc:	20000378 	.word	0x20000378
 80a3dc0:	200001d8 	.word	0x200001d8
 80a3dc4:	080a3c2d 	.word	0x080a3c2d

080a3dc8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a3dc8:	4770      	bx	lr

080a3dca <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3dca:	7441      	strb	r1, [r0, #17]
}
 80a3dcc:	4770      	bx	lr

080a3dce <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a3dce:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a3dd0:	7c00      	ldrb	r0, [r0, #16]
 80a3dd2:	f7fe fe63 	bl	80a2a9c <hal_usart_available_data_for_write>
}
 80a3dd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3dda:	bd08      	pop	{r3, pc}

080a3ddc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3ddc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a3dde:	7c00      	ldrb	r0, [r0, #16]
 80a3de0:	f7fe fe34 	bl	80a2a4c <hal_usart_available>
}
 80a3de4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3de8:	bd08      	pop	{r3, pc}

080a3dea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3dea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a3dec:	7c00      	ldrb	r0, [r0, #16]
 80a3dee:	f7fe fe3d 	bl	80a2a6c <hal_usart_peek>
}
 80a3df2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3df6:	bd08      	pop	{r3, pc}

080a3df8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3df8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a3dfa:	7c00      	ldrb	r0, [r0, #16]
 80a3dfc:	f7fe fe2e 	bl	80a2a5c <hal_usart_read>
}
 80a3e00:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3e04:	bd08      	pop	{r3, pc}

080a3e06 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a3e06:	7c00      	ldrb	r0, [r0, #16]
 80a3e08:	f7fe be38 	b.w	80a2a7c <hal_usart_flush>

080a3e0c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3e0c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3e0e:	7c46      	ldrb	r6, [r0, #17]
{
 80a3e10:	4604      	mov	r4, r0
 80a3e12:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3e14:	b12e      	cbz	r6, 80a3e22 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a3e16:	4629      	mov	r1, r5
 80a3e18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a3e1e:	f7fe be0d 	b.w	80a2a3c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3e22:	7c00      	ldrb	r0, [r0, #16]
 80a3e24:	f7fe fe3a 	bl	80a2a9c <hal_usart_available_data_for_write>
 80a3e28:	2800      	cmp	r0, #0
 80a3e2a:	dcf4      	bgt.n	80a3e16 <_ZN11USARTSerial5writeEh+0xa>
}
 80a3e2c:	4630      	mov	r0, r6
 80a3e2e:	bd70      	pop	{r4, r5, r6, pc}

080a3e30 <_ZN11USARTSerialD0Ev>:
 80a3e30:	b510      	push	{r4, lr}
 80a3e32:	4604      	mov	r4, r0
 80a3e34:	2114      	movs	r1, #20
 80a3e36:	f000 fa88 	bl	80a434a <_ZdlPvj>
 80a3e3a:	4620      	mov	r0, r4
 80a3e3c:	bd10      	pop	{r4, pc}
	...

080a3e40 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a3e40:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3e44:	b510      	push	{r4, lr}
 80a3e46:	4604      	mov	r4, r0
 80a3e48:	4608      	mov	r0, r1
 80a3e4a:	4611      	mov	r1, r2
 80a3e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3e50:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a3e54:	4a04      	ldr	r2, [pc, #16]	; (80a3e68 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a3e56:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3e58:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a3e5a:	2201      	movs	r2, #1
 80a3e5c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a3e5e:	461a      	mov	r2, r3
 80a3e60:	f7fe fde4 	bl	80a2a2c <hal_usart_init>
}
 80a3e64:	4620      	mov	r0, r4
 80a3e66:	bd10      	pop	{r4, pc}
 80a3e68:	080a7f24 	.word	0x080a7f24

080a3e6c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a3e6c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a3e6e:	4d0d      	ldr	r5, [pc, #52]	; (80a3ea4 <_Z22__fetch_global_Serial1v+0x38>)
 80a3e70:	7829      	ldrb	r1, [r5, #0]
 80a3e72:	f3bf 8f5b 	dmb	ish
 80a3e76:	f011 0401 	ands.w	r4, r1, #1
 80a3e7a:	d111      	bne.n	80a3ea0 <_Z22__fetch_global_Serial1v+0x34>
 80a3e7c:	4628      	mov	r0, r5
 80a3e7e:	f7fc f91f 	bl	80a00c0 <__cxa_guard_acquire>
 80a3e82:	b168      	cbz	r0, 80a3ea0 <_Z22__fetch_global_Serial1v+0x34>
 80a3e84:	4621      	mov	r1, r4
 80a3e86:	4a08      	ldr	r2, [pc, #32]	; (80a3ea8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3e88:	4b08      	ldr	r3, [pc, #32]	; (80a3eac <_Z22__fetch_global_Serial1v+0x40>)
 80a3e8a:	4809      	ldr	r0, [pc, #36]	; (80a3eb0 <_Z22__fetch_global_Serial1v+0x44>)
 80a3e8c:	f7ff ffd8 	bl	80a3e40 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a3e90:	4628      	mov	r0, r5
 80a3e92:	f7fc f91a 	bl	80a00ca <__cxa_guard_release>
 80a3e96:	4a07      	ldr	r2, [pc, #28]	; (80a3eb4 <_Z22__fetch_global_Serial1v+0x48>)
 80a3e98:	4907      	ldr	r1, [pc, #28]	; (80a3eb8 <_Z22__fetch_global_Serial1v+0x4c>)
 80a3e9a:	4805      	ldr	r0, [pc, #20]	; (80a3eb0 <_Z22__fetch_global_Serial1v+0x44>)
 80a3e9c:	f000 fa50 	bl	80a4340 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3ea0:	4803      	ldr	r0, [pc, #12]	; (80a3eb0 <_Z22__fetch_global_Serial1v+0x44>)
 80a3ea2:	bd38      	pop	{r3, r4, r5, pc}
 80a3ea4:	20000690 	.word	0x20000690
 80a3ea8:	20000694 	.word	0x20000694
 80a3eac:	20000718 	.word	0x20000718
 80a3eb0:	2000079c 	.word	0x2000079c
 80a3eb4:	200001d8 	.word	0x200001d8
 80a3eb8:	080a3dc9 	.word	0x080a3dc9

080a3ebc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a3ebc:	4770      	bx	lr

080a3ebe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3ec0:	4606      	mov	r6, r0
 80a3ec2:	4615      	mov	r5, r2
 80a3ec4:	460c      	mov	r4, r1
 80a3ec6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3ec8:	42bc      	cmp	r4, r7
 80a3eca:	d006      	beq.n	80a3eda <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3ecc:	6833      	ldr	r3, [r6, #0]
 80a3ece:	4630      	mov	r0, r6
 80a3ed0:	689b      	ldr	r3, [r3, #8]
 80a3ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3ed6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a3ed8:	e7f6      	b.n	80a3ec8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a3eda:	4628      	mov	r0, r5
 80a3edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3ede <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a3ede:	2200      	movs	r2, #0
 80a3ee0:	7c00      	ldrb	r0, [r0, #16]
 80a3ee2:	f7fe be03 	b.w	80a2aec <hal_i2c_write>

080a3ee6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a3ee6:	2100      	movs	r1, #0
 80a3ee8:	7c00      	ldrb	r0, [r0, #16]
 80a3eea:	f7fe be07 	b.w	80a2afc <hal_i2c_available>

080a3eee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a3eee:	2100      	movs	r1, #0
 80a3ef0:	7c00      	ldrb	r0, [r0, #16]
 80a3ef2:	f7fe be0b 	b.w	80a2b0c <hal_i2c_read>

080a3ef6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a3ef6:	2100      	movs	r1, #0
 80a3ef8:	7c00      	ldrb	r0, [r0, #16]
 80a3efa:	f7fe be0f 	b.w	80a2b1c <hal_i2c_peek>

080a3efe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a3efe:	2100      	movs	r1, #0
 80a3f00:	7c00      	ldrb	r0, [r0, #16]
 80a3f02:	f7fe be13 	b.w	80a2b2c <hal_i2c_flush>

080a3f06 <_ZN7TwoWireD0Ev>:
 80a3f06:	b510      	push	{r4, lr}
 80a3f08:	4604      	mov	r4, r0
 80a3f0a:	2114      	movs	r1, #20
 80a3f0c:	f000 fa1d 	bl	80a434a <_ZdlPvj>
 80a3f10:	4620      	mov	r0, r4
 80a3f12:	bd10      	pop	{r4, pc}

080a3f14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a3f14:	b510      	push	{r4, lr}
 80a3f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3f1a:	4604      	mov	r4, r0
 80a3f1c:	4608      	mov	r0, r1
 80a3f1e:	2100      	movs	r1, #0
 80a3f20:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3f24:	4b03      	ldr	r3, [pc, #12]	; (80a3f34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a3f26:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a3f28:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a3f2a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a3f2c:	f7fe fe0e 	bl	80a2b4c <hal_i2c_init>
}
 80a3f30:	4620      	mov	r0, r4
 80a3f32:	bd10      	pop	{r4, pc}
 80a3f34:	080a7f54 	.word	0x080a7f54

080a3f38 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a3f38:	2200      	movs	r2, #0
 80a3f3a:	7c00      	ldrb	r0, [r0, #16]
 80a3f3c:	f7fe bdb6 	b.w	80a2aac <hal_i2c_set_speed>

080a3f40 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a3f40:	2300      	movs	r3, #0
 80a3f42:	7c00      	ldrb	r0, [r0, #16]
 80a3f44:	461a      	mov	r2, r3
 80a3f46:	4619      	mov	r1, r3
 80a3f48:	f7fe bdb8 	b.w	80a2abc <hal_i2c_begin>

080a3f4c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a3f4c:	2200      	movs	r2, #0
 80a3f4e:	7c00      	ldrb	r0, [r0, #16]
 80a3f50:	f7fe bdbc 	b.w	80a2acc <hal_i2c_begin_transmission>

080a3f54 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a3f54:	b2c9      	uxtb	r1, r1
 80a3f56:	f7ff bff9 	b.w	80a3f4c <_ZN7TwoWire17beginTransmissionEh>

080a3f5a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a3f5a:	2200      	movs	r2, #0
 80a3f5c:	7c00      	ldrb	r0, [r0, #16]
 80a3f5e:	f7fe bdbd 	b.w	80a2adc <hal_i2c_end_transmission>

080a3f62 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a3f62:	2101      	movs	r1, #1
 80a3f64:	f7ff bff9 	b.w	80a3f5a <_ZN7TwoWire15endTransmissionEh>

080a3f68 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a3f68:	2200      	movs	r2, #0
 80a3f6a:	6840      	ldr	r0, [r0, #4]
 80a3f6c:	4611      	mov	r1, r2
 80a3f6e:	f7fe bf03 	b.w	80a2d78 <network_ready>

080a3f72 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3f74:	4615      	mov	r5, r2
 80a3f76:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a3f78:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a3f7a:	460e      	mov	r6, r1
 80a3f7c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a3f7e:	2100      	movs	r1, #0
 80a3f80:	a803      	add	r0, sp, #12
 80a3f82:	f001 f845 	bl	80a5010 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3f86:	4628      	mov	r0, r5
 80a3f88:	f001 f878 	bl	80a507c <strlen>
 80a3f8c:	2700      	movs	r7, #0
 80a3f8e:	b281      	uxth	r1, r0
 80a3f90:	6873      	ldr	r3, [r6, #4]
 80a3f92:	4628      	mov	r0, r5
 80a3f94:	9700      	str	r7, [sp, #0]
 80a3f96:	aa03      	add	r2, sp, #12
 80a3f98:	f7fe fe92 	bl	80a2cc0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3f9c:	b130      	cbz	r0, 80a3fac <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a3f9e:	4639      	mov	r1, r7
 80a3fa0:	4620      	mov	r0, r4
 80a3fa2:	f7ff fe0b 	bl	80a3bbc <_ZN9IPAddressC1Em>
    }
 80a3fa6:	4620      	mov	r0, r4
 80a3fa8:	b009      	add	sp, #36	; 0x24
 80a3faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3fac:	4620      	mov	r0, r4
 80a3fae:	a903      	add	r1, sp, #12
 80a3fb0:	f7ff fdf2 	bl	80a3b98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a3fb4:	e7f7      	b.n	80a3fa6 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a3fb6 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a3fb6:	2200      	movs	r2, #0
 80a3fb8:	6840      	ldr	r0, [r0, #4]
 80a3fba:	4611      	mov	r1, r2
 80a3fbc:	f7fe befc 	b.w	80a2db8 <network_listening>

080a3fc0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a3fc0:	2200      	movs	r2, #0
 80a3fc2:	6840      	ldr	r0, [r0, #4]
 80a3fc4:	4611      	mov	r1, r2
 80a3fc6:	f7fe bf07 	b.w	80a2dd8 <network_get_listen_timeout>

080a3fca <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a3fca:	2200      	movs	r2, #0
 80a3fcc:	6840      	ldr	r0, [r0, #4]
 80a3fce:	f7fe befb 	b.w	80a2dc8 <network_set_listen_timeout>

080a3fd2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3fd2:	2200      	movs	r2, #0
 80a3fd4:	6840      	ldr	r0, [r0, #4]
 80a3fd6:	f081 0101 	eor.w	r1, r1, #1
 80a3fda:	f7fe bee5 	b.w	80a2da8 <network_listen>

080a3fde <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a3fde:	2300      	movs	r3, #0
 80a3fe0:	6840      	ldr	r0, [r0, #4]
 80a3fe2:	461a      	mov	r2, r3
 80a3fe4:	4619      	mov	r1, r3
 80a3fe6:	f7fe bed7 	b.w	80a2d98 <network_off>

080a3fea <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a3fea:	2200      	movs	r2, #0
 80a3fec:	6840      	ldr	r0, [r0, #4]
 80a3fee:	4611      	mov	r1, r2
 80a3ff0:	f7fe beb2 	b.w	80a2d58 <network_connecting>

080a3ff4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3ff4:	2200      	movs	r2, #0
 80a3ff6:	2102      	movs	r1, #2
 80a3ff8:	6840      	ldr	r0, [r0, #4]
 80a3ffa:	f7fe beb5 	b.w	80a2d68 <network_disconnect>

080a3ffe <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a3ffe:	2300      	movs	r3, #0
 80a4000:	6840      	ldr	r0, [r0, #4]
 80a4002:	461a      	mov	r2, r3
 80a4004:	f7fe bea0 	b.w	80a2d48 <network_connect>

080a4008 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a4008:	2204      	movs	r2, #4
 80a400a:	4b02      	ldr	r3, [pc, #8]	; (80a4014 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a400c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a400e:	4a02      	ldr	r2, [pc, #8]	; (80a4018 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a4010:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a4012:	4770      	bx	lr
 80a4014:	200007b0 	.word	0x200007b0
 80a4018:	080a7f7c 	.word	0x080a7f7c

080a401c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a401c:	2300      	movs	r3, #0
 80a401e:	6840      	ldr	r0, [r0, #4]
 80a4020:	461a      	mov	r2, r3
 80a4022:	f7fe be91 	b.w	80a2d48 <network_connect>

080a4026 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a4026:	2200      	movs	r2, #0
 80a4028:	2102      	movs	r1, #2
 80a402a:	6840      	ldr	r0, [r0, #4]
 80a402c:	f7fe be9c 	b.w	80a2d68 <network_disconnect>

080a4030 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a4030:	2200      	movs	r2, #0
 80a4032:	6840      	ldr	r0, [r0, #4]
 80a4034:	4611      	mov	r1, r2
 80a4036:	f7fe be8f 	b.w	80a2d58 <network_connecting>

080a403a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a403a:	2200      	movs	r2, #0
 80a403c:	6840      	ldr	r0, [r0, #4]
 80a403e:	4611      	mov	r1, r2
 80a4040:	f7fe be9a 	b.w	80a2d78 <network_ready>

080a4044 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a4044:	2300      	movs	r3, #0
 80a4046:	6840      	ldr	r0, [r0, #4]
 80a4048:	461a      	mov	r2, r3
 80a404a:	4619      	mov	r1, r3
 80a404c:	f7fe be9c 	b.w	80a2d88 <network_on>

080a4050 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a4050:	2300      	movs	r3, #0
 80a4052:	6840      	ldr	r0, [r0, #4]
 80a4054:	461a      	mov	r2, r3
 80a4056:	4619      	mov	r1, r3
 80a4058:	f7fe be9e 	b.w	80a2d98 <network_off>

080a405c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a405c:	2100      	movs	r1, #0
 80a405e:	6840      	ldr	r0, [r0, #4]
 80a4060:	f7fe bec2 	b.w	80a2de8 <network_is_on>

080a4064 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a4064:	2100      	movs	r1, #0
 80a4066:	6840      	ldr	r0, [r0, #4]
 80a4068:	f7fe bec6 	b.w	80a2df8 <network_is_off>

080a406c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a406c:	2200      	movs	r2, #0
 80a406e:	6840      	ldr	r0, [r0, #4]
 80a4070:	f081 0101 	eor.w	r1, r1, #1
 80a4074:	f7fe be98 	b.w	80a2da8 <network_listen>

080a4078 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a4078:	2200      	movs	r2, #0
 80a407a:	6840      	ldr	r0, [r0, #4]
 80a407c:	f7fe bea4 	b.w	80a2dc8 <network_set_listen_timeout>

080a4080 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a4080:	2200      	movs	r2, #0
 80a4082:	6840      	ldr	r0, [r0, #4]
 80a4084:	4611      	mov	r1, r2
 80a4086:	f7fe bea7 	b.w	80a2dd8 <network_get_listen_timeout>

080a408a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a408a:	2200      	movs	r2, #0
 80a408c:	6840      	ldr	r0, [r0, #4]
 80a408e:	4611      	mov	r1, r2
 80a4090:	f7fe be92 	b.w	80a2db8 <network_listening>

080a4094 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a4094:	b570      	push	{r4, r5, r6, lr}
 80a4096:	4615      	mov	r5, r2
 80a4098:	b08e      	sub	sp, #56	; 0x38
 80a409a:	4604      	mov	r4, r0
    IPAddress addr;
 80a409c:	a808      	add	r0, sp, #32
 80a409e:	f7ff fd6d 	bl	80a3b7c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a40a2:	2211      	movs	r2, #17
 80a40a4:	2100      	movs	r1, #0
 80a40a6:	a803      	add	r0, sp, #12
 80a40a8:	f000 ffb2 	bl	80a5010 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a40ac:	2600      	movs	r6, #0
 80a40ae:	4628      	mov	r0, r5
 80a40b0:	f000 ffe4 	bl	80a507c <strlen>
 80a40b4:	4b0a      	ldr	r3, [pc, #40]	; (80a40e0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a40b6:	9600      	str	r6, [sp, #0]
 80a40b8:	b281      	uxth	r1, r0
 80a40ba:	685b      	ldr	r3, [r3, #4]
 80a40bc:	4628      	mov	r0, r5
 80a40be:	aa03      	add	r2, sp, #12
 80a40c0:	f7fe fdfe 	bl	80a2cc0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a40c4:	b130      	cbz	r0, 80a40d4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a40c6:	4631      	mov	r1, r6
 80a40c8:	4620      	mov	r0, r4
 80a40ca:	f7ff fd77 	bl	80a3bbc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a40ce:	4620      	mov	r0, r4
 80a40d0:	b00e      	add	sp, #56	; 0x38
 80a40d2:	bd70      	pop	{r4, r5, r6, pc}
 80a40d4:	4620      	mov	r0, r4
 80a40d6:	a903      	add	r1, sp, #12
 80a40d8:	f7ff fd5e 	bl	80a3b98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a40dc:	e7f7      	b.n	80a40ce <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a40de:	bf00      	nop
 80a40e0:	200007b0 	.word	0x200007b0

080a40e4 <_ZN5spark12NetworkClass4fromEm>:
}
 80a40e4:	4a03      	ldr	r2, [pc, #12]	; (80a40f4 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a40e6:	4b04      	ldr	r3, [pc, #16]	; (80a40f8 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a40e8:	2804      	cmp	r0, #4
 80a40ea:	bf14      	ite	ne
 80a40ec:	4610      	movne	r0, r2
 80a40ee:	4618      	moveq	r0, r3
 80a40f0:	4770      	bx	lr
 80a40f2:	bf00      	nop
 80a40f4:	200007b8 	.word	0x200007b8
 80a40f8:	200007b0 	.word	0x200007b0

080a40fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a40fc:	4b02      	ldr	r3, [pc, #8]	; (80a4108 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a40fe:	4a03      	ldr	r2, [pc, #12]	; (80a410c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a4100:	601a      	str	r2, [r3, #0]
 80a4102:	2200      	movs	r2, #0
 80a4104:	605a      	str	r2, [r3, #4]

} // spark
 80a4106:	4770      	bx	lr
 80a4108:	200007b8 	.word	0x200007b8
 80a410c:	080a7fb8 	.word	0x080a7fb8

080a4110 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a4110:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a4112:	b570      	push	{r4, r5, r6, lr}
 80a4114:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a4116:	d901      	bls.n	80a411c <pinAvailable+0xc>
    return false;
 80a4118:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a411a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a411c:	f1a0 030d 	sub.w	r3, r0, #13
 80a4120:	2b02      	cmp	r3, #2
 80a4122:	d90b      	bls.n	80a413c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a4124:	2801      	cmp	r0, #1
 80a4126:	d826      	bhi.n	80a4176 <pinAvailable+0x66>
 80a4128:	f000 f8e2 	bl	80a42f0 <_Z19__fetch_global_Wirev>
 80a412c:	2100      	movs	r1, #0
 80a412e:	7c00      	ldrb	r0, [r0, #16]
 80a4130:	f7fe fd04 	bl	80a2b3c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a4134:	f080 0001 	eor.w	r0, r0, #1
 80a4138:	b2c0      	uxtb	r0, r0
 80a413a:	e7ee      	b.n	80a411a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a413c:	4e13      	ldr	r6, [pc, #76]	; (80a418c <pinAvailable+0x7c>)
 80a413e:	7831      	ldrb	r1, [r6, #0]
 80a4140:	f3bf 8f5b 	dmb	ish
 80a4144:	f011 0501 	ands.w	r5, r1, #1
 80a4148:	d10f      	bne.n	80a416a <pinAvailable+0x5a>
 80a414a:	4630      	mov	r0, r6
 80a414c:	f7fb ffb8 	bl	80a00c0 <__cxa_guard_acquire>
 80a4150:	b158      	cbz	r0, 80a416a <pinAvailable+0x5a>
 80a4152:	4629      	mov	r1, r5
 80a4154:	480e      	ldr	r0, [pc, #56]	; (80a4190 <pinAvailable+0x80>)
 80a4156:	f7fe feaa 	bl	80a2eae <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a415a:	4630      	mov	r0, r6
 80a415c:	f7fb ffb5 	bl	80a00ca <__cxa_guard_release>
 80a4160:	4a0c      	ldr	r2, [pc, #48]	; (80a4194 <pinAvailable+0x84>)
 80a4162:	490d      	ldr	r1, [pc, #52]	; (80a4198 <pinAvailable+0x88>)
 80a4164:	480a      	ldr	r0, [pc, #40]	; (80a4190 <pinAvailable+0x80>)
 80a4166:	f000 f8eb 	bl	80a4340 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a416a:	4b09      	ldr	r3, [pc, #36]	; (80a4190 <pinAvailable+0x80>)
 80a416c:	7818      	ldrb	r0, [r3, #0]
 80a416e:	f7fe fd4f 	bl	80a2c10 <hal_spi_is_enabled>
 80a4172:	2800      	cmp	r0, #0
 80a4174:	d1d0      	bne.n	80a4118 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a4176:	3c12      	subs	r4, #18
 80a4178:	2c01      	cmp	r4, #1
 80a417a:	d805      	bhi.n	80a4188 <pinAvailable+0x78>
 80a417c:	f7ff fe76 	bl	80a3e6c <_Z22__fetch_global_Serial1v>
 80a4180:	7c00      	ldrb	r0, [r0, #16]
 80a4182:	f7fe fc83 	bl	80a2a8c <hal_usart_is_enabled>
 80a4186:	e7d5      	b.n	80a4134 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a4188:	2001      	movs	r0, #1
 80a418a:	e7c6      	b.n	80a411a <pinAvailable+0xa>
 80a418c:	2000031c 	.word	0x2000031c
 80a4190:	20000320 	.word	0x20000320
 80a4194:	200001d8 	.word	0x200001d8
 80a4198:	080a0e05 	.word	0x080a0e05

080a419c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a419c:	2817      	cmp	r0, #23
{
 80a419e:	b538      	push	{r3, r4, r5, lr}
 80a41a0:	4604      	mov	r4, r0
 80a41a2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a41a4:	d80a      	bhi.n	80a41bc <pinMode+0x20>
 80a41a6:	29ff      	cmp	r1, #255	; 0xff
 80a41a8:	d008      	beq.n	80a41bc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a41aa:	f7ff ffb1 	bl	80a4110 <pinAvailable>
 80a41ae:	b128      	cbz	r0, 80a41bc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a41b0:	4629      	mov	r1, r5
 80a41b2:	4620      	mov	r0, r4
}
 80a41b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a41b8:	f7fe bba8 	b.w	80a290c <HAL_Pin_Mode>
}
 80a41bc:	bd38      	pop	{r3, r4, r5, pc}

080a41be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a41be:	b538      	push	{r3, r4, r5, lr}
 80a41c0:	4604      	mov	r4, r0
 80a41c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a41c4:	f7fe fbaa 	bl	80a291c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a41c8:	28ff      	cmp	r0, #255	; 0xff
 80a41ca:	d010      	beq.n	80a41ee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a41cc:	2806      	cmp	r0, #6
 80a41ce:	d804      	bhi.n	80a41da <digitalWrite+0x1c>
 80a41d0:	234d      	movs	r3, #77	; 0x4d
 80a41d2:	fa23 f000 	lsr.w	r0, r3, r0
 80a41d6:	07c3      	lsls	r3, r0, #31
 80a41d8:	d409      	bmi.n	80a41ee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a41da:	4620      	mov	r0, r4
 80a41dc:	f7ff ff98 	bl	80a4110 <pinAvailable>
 80a41e0:	b128      	cbz	r0, 80a41ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a41e2:	4629      	mov	r1, r5
 80a41e4:	4620      	mov	r0, r4
}
 80a41e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a41ea:	f7fe bb9f 	b.w	80a292c <HAL_GPIO_Write>
}
 80a41ee:	bd38      	pop	{r3, r4, r5, pc}

080a41f0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a41f0:	b510      	push	{r4, lr}
 80a41f2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a41f4:	f7fe fb92 	bl	80a291c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a41f8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a41fa:	b2db      	uxtb	r3, r3
 80a41fc:	2b01      	cmp	r3, #1
 80a41fe:	d908      	bls.n	80a4212 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a4200:	4620      	mov	r0, r4
 80a4202:	f7ff ff85 	bl	80a4110 <pinAvailable>
 80a4206:	b120      	cbz	r0, 80a4212 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a4208:	4620      	mov	r0, r4
}
 80a420a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a420e:	f7fe bb95 	b.w	80a293c <HAL_GPIO_Read>
}
 80a4212:	2000      	movs	r0, #0
 80a4214:	bd10      	pop	{r4, pc}

080a4216 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a4216:	b510      	push	{r4, lr}
 80a4218:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a421a:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a421c:	bf9c      	itt	ls
 80a421e:	340a      	addls	r4, #10
 80a4220:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a4222:	4620      	mov	r0, r4
 80a4224:	f7ff ff74 	bl	80a4110 <pinAvailable>
 80a4228:	b150      	cbz	r0, 80a4240 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a422a:	2103      	movs	r1, #3
 80a422c:	4620      	mov	r0, r4
 80a422e:	f7fe fb65 	bl	80a28fc <HAL_Validate_Pin_Function>
 80a4232:	2803      	cmp	r0, #3
 80a4234:	d104      	bne.n	80a4240 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a4236:	4620      	mov	r0, r4
}
 80a4238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a423c:	f7fe bb8e 	b.w	80a295c <hal_adc_read>
}
 80a4240:	2000      	movs	r0, #0
 80a4242:	bd10      	pop	{r4, pc}

080a4244 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a4244:	b538      	push	{r3, r4, r5, lr}
 80a4246:	4604      	mov	r4, r0
 80a4248:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a424a:	f7ff ff61 	bl	80a4110 <pinAvailable>
 80a424e:	b1f0      	cbz	r0, 80a428e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a4250:	2104      	movs	r1, #4
 80a4252:	4620      	mov	r0, r4
 80a4254:	f7fe fb52 	bl	80a28fc <HAL_Validate_Pin_Function>
 80a4258:	2804      	cmp	r0, #4
 80a425a:	d105      	bne.n	80a4268 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a425c:	4620      	mov	r0, r4
 80a425e:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 80a4260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 80a4264:	f7fe bb72 	b.w	80a294c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a4268:	2102      	movs	r1, #2
 80a426a:	4620      	mov	r0, r4
 80a426c:	f7fe fb46 	bl	80a28fc <HAL_Validate_Pin_Function>
 80a4270:	2802      	cmp	r0, #2
 80a4272:	d10c      	bne.n	80a428e <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4274:	4620      	mov	r0, r4
 80a4276:	f7fe fb51 	bl	80a291c <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a427a:	2801      	cmp	r0, #1
 80a427c:	d001      	beq.n	80a4282 <_Z11analogWritetm+0x3e>
 80a427e:	2804      	cmp	r0, #4
 80a4280:	d105      	bne.n	80a428e <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 80a4282:	4629      	mov	r1, r5
 80a4284:	4620      	mov	r0, r4
}
 80a4286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 80a428a:	f7fe bb6f 	b.w	80a296c <hal_pwm_write_ext>
}
 80a428e:	bd38      	pop	{r3, r4, r5, pc}

080a4290 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a4290:	2300      	movs	r3, #0
 80a4292:	b513      	push	{r0, r1, r4, lr}
 80a4294:	4c07      	ldr	r4, [pc, #28]	; (80a42b4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a4296:	461a      	mov	r2, r3
 80a4298:	4619      	mov	r1, r3
 80a429a:	4620      	mov	r0, r4
 80a429c:	9300      	str	r3, [sp, #0]
 80a429e:	f7ff fca3 	bl	80a3be8 <_ZN9IPAddressC1Ehhhh>
 80a42a2:	4620      	mov	r0, r4
 80a42a4:	4a04      	ldr	r2, [pc, #16]	; (80a42b8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a42a6:	4905      	ldr	r1, [pc, #20]	; (80a42bc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a42a8:	b002      	add	sp, #8
 80a42aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a42ae:	f000 b847 	b.w	80a4340 <__aeabi_atexit>
 80a42b2:	bf00      	nop
 80a42b4:	200007c4 	.word	0x200007c4
 80a42b8:	200001d8 	.word	0x200001d8
 80a42bc:	080a3b39 	.word	0x080a3b39

080a42c0 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a42c0:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a42c2:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a42c4:	2520      	movs	r5, #32
 80a42c6:	8043      	strh	r3, [r0, #2]
 80a42c8:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a42ca:	4e08      	ldr	r6, [pc, #32]	; (80a42ec <_Z17acquireWireBufferv+0x2c>)
{
 80a42cc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a42ce:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a42d0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a42d2:	6085      	str	r5, [r0, #8]
 80a42d4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a42d6:	4628      	mov	r0, r5
 80a42d8:	f000 f839 	bl	80a434e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a42dc:	4631      	mov	r1, r6
	};
 80a42de:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a42e0:	4628      	mov	r0, r5
 80a42e2:	f000 f834 	bl	80a434e <_ZnajRKSt9nothrow_t>
	};
 80a42e6:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a42e8:	4620      	mov	r0, r4
 80a42ea:	bd70      	pop	{r4, r5, r6, pc}
 80a42ec:	080a7fec 	.word	0x080a7fec

080a42f0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a42f0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a42f2:	4d0f      	ldr	r5, [pc, #60]	; (80a4330 <_Z19__fetch_global_Wirev+0x40>)
{
 80a42f4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a42f6:	7829      	ldrb	r1, [r5, #0]
 80a42f8:	f3bf 8f5b 	dmb	ish
 80a42fc:	f011 0401 	ands.w	r4, r1, #1
 80a4300:	d113      	bne.n	80a432a <_Z19__fetch_global_Wirev+0x3a>
 80a4302:	4628      	mov	r0, r5
 80a4304:	f7fb fedc 	bl	80a00c0 <__cxa_guard_acquire>
 80a4308:	b178      	cbz	r0, 80a432a <_Z19__fetch_global_Wirev+0x3a>
 80a430a:	a801      	add	r0, sp, #4
 80a430c:	f7ff ffd8 	bl	80a42c0 <_Z17acquireWireBufferv>
 80a4310:	4621      	mov	r1, r4
 80a4312:	aa01      	add	r2, sp, #4
 80a4314:	4807      	ldr	r0, [pc, #28]	; (80a4334 <_Z19__fetch_global_Wirev+0x44>)
 80a4316:	f7ff fdfd 	bl	80a3f14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a431a:	4628      	mov	r0, r5
 80a431c:	f7fb fed5 	bl	80a00ca <__cxa_guard_release>
 80a4320:	4a05      	ldr	r2, [pc, #20]	; (80a4338 <_Z19__fetch_global_Wirev+0x48>)
 80a4322:	4906      	ldr	r1, [pc, #24]	; (80a433c <_Z19__fetch_global_Wirev+0x4c>)
 80a4324:	4803      	ldr	r0, [pc, #12]	; (80a4334 <_Z19__fetch_global_Wirev+0x44>)
 80a4326:	f000 f80b 	bl	80a4340 <__aeabi_atexit>
	return wire;
}
 80a432a:	4802      	ldr	r0, [pc, #8]	; (80a4334 <_Z19__fetch_global_Wirev+0x44>)
 80a432c:	b007      	add	sp, #28
 80a432e:	bd30      	pop	{r4, r5, pc}
 80a4330:	200007dc 	.word	0x200007dc
 80a4334:	200007e0 	.word	0x200007e0
 80a4338:	200001d8 	.word	0x200001d8
 80a433c:	080a3ebd 	.word	0x080a3ebd

080a4340 <__aeabi_atexit>:
 80a4340:	460b      	mov	r3, r1
 80a4342:	4601      	mov	r1, r0
 80a4344:	4618      	mov	r0, r3
 80a4346:	f000 be47 	b.w	80a4fd8 <__cxa_atexit>

080a434a <_ZdlPvj>:
 80a434a:	f7fb beaa 	b.w	80a00a2 <_ZdlPv>

080a434e <_ZnajRKSt9nothrow_t>:
 80a434e:	f7fb bea6 	b.w	80a009e <_Znaj>
	...

080a4354 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a4354:	4901      	ldr	r1, [pc, #4]	; (80a435c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a4356:	f000 b8fb 	b.w	80a4550 <_ZNKSt9type_infoeqERKS_>
 80a435a:	bf00      	nop
 80a435c:	080a8008 	.word	0x080a8008

080a4360 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a4360:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a4362:	2400      	movs	r4, #0
 80a4364:	2310      	movs	r3, #16
 80a4366:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a436a:	6803      	ldr	r3, [r0, #0]
 80a436c:	4615      	mov	r5, r2
 80a436e:	699e      	ldr	r6, [r3, #24]
 80a4370:	6812      	ldr	r2, [r2, #0]
 80a4372:	466b      	mov	r3, sp
 80a4374:	9400      	str	r4, [sp, #0]
 80a4376:	f88d 4004 	strb.w	r4, [sp, #4]
 80a437a:	47b0      	blx	r6
 80a437c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a4380:	f003 0306 	and.w	r3, r3, #6
 80a4384:	2b06      	cmp	r3, #6
 80a4386:	bf09      	itett	eq
 80a4388:	2001      	moveq	r0, #1
 80a438a:	4620      	movne	r0, r4
 80a438c:	9b00      	ldreq	r3, [sp, #0]
 80a438e:	602b      	streq	r3, [r5, #0]
 80a4390:	b004      	add	sp, #16
 80a4392:	bd70      	pop	{r4, r5, r6, pc}

080a4394 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a4394:	9800      	ldr	r0, [sp, #0]
 80a4396:	4290      	cmp	r0, r2
 80a4398:	bf14      	ite	ne
 80a439a:	2001      	movne	r0, #1
 80a439c:	2006      	moveq	r0, #6
 80a439e:	4770      	bx	lr

080a43a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a43a0:	b510      	push	{r4, lr}
 80a43a2:	4604      	mov	r4, r0
 80a43a4:	4b02      	ldr	r3, [pc, #8]	; (80a43b0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a43a6:	6003      	str	r3, [r0, #0]
 80a43a8:	f000 f8cf 	bl	80a454a <_ZNSt9type_infoD1Ev>
 80a43ac:	4620      	mov	r0, r4
 80a43ae:	bd10      	pop	{r4, pc}
 80a43b0:	080a8048 	.word	0x080a8048

080a43b4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a43b4:	b510      	push	{r4, lr}
 80a43b6:	4604      	mov	r4, r0
 80a43b8:	f7ff fff2 	bl	80a43a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a43bc:	4620      	mov	r0, r4
 80a43be:	2108      	movs	r1, #8
 80a43c0:	f7ff ffc3 	bl	80a434a <_ZdlPvj>
 80a43c4:	4620      	mov	r0, r4
 80a43c6:	bd10      	pop	{r4, pc}

080a43c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a43c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a43cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a43d0:	461f      	mov	r7, r3
 80a43d2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a43d6:	4598      	cmp	r8, r3
 80a43d8:	4606      	mov	r6, r0
 80a43da:	4615      	mov	r5, r2
 80a43dc:	d107      	bne.n	80a43ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a43de:	9907      	ldr	r1, [sp, #28]
 80a43e0:	f000 f8b6 	bl	80a4550 <_ZNKSt9type_infoeqERKS_>
 80a43e4:	b118      	cbz	r0, 80a43ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a43e6:	7165      	strb	r5, [r4, #5]
 80a43e8:	2000      	movs	r0, #0
 80a43ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a43ee:	4639      	mov	r1, r7
 80a43f0:	4630      	mov	r0, r6
 80a43f2:	f000 f8ad 	bl	80a4550 <_ZNKSt9type_infoeqERKS_>
 80a43f6:	2800      	cmp	r0, #0
 80a43f8:	d0f6      	beq.n	80a43e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a43fa:	2301      	movs	r3, #1
 80a43fc:	f8c4 8000 	str.w	r8, [r4]
 80a4400:	7125      	strb	r5, [r4, #4]
 80a4402:	71a3      	strb	r3, [r4, #6]
 80a4404:	e7f0      	b.n	80a43e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a4406 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a4406:	b538      	push	{r3, r4, r5, lr}
 80a4408:	4615      	mov	r5, r2
 80a440a:	461c      	mov	r4, r3
 80a440c:	f000 f8a0 	bl	80a4550 <_ZNKSt9type_infoeqERKS_>
 80a4410:	b120      	cbz	r0, 80a441c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a4412:	2308      	movs	r3, #8
 80a4414:	60e3      	str	r3, [r4, #12]
 80a4416:	2306      	movs	r3, #6
 80a4418:	6025      	str	r5, [r4, #0]
 80a441a:	7123      	strb	r3, [r4, #4]
 80a441c:	bd38      	pop	{r3, r4, r5, pc}

080a441e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a441e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4422:	4605      	mov	r5, r0
 80a4424:	460c      	mov	r4, r1
 80a4426:	4616      	mov	r6, r2
 80a4428:	461f      	mov	r7, r3
 80a442a:	f000 f891 	bl	80a4550 <_ZNKSt9type_infoeqERKS_>
 80a442e:	b948      	cbnz	r0, 80a4444 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a4430:	2f03      	cmp	r7, #3
 80a4432:	d807      	bhi.n	80a4444 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a4434:	6823      	ldr	r3, [r4, #0]
 80a4436:	4632      	mov	r2, r6
 80a4438:	4629      	mov	r1, r5
 80a443a:	4620      	mov	r0, r4
 80a443c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a4440:	695b      	ldr	r3, [r3, #20]
 80a4442:	4718      	bx	r3
 80a4444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4448 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a4448:	b510      	push	{r4, lr}
 80a444a:	4604      	mov	r4, r0
 80a444c:	4b02      	ldr	r3, [pc, #8]	; (80a4458 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a444e:	6003      	str	r3, [r0, #0]
 80a4450:	f7ff ffa6 	bl	80a43a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a4454:	4620      	mov	r0, r4
 80a4456:	bd10      	pop	{r4, pc}
 80a4458:	080a80a8 	.word	0x080a80a8

080a445c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a445c:	b510      	push	{r4, lr}
 80a445e:	4604      	mov	r4, r0
 80a4460:	f7ff fff2 	bl	80a4448 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a4464:	4620      	mov	r0, r4
 80a4466:	210c      	movs	r1, #12
 80a4468:	f7ff ff6f 	bl	80a434a <_ZdlPvj>
 80a446c:	4620      	mov	r0, r4
 80a446e:	bd10      	pop	{r4, pc}

080a4470 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a4470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4474:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a4478:	4606      	mov	r6, r0
 80a447a:	4590      	cmp	r8, r2
 80a447c:	460f      	mov	r7, r1
 80a447e:	4615      	mov	r5, r2
 80a4480:	461c      	mov	r4, r3
 80a4482:	d00b      	beq.n	80a449c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a4484:	68b0      	ldr	r0, [r6, #8]
 80a4486:	462a      	mov	r2, r5
 80a4488:	6803      	ldr	r3, [r0, #0]
 80a448a:	f8cd 8018 	str.w	r8, [sp, #24]
 80a448e:	6a1e      	ldr	r6, [r3, #32]
 80a4490:	4639      	mov	r1, r7
 80a4492:	4623      	mov	r3, r4
 80a4494:	46b4      	mov	ip, r6
 80a4496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a449a:	4760      	bx	ip
 80a449c:	4619      	mov	r1, r3
 80a449e:	f000 f857 	bl	80a4550 <_ZNKSt9type_infoeqERKS_>
 80a44a2:	2800      	cmp	r0, #0
 80a44a4:	d0ee      	beq.n	80a4484 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a44a6:	2006      	movs	r0, #6
 80a44a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a44ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a44ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a44b0:	460d      	mov	r5, r1
 80a44b2:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a44b6:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a44ba:	4619      	mov	r1, r3
 80a44bc:	4681      	mov	r9, r0
 80a44be:	4617      	mov	r7, r2
 80a44c0:	4698      	mov	r8, r3
 80a44c2:	f000 f845 	bl	80a4550 <_ZNKSt9type_infoeqERKS_>
 80a44c6:	b190      	cbz	r0, 80a44ee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a44c8:	2d00      	cmp	r5, #0
 80a44ca:	6034      	str	r4, [r6, #0]
 80a44cc:	7137      	strb	r7, [r6, #4]
 80a44ce:	db09      	blt.n	80a44e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a44d0:	442c      	add	r4, r5
 80a44d2:	45a2      	cmp	sl, r4
 80a44d4:	bf0c      	ite	eq
 80a44d6:	2406      	moveq	r4, #6
 80a44d8:	2401      	movne	r4, #1
 80a44da:	71b4      	strb	r4, [r6, #6]
 80a44dc:	2000      	movs	r0, #0
 80a44de:	b001      	add	sp, #4
 80a44e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a44e4:	3502      	adds	r5, #2
 80a44e6:	d1f9      	bne.n	80a44dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a44e8:	2301      	movs	r3, #1
 80a44ea:	71b3      	strb	r3, [r6, #6]
 80a44ec:	e7f6      	b.n	80a44dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a44ee:	4554      	cmp	r4, sl
 80a44f0:	d106      	bne.n	80a4500 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a44f2:	4659      	mov	r1, fp
 80a44f4:	4648      	mov	r0, r9
 80a44f6:	f000 f82b 	bl	80a4550 <_ZNKSt9type_infoeqERKS_>
 80a44fa:	b108      	cbz	r0, 80a4500 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a44fc:	7177      	strb	r7, [r6, #5]
 80a44fe:	e7ed      	b.n	80a44dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a4500:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a4504:	463a      	mov	r2, r7
 80a4506:	6803      	ldr	r3, [r0, #0]
 80a4508:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a450c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a4510:	69dc      	ldr	r4, [r3, #28]
 80a4512:	4629      	mov	r1, r5
 80a4514:	4643      	mov	r3, r8
 80a4516:	46a4      	mov	ip, r4
 80a4518:	b001      	add	sp, #4
 80a451a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a451e:	4760      	bx	ip

080a4520 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a4520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4524:	4607      	mov	r7, r0
 80a4526:	460c      	mov	r4, r1
 80a4528:	4615      	mov	r5, r2
 80a452a:	461e      	mov	r6, r3
 80a452c:	f7ff ff6b 	bl	80a4406 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a4530:	b948      	cbnz	r0, 80a4546 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a4532:	68b8      	ldr	r0, [r7, #8]
 80a4534:	462a      	mov	r2, r5
 80a4536:	6803      	ldr	r3, [r0, #0]
 80a4538:	4621      	mov	r1, r4
 80a453a:	699f      	ldr	r7, [r3, #24]
 80a453c:	4633      	mov	r3, r6
 80a453e:	46bc      	mov	ip, r7
 80a4540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a4544:	4760      	bx	ip
 80a4546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a454a <_ZNSt9type_infoD1Ev>:
 80a454a:	4770      	bx	lr

080a454c <_ZNKSt9type_info14__is_pointer_pEv>:
 80a454c:	2000      	movs	r0, #0
 80a454e:	4770      	bx	lr

080a4550 <_ZNKSt9type_infoeqERKS_>:
 80a4550:	4281      	cmp	r1, r0
 80a4552:	b508      	push	{r3, lr}
 80a4554:	d00e      	beq.n	80a4574 <_ZNKSt9type_infoeqERKS_+0x24>
 80a4556:	6840      	ldr	r0, [r0, #4]
 80a4558:	7803      	ldrb	r3, [r0, #0]
 80a455a:	2b2a      	cmp	r3, #42	; 0x2a
 80a455c:	d00c      	beq.n	80a4578 <_ZNKSt9type_infoeqERKS_+0x28>
 80a455e:	6849      	ldr	r1, [r1, #4]
 80a4560:	780b      	ldrb	r3, [r1, #0]
 80a4562:	2b2a      	cmp	r3, #42	; 0x2a
 80a4564:	bf08      	it	eq
 80a4566:	3101      	addeq	r1, #1
 80a4568:	f000 fd7e 	bl	80a5068 <strcmp>
 80a456c:	fab0 f080 	clz	r0, r0
 80a4570:	0940      	lsrs	r0, r0, #5
 80a4572:	bd08      	pop	{r3, pc}
 80a4574:	2001      	movs	r0, #1
 80a4576:	e7fc      	b.n	80a4572 <_ZNKSt9type_infoeqERKS_+0x22>
 80a4578:	2000      	movs	r0, #0
 80a457a:	e7fa      	b.n	80a4572 <_ZNKSt9type_infoeqERKS_+0x22>

080a457c <__aeabi_drsub>:
 80a457c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4580:	e002      	b.n	80a4588 <__adddf3>
 80a4582:	bf00      	nop

080a4584 <__aeabi_dsub>:
 80a4584:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4588 <__adddf3>:
 80a4588:	b530      	push	{r4, r5, lr}
 80a458a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a458e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a4592:	ea94 0f05 	teq	r4, r5
 80a4596:	bf08      	it	eq
 80a4598:	ea90 0f02 	teqeq	r0, r2
 80a459c:	bf1f      	itttt	ne
 80a459e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a45a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a45a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a45aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a45ae:	f000 80e2 	beq.w	80a4776 <__adddf3+0x1ee>
 80a45b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a45b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a45ba:	bfb8      	it	lt
 80a45bc:	426d      	neglt	r5, r5
 80a45be:	dd0c      	ble.n	80a45da <__adddf3+0x52>
 80a45c0:	442c      	add	r4, r5
 80a45c2:	ea80 0202 	eor.w	r2, r0, r2
 80a45c6:	ea81 0303 	eor.w	r3, r1, r3
 80a45ca:	ea82 0000 	eor.w	r0, r2, r0
 80a45ce:	ea83 0101 	eor.w	r1, r3, r1
 80a45d2:	ea80 0202 	eor.w	r2, r0, r2
 80a45d6:	ea81 0303 	eor.w	r3, r1, r3
 80a45da:	2d36      	cmp	r5, #54	; 0x36
 80a45dc:	bf88      	it	hi
 80a45de:	bd30      	pophi	{r4, r5, pc}
 80a45e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a45e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a45e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a45ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a45f0:	d002      	beq.n	80a45f8 <__adddf3+0x70>
 80a45f2:	4240      	negs	r0, r0
 80a45f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a45f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a45fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4600:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4604:	d002      	beq.n	80a460c <__adddf3+0x84>
 80a4606:	4252      	negs	r2, r2
 80a4608:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a460c:	ea94 0f05 	teq	r4, r5
 80a4610:	f000 80a7 	beq.w	80a4762 <__adddf3+0x1da>
 80a4614:	f1a4 0401 	sub.w	r4, r4, #1
 80a4618:	f1d5 0e20 	rsbs	lr, r5, #32
 80a461c:	db0d      	blt.n	80a463a <__adddf3+0xb2>
 80a461e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4622:	fa22 f205 	lsr.w	r2, r2, r5
 80a4626:	1880      	adds	r0, r0, r2
 80a4628:	f141 0100 	adc.w	r1, r1, #0
 80a462c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4630:	1880      	adds	r0, r0, r2
 80a4632:	fa43 f305 	asr.w	r3, r3, r5
 80a4636:	4159      	adcs	r1, r3
 80a4638:	e00e      	b.n	80a4658 <__adddf3+0xd0>
 80a463a:	f1a5 0520 	sub.w	r5, r5, #32
 80a463e:	f10e 0e20 	add.w	lr, lr, #32
 80a4642:	2a01      	cmp	r2, #1
 80a4644:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4648:	bf28      	it	cs
 80a464a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a464e:	fa43 f305 	asr.w	r3, r3, r5
 80a4652:	18c0      	adds	r0, r0, r3
 80a4654:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a465c:	d507      	bpl.n	80a466e <__adddf3+0xe6>
 80a465e:	f04f 0e00 	mov.w	lr, #0
 80a4662:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4666:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a466a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a466e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4672:	d31b      	bcc.n	80a46ac <__adddf3+0x124>
 80a4674:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4678:	d30c      	bcc.n	80a4694 <__adddf3+0x10c>
 80a467a:	0849      	lsrs	r1, r1, #1
 80a467c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4680:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4684:	f104 0401 	add.w	r4, r4, #1
 80a4688:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a468c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4690:	f080 809a 	bcs.w	80a47c8 <__adddf3+0x240>
 80a4694:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4698:	bf08      	it	eq
 80a469a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a469e:	f150 0000 	adcs.w	r0, r0, #0
 80a46a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a46a6:	ea41 0105 	orr.w	r1, r1, r5
 80a46aa:	bd30      	pop	{r4, r5, pc}
 80a46ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a46b0:	4140      	adcs	r0, r0
 80a46b2:	eb41 0101 	adc.w	r1, r1, r1
 80a46b6:	3c01      	subs	r4, #1
 80a46b8:	bf28      	it	cs
 80a46ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a46be:	d2e9      	bcs.n	80a4694 <__adddf3+0x10c>
 80a46c0:	f091 0f00 	teq	r1, #0
 80a46c4:	bf04      	itt	eq
 80a46c6:	4601      	moveq	r1, r0
 80a46c8:	2000      	moveq	r0, #0
 80a46ca:	fab1 f381 	clz	r3, r1
 80a46ce:	bf08      	it	eq
 80a46d0:	3320      	addeq	r3, #32
 80a46d2:	f1a3 030b 	sub.w	r3, r3, #11
 80a46d6:	f1b3 0220 	subs.w	r2, r3, #32
 80a46da:	da0c      	bge.n	80a46f6 <__adddf3+0x16e>
 80a46dc:	320c      	adds	r2, #12
 80a46de:	dd08      	ble.n	80a46f2 <__adddf3+0x16a>
 80a46e0:	f102 0c14 	add.w	ip, r2, #20
 80a46e4:	f1c2 020c 	rsb	r2, r2, #12
 80a46e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a46ec:	fa21 f102 	lsr.w	r1, r1, r2
 80a46f0:	e00c      	b.n	80a470c <__adddf3+0x184>
 80a46f2:	f102 0214 	add.w	r2, r2, #20
 80a46f6:	bfd8      	it	le
 80a46f8:	f1c2 0c20 	rsble	ip, r2, #32
 80a46fc:	fa01 f102 	lsl.w	r1, r1, r2
 80a4700:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4704:	bfdc      	itt	le
 80a4706:	ea41 010c 	orrle.w	r1, r1, ip
 80a470a:	4090      	lslle	r0, r2
 80a470c:	1ae4      	subs	r4, r4, r3
 80a470e:	bfa2      	ittt	ge
 80a4710:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4714:	4329      	orrge	r1, r5
 80a4716:	bd30      	popge	{r4, r5, pc}
 80a4718:	ea6f 0404 	mvn.w	r4, r4
 80a471c:	3c1f      	subs	r4, #31
 80a471e:	da1c      	bge.n	80a475a <__adddf3+0x1d2>
 80a4720:	340c      	adds	r4, #12
 80a4722:	dc0e      	bgt.n	80a4742 <__adddf3+0x1ba>
 80a4724:	f104 0414 	add.w	r4, r4, #20
 80a4728:	f1c4 0220 	rsb	r2, r4, #32
 80a472c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4730:	fa01 f302 	lsl.w	r3, r1, r2
 80a4734:	ea40 0003 	orr.w	r0, r0, r3
 80a4738:	fa21 f304 	lsr.w	r3, r1, r4
 80a473c:	ea45 0103 	orr.w	r1, r5, r3
 80a4740:	bd30      	pop	{r4, r5, pc}
 80a4742:	f1c4 040c 	rsb	r4, r4, #12
 80a4746:	f1c4 0220 	rsb	r2, r4, #32
 80a474a:	fa20 f002 	lsr.w	r0, r0, r2
 80a474e:	fa01 f304 	lsl.w	r3, r1, r4
 80a4752:	ea40 0003 	orr.w	r0, r0, r3
 80a4756:	4629      	mov	r1, r5
 80a4758:	bd30      	pop	{r4, r5, pc}
 80a475a:	fa21 f004 	lsr.w	r0, r1, r4
 80a475e:	4629      	mov	r1, r5
 80a4760:	bd30      	pop	{r4, r5, pc}
 80a4762:	f094 0f00 	teq	r4, #0
 80a4766:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a476a:	bf06      	itte	eq
 80a476c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4770:	3401      	addeq	r4, #1
 80a4772:	3d01      	subne	r5, #1
 80a4774:	e74e      	b.n	80a4614 <__adddf3+0x8c>
 80a4776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a477a:	bf18      	it	ne
 80a477c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4780:	d029      	beq.n	80a47d6 <__adddf3+0x24e>
 80a4782:	ea94 0f05 	teq	r4, r5
 80a4786:	bf08      	it	eq
 80a4788:	ea90 0f02 	teqeq	r0, r2
 80a478c:	d005      	beq.n	80a479a <__adddf3+0x212>
 80a478e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a4792:	bf04      	itt	eq
 80a4794:	4619      	moveq	r1, r3
 80a4796:	4610      	moveq	r0, r2
 80a4798:	bd30      	pop	{r4, r5, pc}
 80a479a:	ea91 0f03 	teq	r1, r3
 80a479e:	bf1e      	ittt	ne
 80a47a0:	2100      	movne	r1, #0
 80a47a2:	2000      	movne	r0, #0
 80a47a4:	bd30      	popne	{r4, r5, pc}
 80a47a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a47aa:	d105      	bne.n	80a47b8 <__adddf3+0x230>
 80a47ac:	0040      	lsls	r0, r0, #1
 80a47ae:	4149      	adcs	r1, r1
 80a47b0:	bf28      	it	cs
 80a47b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a47b6:	bd30      	pop	{r4, r5, pc}
 80a47b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a47bc:	bf3c      	itt	cc
 80a47be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a47c2:	bd30      	popcc	{r4, r5, pc}
 80a47c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a47c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a47cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a47d0:	f04f 0000 	mov.w	r0, #0
 80a47d4:	bd30      	pop	{r4, r5, pc}
 80a47d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a47da:	bf1a      	itte	ne
 80a47dc:	4619      	movne	r1, r3
 80a47de:	4610      	movne	r0, r2
 80a47e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a47e4:	bf1c      	itt	ne
 80a47e6:	460b      	movne	r3, r1
 80a47e8:	4602      	movne	r2, r0
 80a47ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a47ee:	bf06      	itte	eq
 80a47f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a47f4:	ea91 0f03 	teqeq	r1, r3
 80a47f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a47fc:	bd30      	pop	{r4, r5, pc}
 80a47fe:	bf00      	nop

080a4800 <__aeabi_ui2d>:
 80a4800:	f090 0f00 	teq	r0, #0
 80a4804:	bf04      	itt	eq
 80a4806:	2100      	moveq	r1, #0
 80a4808:	4770      	bxeq	lr
 80a480a:	b530      	push	{r4, r5, lr}
 80a480c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4810:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4814:	f04f 0500 	mov.w	r5, #0
 80a4818:	f04f 0100 	mov.w	r1, #0
 80a481c:	e750      	b.n	80a46c0 <__adddf3+0x138>
 80a481e:	bf00      	nop

080a4820 <__aeabi_i2d>:
 80a4820:	f090 0f00 	teq	r0, #0
 80a4824:	bf04      	itt	eq
 80a4826:	2100      	moveq	r1, #0
 80a4828:	4770      	bxeq	lr
 80a482a:	b530      	push	{r4, r5, lr}
 80a482c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4830:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4834:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4838:	bf48      	it	mi
 80a483a:	4240      	negmi	r0, r0
 80a483c:	f04f 0100 	mov.w	r1, #0
 80a4840:	e73e      	b.n	80a46c0 <__adddf3+0x138>
 80a4842:	bf00      	nop

080a4844 <__aeabi_f2d>:
 80a4844:	0042      	lsls	r2, r0, #1
 80a4846:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a484a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a484e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4852:	bf1f      	itttt	ne
 80a4854:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4858:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a485c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4860:	4770      	bxne	lr
 80a4862:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a4866:	bf08      	it	eq
 80a4868:	4770      	bxeq	lr
 80a486a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a486e:	bf04      	itt	eq
 80a4870:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a4874:	4770      	bxeq	lr
 80a4876:	b530      	push	{r4, r5, lr}
 80a4878:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a487c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4880:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4884:	e71c      	b.n	80a46c0 <__adddf3+0x138>
 80a4886:	bf00      	nop

080a4888 <__aeabi_ul2d>:
 80a4888:	ea50 0201 	orrs.w	r2, r0, r1
 80a488c:	bf08      	it	eq
 80a488e:	4770      	bxeq	lr
 80a4890:	b530      	push	{r4, r5, lr}
 80a4892:	f04f 0500 	mov.w	r5, #0
 80a4896:	e00a      	b.n	80a48ae <__aeabi_l2d+0x16>

080a4898 <__aeabi_l2d>:
 80a4898:	ea50 0201 	orrs.w	r2, r0, r1
 80a489c:	bf08      	it	eq
 80a489e:	4770      	bxeq	lr
 80a48a0:	b530      	push	{r4, r5, lr}
 80a48a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a48a6:	d502      	bpl.n	80a48ae <__aeabi_l2d+0x16>
 80a48a8:	4240      	negs	r0, r0
 80a48aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a48ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a48b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a48b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a48ba:	f43f aed8 	beq.w	80a466e <__adddf3+0xe6>
 80a48be:	f04f 0203 	mov.w	r2, #3
 80a48c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a48c6:	bf18      	it	ne
 80a48c8:	3203      	addne	r2, #3
 80a48ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a48ce:	bf18      	it	ne
 80a48d0:	3203      	addne	r2, #3
 80a48d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a48d6:	f1c2 0320 	rsb	r3, r2, #32
 80a48da:	fa00 fc03 	lsl.w	ip, r0, r3
 80a48de:	fa20 f002 	lsr.w	r0, r0, r2
 80a48e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a48e6:	ea40 000e 	orr.w	r0, r0, lr
 80a48ea:	fa21 f102 	lsr.w	r1, r1, r2
 80a48ee:	4414      	add	r4, r2
 80a48f0:	e6bd      	b.n	80a466e <__adddf3+0xe6>
 80a48f2:	bf00      	nop

080a48f4 <__aeabi_dmul>:
 80a48f4:	b570      	push	{r4, r5, r6, lr}
 80a48f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a48fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a48fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4902:	bf1d      	ittte	ne
 80a4904:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4908:	ea94 0f0c 	teqne	r4, ip
 80a490c:	ea95 0f0c 	teqne	r5, ip
 80a4910:	f000 f8de 	bleq	80a4ad0 <__aeabi_dmul+0x1dc>
 80a4914:	442c      	add	r4, r5
 80a4916:	ea81 0603 	eor.w	r6, r1, r3
 80a491a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a491e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4922:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4926:	bf18      	it	ne
 80a4928:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a492c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4934:	d038      	beq.n	80a49a8 <__aeabi_dmul+0xb4>
 80a4936:	fba0 ce02 	umull	ip, lr, r0, r2
 80a493a:	f04f 0500 	mov.w	r5, #0
 80a493e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4942:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4946:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a494a:	f04f 0600 	mov.w	r6, #0
 80a494e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4952:	f09c 0f00 	teq	ip, #0
 80a4956:	bf18      	it	ne
 80a4958:	f04e 0e01 	orrne.w	lr, lr, #1
 80a495c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4960:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4964:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4968:	d204      	bcs.n	80a4974 <__aeabi_dmul+0x80>
 80a496a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a496e:	416d      	adcs	r5, r5
 80a4970:	eb46 0606 	adc.w	r6, r6, r6
 80a4974:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4978:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a497c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4980:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4984:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4988:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a498c:	bf88      	it	hi
 80a498e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4992:	d81e      	bhi.n	80a49d2 <__aeabi_dmul+0xde>
 80a4994:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4998:	bf08      	it	eq
 80a499a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a499e:	f150 0000 	adcs.w	r0, r0, #0
 80a49a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a49a6:	bd70      	pop	{r4, r5, r6, pc}
 80a49a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a49ac:	ea46 0101 	orr.w	r1, r6, r1
 80a49b0:	ea40 0002 	orr.w	r0, r0, r2
 80a49b4:	ea81 0103 	eor.w	r1, r1, r3
 80a49b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a49bc:	bfc2      	ittt	gt
 80a49be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a49c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a49c6:	bd70      	popgt	{r4, r5, r6, pc}
 80a49c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a49cc:	f04f 0e00 	mov.w	lr, #0
 80a49d0:	3c01      	subs	r4, #1
 80a49d2:	f300 80ab 	bgt.w	80a4b2c <__aeabi_dmul+0x238>
 80a49d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a49da:	bfde      	ittt	le
 80a49dc:	2000      	movle	r0, #0
 80a49de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a49e2:	bd70      	pople	{r4, r5, r6, pc}
 80a49e4:	f1c4 0400 	rsb	r4, r4, #0
 80a49e8:	3c20      	subs	r4, #32
 80a49ea:	da35      	bge.n	80a4a58 <__aeabi_dmul+0x164>
 80a49ec:	340c      	adds	r4, #12
 80a49ee:	dc1b      	bgt.n	80a4a28 <__aeabi_dmul+0x134>
 80a49f0:	f104 0414 	add.w	r4, r4, #20
 80a49f4:	f1c4 0520 	rsb	r5, r4, #32
 80a49f8:	fa00 f305 	lsl.w	r3, r0, r5
 80a49fc:	fa20 f004 	lsr.w	r0, r0, r4
 80a4a00:	fa01 f205 	lsl.w	r2, r1, r5
 80a4a04:	ea40 0002 	orr.w	r0, r0, r2
 80a4a08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4a0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4a10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4a14:	fa21 f604 	lsr.w	r6, r1, r4
 80a4a18:	eb42 0106 	adc.w	r1, r2, r6
 80a4a1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4a20:	bf08      	it	eq
 80a4a22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4a26:	bd70      	pop	{r4, r5, r6, pc}
 80a4a28:	f1c4 040c 	rsb	r4, r4, #12
 80a4a2c:	f1c4 0520 	rsb	r5, r4, #32
 80a4a30:	fa00 f304 	lsl.w	r3, r0, r4
 80a4a34:	fa20 f005 	lsr.w	r0, r0, r5
 80a4a38:	fa01 f204 	lsl.w	r2, r1, r4
 80a4a3c:	ea40 0002 	orr.w	r0, r0, r2
 80a4a40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4a44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4a48:	f141 0100 	adc.w	r1, r1, #0
 80a4a4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4a50:	bf08      	it	eq
 80a4a52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4a56:	bd70      	pop	{r4, r5, r6, pc}
 80a4a58:	f1c4 0520 	rsb	r5, r4, #32
 80a4a5c:	fa00 f205 	lsl.w	r2, r0, r5
 80a4a60:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4a64:	fa20 f304 	lsr.w	r3, r0, r4
 80a4a68:	fa01 f205 	lsl.w	r2, r1, r5
 80a4a6c:	ea43 0302 	orr.w	r3, r3, r2
 80a4a70:	fa21 f004 	lsr.w	r0, r1, r4
 80a4a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4a78:	fa21 f204 	lsr.w	r2, r1, r4
 80a4a7c:	ea20 0002 	bic.w	r0, r0, r2
 80a4a80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4a84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4a88:	bf08      	it	eq
 80a4a8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4a8e:	bd70      	pop	{r4, r5, r6, pc}
 80a4a90:	f094 0f00 	teq	r4, #0
 80a4a94:	d10f      	bne.n	80a4ab6 <__aeabi_dmul+0x1c2>
 80a4a96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4a9a:	0040      	lsls	r0, r0, #1
 80a4a9c:	eb41 0101 	adc.w	r1, r1, r1
 80a4aa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4aa4:	bf08      	it	eq
 80a4aa6:	3c01      	subeq	r4, #1
 80a4aa8:	d0f7      	beq.n	80a4a9a <__aeabi_dmul+0x1a6>
 80a4aaa:	ea41 0106 	orr.w	r1, r1, r6
 80a4aae:	f095 0f00 	teq	r5, #0
 80a4ab2:	bf18      	it	ne
 80a4ab4:	4770      	bxne	lr
 80a4ab6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a4aba:	0052      	lsls	r2, r2, #1
 80a4abc:	eb43 0303 	adc.w	r3, r3, r3
 80a4ac0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4ac4:	bf08      	it	eq
 80a4ac6:	3d01      	subeq	r5, #1
 80a4ac8:	d0f7      	beq.n	80a4aba <__aeabi_dmul+0x1c6>
 80a4aca:	ea43 0306 	orr.w	r3, r3, r6
 80a4ace:	4770      	bx	lr
 80a4ad0:	ea94 0f0c 	teq	r4, ip
 80a4ad4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4ad8:	bf18      	it	ne
 80a4ada:	ea95 0f0c 	teqne	r5, ip
 80a4ade:	d00c      	beq.n	80a4afa <__aeabi_dmul+0x206>
 80a4ae0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4ae4:	bf18      	it	ne
 80a4ae6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4aea:	d1d1      	bne.n	80a4a90 <__aeabi_dmul+0x19c>
 80a4aec:	ea81 0103 	eor.w	r1, r1, r3
 80a4af0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4af4:	f04f 0000 	mov.w	r0, #0
 80a4af8:	bd70      	pop	{r4, r5, r6, pc}
 80a4afa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4afe:	bf06      	itte	eq
 80a4b00:	4610      	moveq	r0, r2
 80a4b02:	4619      	moveq	r1, r3
 80a4b04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4b08:	d019      	beq.n	80a4b3e <__aeabi_dmul+0x24a>
 80a4b0a:	ea94 0f0c 	teq	r4, ip
 80a4b0e:	d102      	bne.n	80a4b16 <__aeabi_dmul+0x222>
 80a4b10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4b14:	d113      	bne.n	80a4b3e <__aeabi_dmul+0x24a>
 80a4b16:	ea95 0f0c 	teq	r5, ip
 80a4b1a:	d105      	bne.n	80a4b28 <__aeabi_dmul+0x234>
 80a4b1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4b20:	bf1c      	itt	ne
 80a4b22:	4610      	movne	r0, r2
 80a4b24:	4619      	movne	r1, r3
 80a4b26:	d10a      	bne.n	80a4b3e <__aeabi_dmul+0x24a>
 80a4b28:	ea81 0103 	eor.w	r1, r1, r3
 80a4b2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4b30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4b34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4b38:	f04f 0000 	mov.w	r0, #0
 80a4b3c:	bd70      	pop	{r4, r5, r6, pc}
 80a4b3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4b42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4b46:	bd70      	pop	{r4, r5, r6, pc}

080a4b48 <__aeabi_ddiv>:
 80a4b48:	b570      	push	{r4, r5, r6, lr}
 80a4b4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4b4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4b52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4b56:	bf1d      	ittte	ne
 80a4b58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4b5c:	ea94 0f0c 	teqne	r4, ip
 80a4b60:	ea95 0f0c 	teqne	r5, ip
 80a4b64:	f000 f8a7 	bleq	80a4cb6 <__aeabi_ddiv+0x16e>
 80a4b68:	eba4 0405 	sub.w	r4, r4, r5
 80a4b6c:	ea81 0e03 	eor.w	lr, r1, r3
 80a4b70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4b74:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4b78:	f000 8088 	beq.w	80a4c8c <__aeabi_ddiv+0x144>
 80a4b7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4b80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4b84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4b88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4b8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4b90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4b94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4b98:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4b9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4ba0:	429d      	cmp	r5, r3
 80a4ba2:	bf08      	it	eq
 80a4ba4:	4296      	cmpeq	r6, r2
 80a4ba6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4baa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4bae:	d202      	bcs.n	80a4bb6 <__aeabi_ddiv+0x6e>
 80a4bb0:	085b      	lsrs	r3, r3, #1
 80a4bb2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4bb6:	1ab6      	subs	r6, r6, r2
 80a4bb8:	eb65 0503 	sbc.w	r5, r5, r3
 80a4bbc:	085b      	lsrs	r3, r3, #1
 80a4bbe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4bc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4bc6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4bca:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4bce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4bd2:	bf22      	ittt	cs
 80a4bd4:	1ab6      	subcs	r6, r6, r2
 80a4bd6:	4675      	movcs	r5, lr
 80a4bd8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4bdc:	085b      	lsrs	r3, r3, #1
 80a4bde:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4be2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4be6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4bea:	bf22      	ittt	cs
 80a4bec:	1ab6      	subcs	r6, r6, r2
 80a4bee:	4675      	movcs	r5, lr
 80a4bf0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4bf4:	085b      	lsrs	r3, r3, #1
 80a4bf6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4bfa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4bfe:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4c02:	bf22      	ittt	cs
 80a4c04:	1ab6      	subcs	r6, r6, r2
 80a4c06:	4675      	movcs	r5, lr
 80a4c08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4c0c:	085b      	lsrs	r3, r3, #1
 80a4c0e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4c12:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4c16:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4c1a:	bf22      	ittt	cs
 80a4c1c:	1ab6      	subcs	r6, r6, r2
 80a4c1e:	4675      	movcs	r5, lr
 80a4c20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4c24:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4c28:	d018      	beq.n	80a4c5c <__aeabi_ddiv+0x114>
 80a4c2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4c2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4c32:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4c36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4c3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4c3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4c42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4c46:	d1c0      	bne.n	80a4bca <__aeabi_ddiv+0x82>
 80a4c48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4c4c:	d10b      	bne.n	80a4c66 <__aeabi_ddiv+0x11e>
 80a4c4e:	ea41 0100 	orr.w	r1, r1, r0
 80a4c52:	f04f 0000 	mov.w	r0, #0
 80a4c56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4c5a:	e7b6      	b.n	80a4bca <__aeabi_ddiv+0x82>
 80a4c5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4c60:	bf04      	itt	eq
 80a4c62:	4301      	orreq	r1, r0
 80a4c64:	2000      	moveq	r0, #0
 80a4c66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4c6a:	bf88      	it	hi
 80a4c6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4c70:	f63f aeaf 	bhi.w	80a49d2 <__aeabi_dmul+0xde>
 80a4c74:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4c78:	bf04      	itt	eq
 80a4c7a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4c7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4c82:	f150 0000 	adcs.w	r0, r0, #0
 80a4c86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4c8a:	bd70      	pop	{r4, r5, r6, pc}
 80a4c8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4c90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4c94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4c98:	bfc2      	ittt	gt
 80a4c9a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4c9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4ca2:	bd70      	popgt	{r4, r5, r6, pc}
 80a4ca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4ca8:	f04f 0e00 	mov.w	lr, #0
 80a4cac:	3c01      	subs	r4, #1
 80a4cae:	e690      	b.n	80a49d2 <__aeabi_dmul+0xde>
 80a4cb0:	ea45 0e06 	orr.w	lr, r5, r6
 80a4cb4:	e68d      	b.n	80a49d2 <__aeabi_dmul+0xde>
 80a4cb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4cba:	ea94 0f0c 	teq	r4, ip
 80a4cbe:	bf08      	it	eq
 80a4cc0:	ea95 0f0c 	teqeq	r5, ip
 80a4cc4:	f43f af3b 	beq.w	80a4b3e <__aeabi_dmul+0x24a>
 80a4cc8:	ea94 0f0c 	teq	r4, ip
 80a4ccc:	d10a      	bne.n	80a4ce4 <__aeabi_ddiv+0x19c>
 80a4cce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4cd2:	f47f af34 	bne.w	80a4b3e <__aeabi_dmul+0x24a>
 80a4cd6:	ea95 0f0c 	teq	r5, ip
 80a4cda:	f47f af25 	bne.w	80a4b28 <__aeabi_dmul+0x234>
 80a4cde:	4610      	mov	r0, r2
 80a4ce0:	4619      	mov	r1, r3
 80a4ce2:	e72c      	b.n	80a4b3e <__aeabi_dmul+0x24a>
 80a4ce4:	ea95 0f0c 	teq	r5, ip
 80a4ce8:	d106      	bne.n	80a4cf8 <__aeabi_ddiv+0x1b0>
 80a4cea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4cee:	f43f aefd 	beq.w	80a4aec <__aeabi_dmul+0x1f8>
 80a4cf2:	4610      	mov	r0, r2
 80a4cf4:	4619      	mov	r1, r3
 80a4cf6:	e722      	b.n	80a4b3e <__aeabi_dmul+0x24a>
 80a4cf8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4cfc:	bf18      	it	ne
 80a4cfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4d02:	f47f aec5 	bne.w	80a4a90 <__aeabi_dmul+0x19c>
 80a4d06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4d0a:	f47f af0d 	bne.w	80a4b28 <__aeabi_dmul+0x234>
 80a4d0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4d12:	f47f aeeb 	bne.w	80a4aec <__aeabi_dmul+0x1f8>
 80a4d16:	e712      	b.n	80a4b3e <__aeabi_dmul+0x24a>

080a4d18 <__gedf2>:
 80a4d18:	f04f 3cff 	mov.w	ip, #4294967295
 80a4d1c:	e006      	b.n	80a4d2c <__cmpdf2+0x4>
 80a4d1e:	bf00      	nop

080a4d20 <__ledf2>:
 80a4d20:	f04f 0c01 	mov.w	ip, #1
 80a4d24:	e002      	b.n	80a4d2c <__cmpdf2+0x4>
 80a4d26:	bf00      	nop

080a4d28 <__cmpdf2>:
 80a4d28:	f04f 0c01 	mov.w	ip, #1
 80a4d2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4d30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4d34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4d38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4d3c:	bf18      	it	ne
 80a4d3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4d42:	d01b      	beq.n	80a4d7c <__cmpdf2+0x54>
 80a4d44:	b001      	add	sp, #4
 80a4d46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4d4a:	bf0c      	ite	eq
 80a4d4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4d50:	ea91 0f03 	teqne	r1, r3
 80a4d54:	bf02      	ittt	eq
 80a4d56:	ea90 0f02 	teqeq	r0, r2
 80a4d5a:	2000      	moveq	r0, #0
 80a4d5c:	4770      	bxeq	lr
 80a4d5e:	f110 0f00 	cmn.w	r0, #0
 80a4d62:	ea91 0f03 	teq	r1, r3
 80a4d66:	bf58      	it	pl
 80a4d68:	4299      	cmppl	r1, r3
 80a4d6a:	bf08      	it	eq
 80a4d6c:	4290      	cmpeq	r0, r2
 80a4d6e:	bf2c      	ite	cs
 80a4d70:	17d8      	asrcs	r0, r3, #31
 80a4d72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4d76:	f040 0001 	orr.w	r0, r0, #1
 80a4d7a:	4770      	bx	lr
 80a4d7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4d80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4d84:	d102      	bne.n	80a4d8c <__cmpdf2+0x64>
 80a4d86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4d8a:	d107      	bne.n	80a4d9c <__cmpdf2+0x74>
 80a4d8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4d94:	d1d6      	bne.n	80a4d44 <__cmpdf2+0x1c>
 80a4d96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4d9a:	d0d3      	beq.n	80a4d44 <__cmpdf2+0x1c>
 80a4d9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4da0:	4770      	bx	lr
 80a4da2:	bf00      	nop

080a4da4 <__aeabi_cdrcmple>:
 80a4da4:	4684      	mov	ip, r0
 80a4da6:	4610      	mov	r0, r2
 80a4da8:	4662      	mov	r2, ip
 80a4daa:	468c      	mov	ip, r1
 80a4dac:	4619      	mov	r1, r3
 80a4dae:	4663      	mov	r3, ip
 80a4db0:	e000      	b.n	80a4db4 <__aeabi_cdcmpeq>
 80a4db2:	bf00      	nop

080a4db4 <__aeabi_cdcmpeq>:
 80a4db4:	b501      	push	{r0, lr}
 80a4db6:	f7ff ffb7 	bl	80a4d28 <__cmpdf2>
 80a4dba:	2800      	cmp	r0, #0
 80a4dbc:	bf48      	it	mi
 80a4dbe:	f110 0f00 	cmnmi.w	r0, #0
 80a4dc2:	bd01      	pop	{r0, pc}

080a4dc4 <__aeabi_dcmpeq>:
 80a4dc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4dc8:	f7ff fff4 	bl	80a4db4 <__aeabi_cdcmpeq>
 80a4dcc:	bf0c      	ite	eq
 80a4dce:	2001      	moveq	r0, #1
 80a4dd0:	2000      	movne	r0, #0
 80a4dd2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4dd6:	bf00      	nop

080a4dd8 <__aeabi_dcmplt>:
 80a4dd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ddc:	f7ff ffea 	bl	80a4db4 <__aeabi_cdcmpeq>
 80a4de0:	bf34      	ite	cc
 80a4de2:	2001      	movcc	r0, #1
 80a4de4:	2000      	movcs	r0, #0
 80a4de6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4dea:	bf00      	nop

080a4dec <__aeabi_dcmple>:
 80a4dec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4df0:	f7ff ffe0 	bl	80a4db4 <__aeabi_cdcmpeq>
 80a4df4:	bf94      	ite	ls
 80a4df6:	2001      	movls	r0, #1
 80a4df8:	2000      	movhi	r0, #0
 80a4dfa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4dfe:	bf00      	nop

080a4e00 <__aeabi_dcmpge>:
 80a4e00:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4e04:	f7ff ffce 	bl	80a4da4 <__aeabi_cdrcmple>
 80a4e08:	bf94      	ite	ls
 80a4e0a:	2001      	movls	r0, #1
 80a4e0c:	2000      	movhi	r0, #0
 80a4e0e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4e12:	bf00      	nop

080a4e14 <__aeabi_dcmpgt>:
 80a4e14:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4e18:	f7ff ffc4 	bl	80a4da4 <__aeabi_cdrcmple>
 80a4e1c:	bf34      	ite	cc
 80a4e1e:	2001      	movcc	r0, #1
 80a4e20:	2000      	movcs	r0, #0
 80a4e22:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4e26:	bf00      	nop

080a4e28 <__aeabi_dcmpun>:
 80a4e28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4e2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4e30:	d102      	bne.n	80a4e38 <__aeabi_dcmpun+0x10>
 80a4e32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4e36:	d10a      	bne.n	80a4e4e <__aeabi_dcmpun+0x26>
 80a4e38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4e40:	d102      	bne.n	80a4e48 <__aeabi_dcmpun+0x20>
 80a4e42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4e46:	d102      	bne.n	80a4e4e <__aeabi_dcmpun+0x26>
 80a4e48:	f04f 0000 	mov.w	r0, #0
 80a4e4c:	4770      	bx	lr
 80a4e4e:	f04f 0001 	mov.w	r0, #1
 80a4e52:	4770      	bx	lr

080a4e54 <__aeabi_d2iz>:
 80a4e54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4e58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4e5c:	d215      	bcs.n	80a4e8a <__aeabi_d2iz+0x36>
 80a4e5e:	d511      	bpl.n	80a4e84 <__aeabi_d2iz+0x30>
 80a4e60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4e64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4e68:	d912      	bls.n	80a4e90 <__aeabi_d2iz+0x3c>
 80a4e6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4e6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4e72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4e76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4e7a:	fa23 f002 	lsr.w	r0, r3, r2
 80a4e7e:	bf18      	it	ne
 80a4e80:	4240      	negne	r0, r0
 80a4e82:	4770      	bx	lr
 80a4e84:	f04f 0000 	mov.w	r0, #0
 80a4e88:	4770      	bx	lr
 80a4e8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4e8e:	d105      	bne.n	80a4e9c <__aeabi_d2iz+0x48>
 80a4e90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4e94:	bf08      	it	eq
 80a4e96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4e9a:	4770      	bx	lr
 80a4e9c:	f04f 0000 	mov.w	r0, #0
 80a4ea0:	4770      	bx	lr
 80a4ea2:	bf00      	nop

080a4ea4 <__aeabi_d2uiz>:
 80a4ea4:	004a      	lsls	r2, r1, #1
 80a4ea6:	d211      	bcs.n	80a4ecc <__aeabi_d2uiz+0x28>
 80a4ea8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4eac:	d211      	bcs.n	80a4ed2 <__aeabi_d2uiz+0x2e>
 80a4eae:	d50d      	bpl.n	80a4ecc <__aeabi_d2uiz+0x28>
 80a4eb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4eb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4eb8:	d40e      	bmi.n	80a4ed8 <__aeabi_d2uiz+0x34>
 80a4eba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4ec2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4ec6:	fa23 f002 	lsr.w	r0, r3, r2
 80a4eca:	4770      	bx	lr
 80a4ecc:	f04f 0000 	mov.w	r0, #0
 80a4ed0:	4770      	bx	lr
 80a4ed2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4ed6:	d102      	bne.n	80a4ede <__aeabi_d2uiz+0x3a>
 80a4ed8:	f04f 30ff 	mov.w	r0, #4294967295
 80a4edc:	4770      	bx	lr
 80a4ede:	f04f 0000 	mov.w	r0, #0
 80a4ee2:	4770      	bx	lr

080a4ee4 <__aeabi_d2f>:
 80a4ee4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4ee8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4eec:	bf24      	itt	cs
 80a4eee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4ef2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4ef6:	d90d      	bls.n	80a4f14 <__aeabi_d2f+0x30>
 80a4ef8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4efc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4f00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4f04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4f08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4f0c:	bf08      	it	eq
 80a4f0e:	f020 0001 	biceq.w	r0, r0, #1
 80a4f12:	4770      	bx	lr
 80a4f14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4f18:	d121      	bne.n	80a4f5e <__aeabi_d2f+0x7a>
 80a4f1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4f1e:	bfbc      	itt	lt
 80a4f20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4f24:	4770      	bxlt	lr
 80a4f26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4f2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4f2e:	f1c2 0218 	rsb	r2, r2, #24
 80a4f32:	f1c2 0c20 	rsb	ip, r2, #32
 80a4f36:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4f3a:	fa20 f002 	lsr.w	r0, r0, r2
 80a4f3e:	bf18      	it	ne
 80a4f40:	f040 0001 	orrne.w	r0, r0, #1
 80a4f44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4f48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4f4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4f50:	ea40 000c 	orr.w	r0, r0, ip
 80a4f54:	fa23 f302 	lsr.w	r3, r3, r2
 80a4f58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4f5c:	e7cc      	b.n	80a4ef8 <__aeabi_d2f+0x14>
 80a4f5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4f62:	d107      	bne.n	80a4f74 <__aeabi_d2f+0x90>
 80a4f64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4f68:	bf1e      	ittt	ne
 80a4f6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4f6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4f72:	4770      	bxne	lr
 80a4f74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4f78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4f7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4f80:	4770      	bx	lr
 80a4f82:	bf00      	nop

080a4f84 <__aeabi_d2ulz>:
 80a4f84:	b5d0      	push	{r4, r6, r7, lr}
 80a4f86:	2200      	movs	r2, #0
 80a4f88:	4b0b      	ldr	r3, [pc, #44]	; (80a4fb8 <__aeabi_d2ulz+0x34>)
 80a4f8a:	4606      	mov	r6, r0
 80a4f8c:	460f      	mov	r7, r1
 80a4f8e:	f7ff fcb1 	bl	80a48f4 <__aeabi_dmul>
 80a4f92:	f7ff ff87 	bl	80a4ea4 <__aeabi_d2uiz>
 80a4f96:	4604      	mov	r4, r0
 80a4f98:	f7ff fc32 	bl	80a4800 <__aeabi_ui2d>
 80a4f9c:	2200      	movs	r2, #0
 80a4f9e:	4b07      	ldr	r3, [pc, #28]	; (80a4fbc <__aeabi_d2ulz+0x38>)
 80a4fa0:	f7ff fca8 	bl	80a48f4 <__aeabi_dmul>
 80a4fa4:	4602      	mov	r2, r0
 80a4fa6:	460b      	mov	r3, r1
 80a4fa8:	4630      	mov	r0, r6
 80a4faa:	4639      	mov	r1, r7
 80a4fac:	f7ff faea 	bl	80a4584 <__aeabi_dsub>
 80a4fb0:	f7ff ff78 	bl	80a4ea4 <__aeabi_d2uiz>
 80a4fb4:	4621      	mov	r1, r4
 80a4fb6:	bdd0      	pop	{r4, r6, r7, pc}
 80a4fb8:	3df00000 	.word	0x3df00000
 80a4fbc:	41f00000 	.word	0x41f00000

080a4fc0 <atof>:
 80a4fc0:	2100      	movs	r1, #0
 80a4fc2:	f000 be9d 	b.w	80a5d00 <strtod>

080a4fc6 <atoi>:
 80a4fc6:	220a      	movs	r2, #10
 80a4fc8:	2100      	movs	r1, #0
 80a4fca:	f000 bf1f 	b.w	80a5e0c <strtol>

080a4fce <atol>:
 80a4fce:	220a      	movs	r2, #10
 80a4fd0:	2100      	movs	r1, #0
 80a4fd2:	f000 bf1b 	b.w	80a5e0c <strtol>
	...

080a4fd8 <__cxa_atexit>:
 80a4fd8:	b510      	push	{r4, lr}
 80a4fda:	4604      	mov	r4, r0
 80a4fdc:	4804      	ldr	r0, [pc, #16]	; (80a4ff0 <__cxa_atexit+0x18>)
 80a4fde:	4613      	mov	r3, r2
 80a4fe0:	b120      	cbz	r0, 80a4fec <__cxa_atexit+0x14>
 80a4fe2:	460a      	mov	r2, r1
 80a4fe4:	2002      	movs	r0, #2
 80a4fe6:	4621      	mov	r1, r4
 80a4fe8:	f3af 8000 	nop.w
 80a4fec:	bd10      	pop	{r4, pc}
 80a4fee:	bf00      	nop
 80a4ff0:	00000000 	.word	0x00000000

080a4ff4 <memcpy>:
 80a4ff4:	440a      	add	r2, r1
 80a4ff6:	4291      	cmp	r1, r2
 80a4ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 80a4ffc:	d100      	bne.n	80a5000 <memcpy+0xc>
 80a4ffe:	4770      	bx	lr
 80a5000:	b510      	push	{r4, lr}
 80a5002:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5006:	4291      	cmp	r1, r2
 80a5008:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a500c:	d1f9      	bne.n	80a5002 <memcpy+0xe>
 80a500e:	bd10      	pop	{r4, pc}

080a5010 <memset>:
 80a5010:	4603      	mov	r3, r0
 80a5012:	4402      	add	r2, r0
 80a5014:	4293      	cmp	r3, r2
 80a5016:	d100      	bne.n	80a501a <memset+0xa>
 80a5018:	4770      	bx	lr
 80a501a:	f803 1b01 	strb.w	r1, [r3], #1
 80a501e:	e7f9      	b.n	80a5014 <memset+0x4>

080a5020 <srand>:
 80a5020:	b538      	push	{r3, r4, r5, lr}
 80a5022:	4b0d      	ldr	r3, [pc, #52]	; (80a5058 <srand+0x38>)
 80a5024:	4604      	mov	r4, r0
 80a5026:	681d      	ldr	r5, [r3, #0]
 80a5028:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a502a:	b97b      	cbnz	r3, 80a504c <srand+0x2c>
 80a502c:	2018      	movs	r0, #24
 80a502e:	f7fd ff03 	bl	80a2e38 <malloc>
 80a5032:	4a0a      	ldr	r2, [pc, #40]	; (80a505c <srand+0x3c>)
 80a5034:	4b0a      	ldr	r3, [pc, #40]	; (80a5060 <srand+0x40>)
 80a5036:	63a8      	str	r0, [r5, #56]	; 0x38
 80a5038:	e9c0 2300 	strd	r2, r3, [r0]
 80a503c:	4b09      	ldr	r3, [pc, #36]	; (80a5064 <srand+0x44>)
 80a503e:	2201      	movs	r2, #1
 80a5040:	6083      	str	r3, [r0, #8]
 80a5042:	230b      	movs	r3, #11
 80a5044:	8183      	strh	r3, [r0, #12]
 80a5046:	2300      	movs	r3, #0
 80a5048:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a504c:	2200      	movs	r2, #0
 80a504e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a5050:	611c      	str	r4, [r3, #16]
 80a5052:	615a      	str	r2, [r3, #20]
 80a5054:	bd38      	pop	{r3, r4, r5, pc}
 80a5056:	bf00      	nop
 80a5058:	20000004 	.word	0x20000004
 80a505c:	abcd330e 	.word	0xabcd330e
 80a5060:	e66d1234 	.word	0xe66d1234
 80a5064:	0005deec 	.word	0x0005deec

080a5068 <strcmp>:
 80a5068:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a506c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a5070:	2a01      	cmp	r2, #1
 80a5072:	bf28      	it	cs
 80a5074:	429a      	cmpcs	r2, r3
 80a5076:	d0f7      	beq.n	80a5068 <strcmp>
 80a5078:	1ad0      	subs	r0, r2, r3
 80a507a:	4770      	bx	lr

080a507c <strlen>:
 80a507c:	4603      	mov	r3, r0
 80a507e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5082:	2a00      	cmp	r2, #0
 80a5084:	d1fb      	bne.n	80a507e <strlen+0x2>
 80a5086:	1a18      	subs	r0, r3, r0
 80a5088:	3801      	subs	r0, #1
 80a508a:	4770      	bx	lr

080a508c <strncmp>:
 80a508c:	b510      	push	{r4, lr}
 80a508e:	b16a      	cbz	r2, 80a50ac <strncmp+0x20>
 80a5090:	3901      	subs	r1, #1
 80a5092:	1884      	adds	r4, r0, r2
 80a5094:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a5098:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a509c:	4293      	cmp	r3, r2
 80a509e:	d103      	bne.n	80a50a8 <strncmp+0x1c>
 80a50a0:	42a0      	cmp	r0, r4
 80a50a2:	d001      	beq.n	80a50a8 <strncmp+0x1c>
 80a50a4:	2b00      	cmp	r3, #0
 80a50a6:	d1f5      	bne.n	80a5094 <strncmp+0x8>
 80a50a8:	1a98      	subs	r0, r3, r2
 80a50aa:	bd10      	pop	{r4, pc}
 80a50ac:	4610      	mov	r0, r2
 80a50ae:	e7fc      	b.n	80a50aa <strncmp+0x1e>

080a50b0 <strncpy>:
 80a50b0:	4603      	mov	r3, r0
 80a50b2:	b510      	push	{r4, lr}
 80a50b4:	3901      	subs	r1, #1
 80a50b6:	b132      	cbz	r2, 80a50c6 <strncpy+0x16>
 80a50b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a50bc:	3a01      	subs	r2, #1
 80a50be:	f803 4b01 	strb.w	r4, [r3], #1
 80a50c2:	2c00      	cmp	r4, #0
 80a50c4:	d1f7      	bne.n	80a50b6 <strncpy+0x6>
 80a50c6:	2100      	movs	r1, #0
 80a50c8:	441a      	add	r2, r3
 80a50ca:	4293      	cmp	r3, r2
 80a50cc:	d100      	bne.n	80a50d0 <strncpy+0x20>
 80a50ce:	bd10      	pop	{r4, pc}
 80a50d0:	f803 1b01 	strb.w	r1, [r3], #1
 80a50d4:	e7f9      	b.n	80a50ca <strncpy+0x1a>

080a50d6 <sulp>:
 80a50d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a50da:	460f      	mov	r7, r1
 80a50dc:	4690      	mov	r8, r2
 80a50de:	f001 fd03 	bl	80a6ae8 <__ulp>
 80a50e2:	4604      	mov	r4, r0
 80a50e4:	460d      	mov	r5, r1
 80a50e6:	f1b8 0f00 	cmp.w	r8, #0
 80a50ea:	d011      	beq.n	80a5110 <sulp+0x3a>
 80a50ec:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a50f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a50f4:	2b00      	cmp	r3, #0
 80a50f6:	dd0b      	ble.n	80a5110 <sulp+0x3a>
 80a50f8:	2400      	movs	r4, #0
 80a50fa:	051b      	lsls	r3, r3, #20
 80a50fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a5100:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a5104:	4622      	mov	r2, r4
 80a5106:	462b      	mov	r3, r5
 80a5108:	f7ff fbf4 	bl	80a48f4 <__aeabi_dmul>
 80a510c:	4604      	mov	r4, r0
 80a510e:	460d      	mov	r5, r1
 80a5110:	4620      	mov	r0, r4
 80a5112:	4629      	mov	r1, r5
 80a5114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5118 <_strtod_l>:
 80a5118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a511c:	469b      	mov	fp, r3
 80a511e:	2300      	movs	r3, #0
 80a5120:	b0a1      	sub	sp, #132	; 0x84
 80a5122:	931c      	str	r3, [sp, #112]	; 0x70
 80a5124:	4ba1      	ldr	r3, [pc, #644]	; (80a53ac <_strtod_l+0x294>)
 80a5126:	4682      	mov	sl, r0
 80a5128:	681f      	ldr	r7, [r3, #0]
 80a512a:	460e      	mov	r6, r1
 80a512c:	4638      	mov	r0, r7
 80a512e:	9217      	str	r2, [sp, #92]	; 0x5c
 80a5130:	f7ff ffa4 	bl	80a507c <strlen>
 80a5134:	f04f 0800 	mov.w	r8, #0
 80a5138:	4604      	mov	r4, r0
 80a513a:	f04f 0900 	mov.w	r9, #0
 80a513e:	961b      	str	r6, [sp, #108]	; 0x6c
 80a5140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a5142:	781a      	ldrb	r2, [r3, #0]
 80a5144:	2a2b      	cmp	r2, #43	; 0x2b
 80a5146:	d04c      	beq.n	80a51e2 <_strtod_l+0xca>
 80a5148:	d83a      	bhi.n	80a51c0 <_strtod_l+0xa8>
 80a514a:	2a0d      	cmp	r2, #13
 80a514c:	d833      	bhi.n	80a51b6 <_strtod_l+0x9e>
 80a514e:	2a08      	cmp	r2, #8
 80a5150:	d833      	bhi.n	80a51ba <_strtod_l+0xa2>
 80a5152:	2a00      	cmp	r2, #0
 80a5154:	d03d      	beq.n	80a51d2 <_strtod_l+0xba>
 80a5156:	2300      	movs	r3, #0
 80a5158:	930c      	str	r3, [sp, #48]	; 0x30
 80a515a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80a515c:	782b      	ldrb	r3, [r5, #0]
 80a515e:	2b30      	cmp	r3, #48	; 0x30
 80a5160:	f040 80af 	bne.w	80a52c2 <_strtod_l+0x1aa>
 80a5164:	786b      	ldrb	r3, [r5, #1]
 80a5166:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a516a:	2b58      	cmp	r3, #88	; 0x58
 80a516c:	d16c      	bne.n	80a5248 <_strtod_l+0x130>
 80a516e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a5170:	4650      	mov	r0, sl
 80a5172:	9301      	str	r3, [sp, #4]
 80a5174:	ab1c      	add	r3, sp, #112	; 0x70
 80a5176:	9300      	str	r3, [sp, #0]
 80a5178:	4a8d      	ldr	r2, [pc, #564]	; (80a53b0 <_strtod_l+0x298>)
 80a517a:	f8cd b008 	str.w	fp, [sp, #8]
 80a517e:	ab1d      	add	r3, sp, #116	; 0x74
 80a5180:	a91b      	add	r1, sp, #108	; 0x6c
 80a5182:	f000 feb5 	bl	80a5ef0 <__gethex>
 80a5186:	f010 0607 	ands.w	r6, r0, #7
 80a518a:	4604      	mov	r4, r0
 80a518c:	d005      	beq.n	80a519a <_strtod_l+0x82>
 80a518e:	2e06      	cmp	r6, #6
 80a5190:	d129      	bne.n	80a51e6 <_strtod_l+0xce>
 80a5192:	2300      	movs	r3, #0
 80a5194:	3501      	adds	r5, #1
 80a5196:	951b      	str	r5, [sp, #108]	; 0x6c
 80a5198:	930c      	str	r3, [sp, #48]	; 0x30
 80a519a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a519c:	2b00      	cmp	r3, #0
 80a519e:	f040 8596 	bne.w	80a5cce <_strtod_l+0xbb6>
 80a51a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a51a4:	b1d3      	cbz	r3, 80a51dc <_strtod_l+0xc4>
 80a51a6:	4642      	mov	r2, r8
 80a51a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a51ac:	4610      	mov	r0, r2
 80a51ae:	4619      	mov	r1, r3
 80a51b0:	b021      	add	sp, #132	; 0x84
 80a51b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a51b6:	2a20      	cmp	r2, #32
 80a51b8:	d1cd      	bne.n	80a5156 <_strtod_l+0x3e>
 80a51ba:	3301      	adds	r3, #1
 80a51bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80a51be:	e7bf      	b.n	80a5140 <_strtod_l+0x28>
 80a51c0:	2a2d      	cmp	r2, #45	; 0x2d
 80a51c2:	d1c8      	bne.n	80a5156 <_strtod_l+0x3e>
 80a51c4:	2201      	movs	r2, #1
 80a51c6:	920c      	str	r2, [sp, #48]	; 0x30
 80a51c8:	1c5a      	adds	r2, r3, #1
 80a51ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80a51cc:	785b      	ldrb	r3, [r3, #1]
 80a51ce:	2b00      	cmp	r3, #0
 80a51d0:	d1c3      	bne.n	80a515a <_strtod_l+0x42>
 80a51d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a51d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80a51d6:	2b00      	cmp	r3, #0
 80a51d8:	f040 8577 	bne.w	80a5cca <_strtod_l+0xbb2>
 80a51dc:	4642      	mov	r2, r8
 80a51de:	464b      	mov	r3, r9
 80a51e0:	e7e4      	b.n	80a51ac <_strtod_l+0x94>
 80a51e2:	2200      	movs	r2, #0
 80a51e4:	e7ef      	b.n	80a51c6 <_strtod_l+0xae>
 80a51e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a51e8:	b13a      	cbz	r2, 80a51fa <_strtod_l+0xe2>
 80a51ea:	2135      	movs	r1, #53	; 0x35
 80a51ec:	a81e      	add	r0, sp, #120	; 0x78
 80a51ee:	f001 fd72 	bl	80a6cd6 <__copybits>
 80a51f2:	4650      	mov	r0, sl
 80a51f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a51f6:	f001 f9ad 	bl	80a6554 <_Bfree>
 80a51fa:	3e01      	subs	r6, #1
 80a51fc:	2e05      	cmp	r6, #5
 80a51fe:	d807      	bhi.n	80a5210 <_strtod_l+0xf8>
 80a5200:	e8df f006 	tbb	[pc, r6]
 80a5204:	1d180b0e 	.word	0x1d180b0e
 80a5208:	030e      	.short	0x030e
 80a520a:	f04f 0900 	mov.w	r9, #0
 80a520e:	46c8      	mov	r8, r9
 80a5210:	0721      	lsls	r1, r4, #28
 80a5212:	d5c2      	bpl.n	80a519a <_strtod_l+0x82>
 80a5214:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a5218:	e7bf      	b.n	80a519a <_strtod_l+0x82>
 80a521a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80a521e:	e7f7      	b.n	80a5210 <_strtod_l+0xf8>
 80a5220:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80a5222:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80a5226:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a522a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a522e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a5232:	e7ed      	b.n	80a5210 <_strtod_l+0xf8>
 80a5234:	f04f 0800 	mov.w	r8, #0
 80a5238:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80a53b4 <_strtod_l+0x29c>
 80a523c:	e7e8      	b.n	80a5210 <_strtod_l+0xf8>
 80a523e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a5242:	f04f 38ff 	mov.w	r8, #4294967295
 80a5246:	e7e3      	b.n	80a5210 <_strtod_l+0xf8>
 80a5248:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a524a:	1c5a      	adds	r2, r3, #1
 80a524c:	921b      	str	r2, [sp, #108]	; 0x6c
 80a524e:	785b      	ldrb	r3, [r3, #1]
 80a5250:	2b30      	cmp	r3, #48	; 0x30
 80a5252:	d0f9      	beq.n	80a5248 <_strtod_l+0x130>
 80a5254:	2b00      	cmp	r3, #0
 80a5256:	d0a0      	beq.n	80a519a <_strtod_l+0x82>
 80a5258:	2301      	movs	r3, #1
 80a525a:	9307      	str	r3, [sp, #28]
 80a525c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a525e:	220a      	movs	r2, #10
 80a5260:	9308      	str	r3, [sp, #32]
 80a5262:	2300      	movs	r3, #0
 80a5264:	469b      	mov	fp, r3
 80a5266:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80a526a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80a526c:	7805      	ldrb	r5, [r0, #0]
 80a526e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80a5272:	b2d9      	uxtb	r1, r3
 80a5274:	2909      	cmp	r1, #9
 80a5276:	d926      	bls.n	80a52c6 <_strtod_l+0x1ae>
 80a5278:	4622      	mov	r2, r4
 80a527a:	4639      	mov	r1, r7
 80a527c:	f7ff ff06 	bl	80a508c <strncmp>
 80a5280:	2800      	cmp	r0, #0
 80a5282:	d032      	beq.n	80a52ea <_strtod_l+0x1d2>
 80a5284:	2000      	movs	r0, #0
 80a5286:	462b      	mov	r3, r5
 80a5288:	465c      	mov	r4, fp
 80a528a:	4602      	mov	r2, r0
 80a528c:	9004      	str	r0, [sp, #16]
 80a528e:	2b65      	cmp	r3, #101	; 0x65
 80a5290:	d001      	beq.n	80a5296 <_strtod_l+0x17e>
 80a5292:	2b45      	cmp	r3, #69	; 0x45
 80a5294:	d113      	bne.n	80a52be <_strtod_l+0x1a6>
 80a5296:	b91c      	cbnz	r4, 80a52a0 <_strtod_l+0x188>
 80a5298:	9b07      	ldr	r3, [sp, #28]
 80a529a:	4303      	orrs	r3, r0
 80a529c:	d099      	beq.n	80a51d2 <_strtod_l+0xba>
 80a529e:	2400      	movs	r4, #0
 80a52a0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80a52a2:	1c73      	adds	r3, r6, #1
 80a52a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80a52a6:	7873      	ldrb	r3, [r6, #1]
 80a52a8:	2b2b      	cmp	r3, #43	; 0x2b
 80a52aa:	d078      	beq.n	80a539e <_strtod_l+0x286>
 80a52ac:	2b2d      	cmp	r3, #45	; 0x2d
 80a52ae:	d07b      	beq.n	80a53a8 <_strtod_l+0x290>
 80a52b0:	2700      	movs	r7, #0
 80a52b2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a52b6:	2909      	cmp	r1, #9
 80a52b8:	f240 8082 	bls.w	80a53c0 <_strtod_l+0x2a8>
 80a52bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80a52be:	2500      	movs	r5, #0
 80a52c0:	e09e      	b.n	80a5400 <_strtod_l+0x2e8>
 80a52c2:	2300      	movs	r3, #0
 80a52c4:	e7c9      	b.n	80a525a <_strtod_l+0x142>
 80a52c6:	f1bb 0f08 	cmp.w	fp, #8
 80a52ca:	bfd5      	itete	le
 80a52cc:	9906      	ldrle	r1, [sp, #24]
 80a52ce:	9905      	ldrgt	r1, [sp, #20]
 80a52d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80a52d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a52d8:	f100 0001 	add.w	r0, r0, #1
 80a52dc:	bfd4      	ite	le
 80a52de:	9306      	strle	r3, [sp, #24]
 80a52e0:	9305      	strgt	r3, [sp, #20]
 80a52e2:	f10b 0b01 	add.w	fp, fp, #1
 80a52e6:	901b      	str	r0, [sp, #108]	; 0x6c
 80a52e8:	e7bf      	b.n	80a526a <_strtod_l+0x152>
 80a52ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a52ec:	191a      	adds	r2, r3, r4
 80a52ee:	921b      	str	r2, [sp, #108]	; 0x6c
 80a52f0:	5d1b      	ldrb	r3, [r3, r4]
 80a52f2:	f1bb 0f00 	cmp.w	fp, #0
 80a52f6:	d036      	beq.n	80a5366 <_strtod_l+0x24e>
 80a52f8:	465c      	mov	r4, fp
 80a52fa:	9004      	str	r0, [sp, #16]
 80a52fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80a5300:	2a09      	cmp	r2, #9
 80a5302:	d912      	bls.n	80a532a <_strtod_l+0x212>
 80a5304:	2201      	movs	r2, #1
 80a5306:	e7c2      	b.n	80a528e <_strtod_l+0x176>
 80a5308:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a530a:	3001      	adds	r0, #1
 80a530c:	1c5a      	adds	r2, r3, #1
 80a530e:	921b      	str	r2, [sp, #108]	; 0x6c
 80a5310:	785b      	ldrb	r3, [r3, #1]
 80a5312:	2b30      	cmp	r3, #48	; 0x30
 80a5314:	d0f8      	beq.n	80a5308 <_strtod_l+0x1f0>
 80a5316:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a531a:	2a08      	cmp	r2, #8
 80a531c:	f200 84dc 	bhi.w	80a5cd8 <_strtod_l+0xbc0>
 80a5320:	9004      	str	r0, [sp, #16]
 80a5322:	2000      	movs	r0, #0
 80a5324:	4604      	mov	r4, r0
 80a5326:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80a5328:	9208      	str	r2, [sp, #32]
 80a532a:	3b30      	subs	r3, #48	; 0x30
 80a532c:	f100 0201 	add.w	r2, r0, #1
 80a5330:	d013      	beq.n	80a535a <_strtod_l+0x242>
 80a5332:	9904      	ldr	r1, [sp, #16]
 80a5334:	1905      	adds	r5, r0, r4
 80a5336:	4411      	add	r1, r2
 80a5338:	9104      	str	r1, [sp, #16]
 80a533a:	4622      	mov	r2, r4
 80a533c:	210a      	movs	r1, #10
 80a533e:	42aa      	cmp	r2, r5
 80a5340:	d113      	bne.n	80a536a <_strtod_l+0x252>
 80a5342:	1822      	adds	r2, r4, r0
 80a5344:	2a08      	cmp	r2, #8
 80a5346:	f104 0401 	add.w	r4, r4, #1
 80a534a:	4404      	add	r4, r0
 80a534c:	dc1b      	bgt.n	80a5386 <_strtod_l+0x26e>
 80a534e:	220a      	movs	r2, #10
 80a5350:	9906      	ldr	r1, [sp, #24]
 80a5352:	fb02 3301 	mla	r3, r2, r1, r3
 80a5356:	9306      	str	r3, [sp, #24]
 80a5358:	2200      	movs	r2, #0
 80a535a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a535c:	4610      	mov	r0, r2
 80a535e:	1c59      	adds	r1, r3, #1
 80a5360:	911b      	str	r1, [sp, #108]	; 0x6c
 80a5362:	785b      	ldrb	r3, [r3, #1]
 80a5364:	e7ca      	b.n	80a52fc <_strtod_l+0x1e4>
 80a5366:	4658      	mov	r0, fp
 80a5368:	e7d3      	b.n	80a5312 <_strtod_l+0x1fa>
 80a536a:	2a08      	cmp	r2, #8
 80a536c:	dc04      	bgt.n	80a5378 <_strtod_l+0x260>
 80a536e:	9f06      	ldr	r7, [sp, #24]
 80a5370:	434f      	muls	r7, r1
 80a5372:	9706      	str	r7, [sp, #24]
 80a5374:	3201      	adds	r2, #1
 80a5376:	e7e2      	b.n	80a533e <_strtod_l+0x226>
 80a5378:	1c57      	adds	r7, r2, #1
 80a537a:	2f10      	cmp	r7, #16
 80a537c:	bfde      	ittt	le
 80a537e:	9f05      	ldrle	r7, [sp, #20]
 80a5380:	434f      	mulle	r7, r1
 80a5382:	9705      	strle	r7, [sp, #20]
 80a5384:	e7f6      	b.n	80a5374 <_strtod_l+0x25c>
 80a5386:	2c10      	cmp	r4, #16
 80a5388:	bfdf      	itttt	le
 80a538a:	220a      	movle	r2, #10
 80a538c:	9905      	ldrle	r1, [sp, #20]
 80a538e:	fb02 3301 	mlale	r3, r2, r1, r3
 80a5392:	9305      	strle	r3, [sp, #20]
 80a5394:	e7e0      	b.n	80a5358 <_strtod_l+0x240>
 80a5396:	2300      	movs	r3, #0
 80a5398:	2201      	movs	r2, #1
 80a539a:	9304      	str	r3, [sp, #16]
 80a539c:	e77c      	b.n	80a5298 <_strtod_l+0x180>
 80a539e:	2700      	movs	r7, #0
 80a53a0:	1cb3      	adds	r3, r6, #2
 80a53a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80a53a4:	78b3      	ldrb	r3, [r6, #2]
 80a53a6:	e784      	b.n	80a52b2 <_strtod_l+0x19a>
 80a53a8:	2701      	movs	r7, #1
 80a53aa:	e7f9      	b.n	80a53a0 <_strtod_l+0x288>
 80a53ac:	080a823c 	.word	0x080a823c
 80a53b0:	080a80e8 	.word	0x080a80e8
 80a53b4:	7ff00000 	.word	0x7ff00000
 80a53b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a53ba:	1c59      	adds	r1, r3, #1
 80a53bc:	911b      	str	r1, [sp, #108]	; 0x6c
 80a53be:	785b      	ldrb	r3, [r3, #1]
 80a53c0:	2b30      	cmp	r3, #48	; 0x30
 80a53c2:	d0f9      	beq.n	80a53b8 <_strtod_l+0x2a0>
 80a53c4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80a53c8:	2908      	cmp	r1, #8
 80a53ca:	f63f af78 	bhi.w	80a52be <_strtod_l+0x1a6>
 80a53ce:	f04f 0e0a 	mov.w	lr, #10
 80a53d2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a53d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a53d8:	9309      	str	r3, [sp, #36]	; 0x24
 80a53da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a53dc:	1c59      	adds	r1, r3, #1
 80a53de:	911b      	str	r1, [sp, #108]	; 0x6c
 80a53e0:	785b      	ldrb	r3, [r3, #1]
 80a53e2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80a53e6:	2d09      	cmp	r5, #9
 80a53e8:	d935      	bls.n	80a5456 <_strtod_l+0x33e>
 80a53ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a53ec:	1b49      	subs	r1, r1, r5
 80a53ee:	2908      	cmp	r1, #8
 80a53f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80a53f4:	dc02      	bgt.n	80a53fc <_strtod_l+0x2e4>
 80a53f6:	4565      	cmp	r5, ip
 80a53f8:	bfa8      	it	ge
 80a53fa:	4665      	movge	r5, ip
 80a53fc:	b107      	cbz	r7, 80a5400 <_strtod_l+0x2e8>
 80a53fe:	426d      	negs	r5, r5
 80a5400:	2c00      	cmp	r4, #0
 80a5402:	d14c      	bne.n	80a549e <_strtod_l+0x386>
 80a5404:	9907      	ldr	r1, [sp, #28]
 80a5406:	4301      	orrs	r1, r0
 80a5408:	f47f aec7 	bne.w	80a519a <_strtod_l+0x82>
 80a540c:	2a00      	cmp	r2, #0
 80a540e:	f47f aee0 	bne.w	80a51d2 <_strtod_l+0xba>
 80a5412:	2b69      	cmp	r3, #105	; 0x69
 80a5414:	d026      	beq.n	80a5464 <_strtod_l+0x34c>
 80a5416:	dc23      	bgt.n	80a5460 <_strtod_l+0x348>
 80a5418:	2b49      	cmp	r3, #73	; 0x49
 80a541a:	d023      	beq.n	80a5464 <_strtod_l+0x34c>
 80a541c:	2b4e      	cmp	r3, #78	; 0x4e
 80a541e:	f47f aed8 	bne.w	80a51d2 <_strtod_l+0xba>
 80a5422:	499c      	ldr	r1, [pc, #624]	; (80a5694 <_strtod_l+0x57c>)
 80a5424:	a81b      	add	r0, sp, #108	; 0x6c
 80a5426:	f000 ff9f 	bl	80a6368 <__match>
 80a542a:	2800      	cmp	r0, #0
 80a542c:	f43f aed1 	beq.w	80a51d2 <_strtod_l+0xba>
 80a5430:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a5432:	781b      	ldrb	r3, [r3, #0]
 80a5434:	2b28      	cmp	r3, #40	; 0x28
 80a5436:	d12c      	bne.n	80a5492 <_strtod_l+0x37a>
 80a5438:	4997      	ldr	r1, [pc, #604]	; (80a5698 <_strtod_l+0x580>)
 80a543a:	aa1e      	add	r2, sp, #120	; 0x78
 80a543c:	a81b      	add	r0, sp, #108	; 0x6c
 80a543e:	f000 ffa7 	bl	80a6390 <__hexnan>
 80a5442:	2805      	cmp	r0, #5
 80a5444:	d125      	bne.n	80a5492 <_strtod_l+0x37a>
 80a5446:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80a5448:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80a544c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a5450:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a5454:	e6a1      	b.n	80a519a <_strtod_l+0x82>
 80a5456:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80a545a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80a545e:	e7bc      	b.n	80a53da <_strtod_l+0x2c2>
 80a5460:	2b6e      	cmp	r3, #110	; 0x6e
 80a5462:	e7dc      	b.n	80a541e <_strtod_l+0x306>
 80a5464:	498d      	ldr	r1, [pc, #564]	; (80a569c <_strtod_l+0x584>)
 80a5466:	a81b      	add	r0, sp, #108	; 0x6c
 80a5468:	f000 ff7e 	bl	80a6368 <__match>
 80a546c:	2800      	cmp	r0, #0
 80a546e:	f43f aeb0 	beq.w	80a51d2 <_strtod_l+0xba>
 80a5472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a5474:	498a      	ldr	r1, [pc, #552]	; (80a56a0 <_strtod_l+0x588>)
 80a5476:	3b01      	subs	r3, #1
 80a5478:	a81b      	add	r0, sp, #108	; 0x6c
 80a547a:	931b      	str	r3, [sp, #108]	; 0x6c
 80a547c:	f000 ff74 	bl	80a6368 <__match>
 80a5480:	b910      	cbnz	r0, 80a5488 <_strtod_l+0x370>
 80a5482:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a5484:	3301      	adds	r3, #1
 80a5486:	931b      	str	r3, [sp, #108]	; 0x6c
 80a5488:	f04f 0800 	mov.w	r8, #0
 80a548c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80a56b0 <_strtod_l+0x598>
 80a5490:	e683      	b.n	80a519a <_strtod_l+0x82>
 80a5492:	4884      	ldr	r0, [pc, #528]	; (80a56a4 <_strtod_l+0x58c>)
 80a5494:	f001 fc72 	bl	80a6d7c <nan>
 80a5498:	4680      	mov	r8, r0
 80a549a:	4689      	mov	r9, r1
 80a549c:	e67d      	b.n	80a519a <_strtod_l+0x82>
 80a549e:	9b04      	ldr	r3, [sp, #16]
 80a54a0:	f1bb 0f00 	cmp.w	fp, #0
 80a54a4:	bf08      	it	eq
 80a54a6:	46a3      	moveq	fp, r4
 80a54a8:	1aeb      	subs	r3, r5, r3
 80a54aa:	2c10      	cmp	r4, #16
 80a54ac:	9806      	ldr	r0, [sp, #24]
 80a54ae:	4626      	mov	r6, r4
 80a54b0:	9307      	str	r3, [sp, #28]
 80a54b2:	bfa8      	it	ge
 80a54b4:	2610      	movge	r6, #16
 80a54b6:	f7ff f9a3 	bl	80a4800 <__aeabi_ui2d>
 80a54ba:	2c09      	cmp	r4, #9
 80a54bc:	4680      	mov	r8, r0
 80a54be:	4689      	mov	r9, r1
 80a54c0:	dd13      	ble.n	80a54ea <_strtod_l+0x3d2>
 80a54c2:	4b79      	ldr	r3, [pc, #484]	; (80a56a8 <_strtod_l+0x590>)
 80a54c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a54c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a54cc:	f7ff fa12 	bl	80a48f4 <__aeabi_dmul>
 80a54d0:	4680      	mov	r8, r0
 80a54d2:	9805      	ldr	r0, [sp, #20]
 80a54d4:	4689      	mov	r9, r1
 80a54d6:	f7ff f993 	bl	80a4800 <__aeabi_ui2d>
 80a54da:	4602      	mov	r2, r0
 80a54dc:	460b      	mov	r3, r1
 80a54de:	4640      	mov	r0, r8
 80a54e0:	4649      	mov	r1, r9
 80a54e2:	f7ff f851 	bl	80a4588 <__adddf3>
 80a54e6:	4680      	mov	r8, r0
 80a54e8:	4689      	mov	r9, r1
 80a54ea:	2c0f      	cmp	r4, #15
 80a54ec:	dc36      	bgt.n	80a555c <_strtod_l+0x444>
 80a54ee:	9b07      	ldr	r3, [sp, #28]
 80a54f0:	2b00      	cmp	r3, #0
 80a54f2:	f43f ae52 	beq.w	80a519a <_strtod_l+0x82>
 80a54f6:	dd22      	ble.n	80a553e <_strtod_l+0x426>
 80a54f8:	2b16      	cmp	r3, #22
 80a54fa:	dc09      	bgt.n	80a5510 <_strtod_l+0x3f8>
 80a54fc:	4c6a      	ldr	r4, [pc, #424]	; (80a56a8 <_strtod_l+0x590>)
 80a54fe:	4642      	mov	r2, r8
 80a5500:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80a5504:	464b      	mov	r3, r9
 80a5506:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a550a:	f7ff f9f3 	bl	80a48f4 <__aeabi_dmul>
 80a550e:	e7c3      	b.n	80a5498 <_strtod_l+0x380>
 80a5510:	9a07      	ldr	r2, [sp, #28]
 80a5512:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80a5516:	4293      	cmp	r3, r2
 80a5518:	db20      	blt.n	80a555c <_strtod_l+0x444>
 80a551a:	4d63      	ldr	r5, [pc, #396]	; (80a56a8 <_strtod_l+0x590>)
 80a551c:	f1c4 040f 	rsb	r4, r4, #15
 80a5520:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80a5524:	4642      	mov	r2, r8
 80a5526:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a552a:	464b      	mov	r3, r9
 80a552c:	f7ff f9e2 	bl	80a48f4 <__aeabi_dmul>
 80a5530:	9b07      	ldr	r3, [sp, #28]
 80a5532:	1b1c      	subs	r4, r3, r4
 80a5534:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80a5538:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a553c:	e7e5      	b.n	80a550a <_strtod_l+0x3f2>
 80a553e:	9b07      	ldr	r3, [sp, #28]
 80a5540:	3316      	adds	r3, #22
 80a5542:	db0b      	blt.n	80a555c <_strtod_l+0x444>
 80a5544:	9b04      	ldr	r3, [sp, #16]
 80a5546:	4a58      	ldr	r2, [pc, #352]	; (80a56a8 <_strtod_l+0x590>)
 80a5548:	1b5d      	subs	r5, r3, r5
 80a554a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80a554e:	4640      	mov	r0, r8
 80a5550:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a5554:	4649      	mov	r1, r9
 80a5556:	f7ff faf7 	bl	80a4b48 <__aeabi_ddiv>
 80a555a:	e79d      	b.n	80a5498 <_strtod_l+0x380>
 80a555c:	9b07      	ldr	r3, [sp, #28]
 80a555e:	1ba6      	subs	r6, r4, r6
 80a5560:	441e      	add	r6, r3
 80a5562:	2e00      	cmp	r6, #0
 80a5564:	dd71      	ble.n	80a564a <_strtod_l+0x532>
 80a5566:	f016 030f 	ands.w	r3, r6, #15
 80a556a:	d00a      	beq.n	80a5582 <_strtod_l+0x46a>
 80a556c:	494e      	ldr	r1, [pc, #312]	; (80a56a8 <_strtod_l+0x590>)
 80a556e:	4642      	mov	r2, r8
 80a5570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80a5574:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5578:	464b      	mov	r3, r9
 80a557a:	f7ff f9bb 	bl	80a48f4 <__aeabi_dmul>
 80a557e:	4680      	mov	r8, r0
 80a5580:	4689      	mov	r9, r1
 80a5582:	f036 060f 	bics.w	r6, r6, #15
 80a5586:	d050      	beq.n	80a562a <_strtod_l+0x512>
 80a5588:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80a558c:	dd27      	ble.n	80a55de <_strtod_l+0x4c6>
 80a558e:	f04f 0b00 	mov.w	fp, #0
 80a5592:	f8cd b010 	str.w	fp, [sp, #16]
 80a5596:	f8cd b020 	str.w	fp, [sp, #32]
 80a559a:	f8cd b018 	str.w	fp, [sp, #24]
 80a559e:	2322      	movs	r3, #34	; 0x22
 80a55a0:	f04f 0800 	mov.w	r8, #0
 80a55a4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80a56b0 <_strtod_l+0x598>
 80a55a8:	f8ca 3000 	str.w	r3, [sl]
 80a55ac:	9b08      	ldr	r3, [sp, #32]
 80a55ae:	2b00      	cmp	r3, #0
 80a55b0:	f43f adf3 	beq.w	80a519a <_strtod_l+0x82>
 80a55b4:	4650      	mov	r0, sl
 80a55b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a55b8:	f000 ffcc 	bl	80a6554 <_Bfree>
 80a55bc:	4650      	mov	r0, sl
 80a55be:	9906      	ldr	r1, [sp, #24]
 80a55c0:	f000 ffc8 	bl	80a6554 <_Bfree>
 80a55c4:	4650      	mov	r0, sl
 80a55c6:	9904      	ldr	r1, [sp, #16]
 80a55c8:	f000 ffc4 	bl	80a6554 <_Bfree>
 80a55cc:	4650      	mov	r0, sl
 80a55ce:	9908      	ldr	r1, [sp, #32]
 80a55d0:	f000 ffc0 	bl	80a6554 <_Bfree>
 80a55d4:	4659      	mov	r1, fp
 80a55d6:	4650      	mov	r0, sl
 80a55d8:	f000 ffbc 	bl	80a6554 <_Bfree>
 80a55dc:	e5dd      	b.n	80a519a <_strtod_l+0x82>
 80a55de:	2300      	movs	r3, #0
 80a55e0:	4640      	mov	r0, r8
 80a55e2:	4649      	mov	r1, r9
 80a55e4:	461f      	mov	r7, r3
 80a55e6:	1136      	asrs	r6, r6, #4
 80a55e8:	2e01      	cmp	r6, #1
 80a55ea:	dc21      	bgt.n	80a5630 <_strtod_l+0x518>
 80a55ec:	b10b      	cbz	r3, 80a55f2 <_strtod_l+0x4da>
 80a55ee:	4680      	mov	r8, r0
 80a55f0:	4689      	mov	r9, r1
 80a55f2:	4b2e      	ldr	r3, [pc, #184]	; (80a56ac <_strtod_l+0x594>)
 80a55f4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a55f8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80a55fc:	4642      	mov	r2, r8
 80a55fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a5602:	464b      	mov	r3, r9
 80a5604:	f7ff f976 	bl	80a48f4 <__aeabi_dmul>
 80a5608:	4b29      	ldr	r3, [pc, #164]	; (80a56b0 <_strtod_l+0x598>)
 80a560a:	460a      	mov	r2, r1
 80a560c:	400b      	ands	r3, r1
 80a560e:	4929      	ldr	r1, [pc, #164]	; (80a56b4 <_strtod_l+0x59c>)
 80a5610:	4680      	mov	r8, r0
 80a5612:	428b      	cmp	r3, r1
 80a5614:	d8bb      	bhi.n	80a558e <_strtod_l+0x476>
 80a5616:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a561a:	428b      	cmp	r3, r1
 80a561c:	bf86      	itte	hi
 80a561e:	f04f 38ff 	movhi.w	r8, #4294967295
 80a5622:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80a56b8 <_strtod_l+0x5a0>
 80a5626:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a562a:	2300      	movs	r3, #0
 80a562c:	9305      	str	r3, [sp, #20]
 80a562e:	e07e      	b.n	80a572e <_strtod_l+0x616>
 80a5630:	07f2      	lsls	r2, r6, #31
 80a5632:	d507      	bpl.n	80a5644 <_strtod_l+0x52c>
 80a5634:	4b1d      	ldr	r3, [pc, #116]	; (80a56ac <_strtod_l+0x594>)
 80a5636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80a563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a563e:	f7ff f959 	bl	80a48f4 <__aeabi_dmul>
 80a5642:	2301      	movs	r3, #1
 80a5644:	3701      	adds	r7, #1
 80a5646:	1076      	asrs	r6, r6, #1
 80a5648:	e7ce      	b.n	80a55e8 <_strtod_l+0x4d0>
 80a564a:	d0ee      	beq.n	80a562a <_strtod_l+0x512>
 80a564c:	4276      	negs	r6, r6
 80a564e:	f016 020f 	ands.w	r2, r6, #15
 80a5652:	d00a      	beq.n	80a566a <_strtod_l+0x552>
 80a5654:	4b14      	ldr	r3, [pc, #80]	; (80a56a8 <_strtod_l+0x590>)
 80a5656:	4640      	mov	r0, r8
 80a5658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a565c:	4649      	mov	r1, r9
 80a565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5662:	f7ff fa71 	bl	80a4b48 <__aeabi_ddiv>
 80a5666:	4680      	mov	r8, r0
 80a5668:	4689      	mov	r9, r1
 80a566a:	1136      	asrs	r6, r6, #4
 80a566c:	d0dd      	beq.n	80a562a <_strtod_l+0x512>
 80a566e:	2e1f      	cmp	r6, #31
 80a5670:	dd24      	ble.n	80a56bc <_strtod_l+0x5a4>
 80a5672:	f04f 0b00 	mov.w	fp, #0
 80a5676:	f8cd b010 	str.w	fp, [sp, #16]
 80a567a:	f8cd b020 	str.w	fp, [sp, #32]
 80a567e:	f8cd b018 	str.w	fp, [sp, #24]
 80a5682:	2322      	movs	r3, #34	; 0x22
 80a5684:	f04f 0800 	mov.w	r8, #0
 80a5688:	f04f 0900 	mov.w	r9, #0
 80a568c:	f8ca 3000 	str.w	r3, [sl]
 80a5690:	e78c      	b.n	80a55ac <_strtod_l+0x494>
 80a5692:	bf00      	nop
 80a5694:	080a7ea9 	.word	0x080a7ea9
 80a5698:	080a80fc 	.word	0x080a80fc
 80a569c:	080a7ead 	.word	0x080a7ead
 80a56a0:	080a80e1 	.word	0x080a80e1
 80a56a4:	080a6e53 	.word	0x080a6e53
 80a56a8:	080a8278 	.word	0x080a8278
 80a56ac:	080a8250 	.word	0x080a8250
 80a56b0:	7ff00000 	.word	0x7ff00000
 80a56b4:	7ca00000 	.word	0x7ca00000
 80a56b8:	7fefffff 	.word	0x7fefffff
 80a56bc:	f016 0310 	ands.w	r3, r6, #16
 80a56c0:	bf18      	it	ne
 80a56c2:	236a      	movne	r3, #106	; 0x6a
 80a56c4:	4640      	mov	r0, r8
 80a56c6:	9305      	str	r3, [sp, #20]
 80a56c8:	4649      	mov	r1, r9
 80a56ca:	2300      	movs	r3, #0
 80a56cc:	4fb2      	ldr	r7, [pc, #712]	; (80a5998 <_strtod_l+0x880>)
 80a56ce:	07f2      	lsls	r2, r6, #31
 80a56d0:	d504      	bpl.n	80a56dc <_strtod_l+0x5c4>
 80a56d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a56d6:	f7ff f90d 	bl	80a48f4 <__aeabi_dmul>
 80a56da:	2301      	movs	r3, #1
 80a56dc:	1076      	asrs	r6, r6, #1
 80a56de:	f107 0708 	add.w	r7, r7, #8
 80a56e2:	d1f4      	bne.n	80a56ce <_strtod_l+0x5b6>
 80a56e4:	b10b      	cbz	r3, 80a56ea <_strtod_l+0x5d2>
 80a56e6:	4680      	mov	r8, r0
 80a56e8:	4689      	mov	r9, r1
 80a56ea:	9b05      	ldr	r3, [sp, #20]
 80a56ec:	b1bb      	cbz	r3, 80a571e <_strtod_l+0x606>
 80a56ee:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a56f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a56f6:	2b00      	cmp	r3, #0
 80a56f8:	4649      	mov	r1, r9
 80a56fa:	dd10      	ble.n	80a571e <_strtod_l+0x606>
 80a56fc:	2b1f      	cmp	r3, #31
 80a56fe:	f340 812b 	ble.w	80a5958 <_strtod_l+0x840>
 80a5702:	2b34      	cmp	r3, #52	; 0x34
 80a5704:	bfd8      	it	le
 80a5706:	f04f 32ff 	movle.w	r2, #4294967295
 80a570a:	f04f 0800 	mov.w	r8, #0
 80a570e:	bfcf      	iteee	gt
 80a5710:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a5714:	3b20      	suble	r3, #32
 80a5716:	fa02 f303 	lslle.w	r3, r2, r3
 80a571a:	ea03 0901 	andle.w	r9, r3, r1
 80a571e:	2200      	movs	r2, #0
 80a5720:	2300      	movs	r3, #0
 80a5722:	4640      	mov	r0, r8
 80a5724:	4649      	mov	r1, r9
 80a5726:	f7ff fb4d 	bl	80a4dc4 <__aeabi_dcmpeq>
 80a572a:	2800      	cmp	r0, #0
 80a572c:	d1a1      	bne.n	80a5672 <_strtod_l+0x55a>
 80a572e:	9b06      	ldr	r3, [sp, #24]
 80a5730:	465a      	mov	r2, fp
 80a5732:	9300      	str	r3, [sp, #0]
 80a5734:	4650      	mov	r0, sl
 80a5736:	4623      	mov	r3, r4
 80a5738:	9908      	ldr	r1, [sp, #32]
 80a573a:	f000 ff60 	bl	80a65fe <__s2b>
 80a573e:	9008      	str	r0, [sp, #32]
 80a5740:	2800      	cmp	r0, #0
 80a5742:	f43f af24 	beq.w	80a558e <_strtod_l+0x476>
 80a5746:	9b04      	ldr	r3, [sp, #16]
 80a5748:	f04f 0b00 	mov.w	fp, #0
 80a574c:	1b5d      	subs	r5, r3, r5
 80a574e:	9b07      	ldr	r3, [sp, #28]
 80a5750:	f8cd b010 	str.w	fp, [sp, #16]
 80a5754:	2b00      	cmp	r3, #0
 80a5756:	bfb4      	ite	lt
 80a5758:	462b      	movlt	r3, r5
 80a575a:	2300      	movge	r3, #0
 80a575c:	930e      	str	r3, [sp, #56]	; 0x38
 80a575e:	9b07      	ldr	r3, [sp, #28]
 80a5760:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a5764:	9316      	str	r3, [sp, #88]	; 0x58
 80a5766:	9b08      	ldr	r3, [sp, #32]
 80a5768:	4650      	mov	r0, sl
 80a576a:	6859      	ldr	r1, [r3, #4]
 80a576c:	f000 febe 	bl	80a64ec <_Balloc>
 80a5770:	9006      	str	r0, [sp, #24]
 80a5772:	2800      	cmp	r0, #0
 80a5774:	f43f af13 	beq.w	80a559e <_strtod_l+0x486>
 80a5778:	9b08      	ldr	r3, [sp, #32]
 80a577a:	300c      	adds	r0, #12
 80a577c:	691a      	ldr	r2, [r3, #16]
 80a577e:	f103 010c 	add.w	r1, r3, #12
 80a5782:	3202      	adds	r2, #2
 80a5784:	0092      	lsls	r2, r2, #2
 80a5786:	f7ff fc35 	bl	80a4ff4 <memcpy>
 80a578a:	ab1e      	add	r3, sp, #120	; 0x78
 80a578c:	9301      	str	r3, [sp, #4]
 80a578e:	ab1d      	add	r3, sp, #116	; 0x74
 80a5790:	9300      	str	r3, [sp, #0]
 80a5792:	4642      	mov	r2, r8
 80a5794:	464b      	mov	r3, r9
 80a5796:	4650      	mov	r0, sl
 80a5798:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a579c:	f001 fa1e 	bl	80a6bdc <__d2b>
 80a57a0:	901c      	str	r0, [sp, #112]	; 0x70
 80a57a2:	2800      	cmp	r0, #0
 80a57a4:	f43f aefb 	beq.w	80a559e <_strtod_l+0x486>
 80a57a8:	2101      	movs	r1, #1
 80a57aa:	4650      	mov	r0, sl
 80a57ac:	f000 ffb3 	bl	80a6716 <__i2b>
 80a57b0:	4603      	mov	r3, r0
 80a57b2:	9004      	str	r0, [sp, #16]
 80a57b4:	2800      	cmp	r0, #0
 80a57b6:	f43f aef2 	beq.w	80a559e <_strtod_l+0x486>
 80a57ba:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80a57bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80a57be:	2d00      	cmp	r5, #0
 80a57c0:	bfab      	itete	ge
 80a57c2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80a57c4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80a57c6:	18ee      	addge	r6, r5, r3
 80a57c8:	1b5c      	sublt	r4, r3, r5
 80a57ca:	9b05      	ldr	r3, [sp, #20]
 80a57cc:	bfa8      	it	ge
 80a57ce:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80a57d0:	eba5 0503 	sub.w	r5, r5, r3
 80a57d4:	4415      	add	r5, r2
 80a57d6:	4b71      	ldr	r3, [pc, #452]	; (80a599c <_strtod_l+0x884>)
 80a57d8:	f105 35ff 	add.w	r5, r5, #4294967295
 80a57dc:	bfb8      	it	lt
 80a57de:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80a57e0:	429d      	cmp	r5, r3
 80a57e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80a57e6:	f280 80c9 	bge.w	80a597c <_strtod_l+0x864>
 80a57ea:	1b5b      	subs	r3, r3, r5
 80a57ec:	2b1f      	cmp	r3, #31
 80a57ee:	f04f 0701 	mov.w	r7, #1
 80a57f2:	eba2 0203 	sub.w	r2, r2, r3
 80a57f6:	f300 80b6 	bgt.w	80a5966 <_strtod_l+0x84e>
 80a57fa:	2500      	movs	r5, #0
 80a57fc:	fa07 f303 	lsl.w	r3, r7, r3
 80a5800:	930f      	str	r3, [sp, #60]	; 0x3c
 80a5802:	18b7      	adds	r7, r6, r2
 80a5804:	9b05      	ldr	r3, [sp, #20]
 80a5806:	42be      	cmp	r6, r7
 80a5808:	4414      	add	r4, r2
 80a580a:	441c      	add	r4, r3
 80a580c:	4633      	mov	r3, r6
 80a580e:	bfa8      	it	ge
 80a5810:	463b      	movge	r3, r7
 80a5812:	42a3      	cmp	r3, r4
 80a5814:	bfa8      	it	ge
 80a5816:	4623      	movge	r3, r4
 80a5818:	2b00      	cmp	r3, #0
 80a581a:	bfc2      	ittt	gt
 80a581c:	1aff      	subgt	r7, r7, r3
 80a581e:	1ae4      	subgt	r4, r4, r3
 80a5820:	1af6      	subgt	r6, r6, r3
 80a5822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a5824:	2b00      	cmp	r3, #0
 80a5826:	dd17      	ble.n	80a5858 <_strtod_l+0x740>
 80a5828:	461a      	mov	r2, r3
 80a582a:	4650      	mov	r0, sl
 80a582c:	9904      	ldr	r1, [sp, #16]
 80a582e:	f001 f817 	bl	80a6860 <__pow5mult>
 80a5832:	9004      	str	r0, [sp, #16]
 80a5834:	2800      	cmp	r0, #0
 80a5836:	f43f aeb2 	beq.w	80a559e <_strtod_l+0x486>
 80a583a:	4601      	mov	r1, r0
 80a583c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a583e:	4650      	mov	r0, sl
 80a5840:	f000 ff72 	bl	80a6728 <__multiply>
 80a5844:	9009      	str	r0, [sp, #36]	; 0x24
 80a5846:	2800      	cmp	r0, #0
 80a5848:	f43f aea9 	beq.w	80a559e <_strtod_l+0x486>
 80a584c:	4650      	mov	r0, sl
 80a584e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a5850:	f000 fe80 	bl	80a6554 <_Bfree>
 80a5854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5856:	931c      	str	r3, [sp, #112]	; 0x70
 80a5858:	2f00      	cmp	r7, #0
 80a585a:	f300 8093 	bgt.w	80a5984 <_strtod_l+0x86c>
 80a585e:	9b07      	ldr	r3, [sp, #28]
 80a5860:	2b00      	cmp	r3, #0
 80a5862:	dd08      	ble.n	80a5876 <_strtod_l+0x75e>
 80a5864:	4650      	mov	r0, sl
 80a5866:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80a5868:	9906      	ldr	r1, [sp, #24]
 80a586a:	f000 fff9 	bl	80a6860 <__pow5mult>
 80a586e:	9006      	str	r0, [sp, #24]
 80a5870:	2800      	cmp	r0, #0
 80a5872:	f43f ae94 	beq.w	80a559e <_strtod_l+0x486>
 80a5876:	2c00      	cmp	r4, #0
 80a5878:	dd08      	ble.n	80a588c <_strtod_l+0x774>
 80a587a:	4622      	mov	r2, r4
 80a587c:	4650      	mov	r0, sl
 80a587e:	9906      	ldr	r1, [sp, #24]
 80a5880:	f001 f83c 	bl	80a68fc <__lshift>
 80a5884:	9006      	str	r0, [sp, #24]
 80a5886:	2800      	cmp	r0, #0
 80a5888:	f43f ae89 	beq.w	80a559e <_strtod_l+0x486>
 80a588c:	2e00      	cmp	r6, #0
 80a588e:	dd08      	ble.n	80a58a2 <_strtod_l+0x78a>
 80a5890:	4632      	mov	r2, r6
 80a5892:	4650      	mov	r0, sl
 80a5894:	9904      	ldr	r1, [sp, #16]
 80a5896:	f001 f831 	bl	80a68fc <__lshift>
 80a589a:	9004      	str	r0, [sp, #16]
 80a589c:	2800      	cmp	r0, #0
 80a589e:	f43f ae7e 	beq.w	80a559e <_strtod_l+0x486>
 80a58a2:	4650      	mov	r0, sl
 80a58a4:	9a06      	ldr	r2, [sp, #24]
 80a58a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a58a8:	f001 f8a2 	bl	80a69f0 <__mdiff>
 80a58ac:	4683      	mov	fp, r0
 80a58ae:	2800      	cmp	r0, #0
 80a58b0:	f43f ae75 	beq.w	80a559e <_strtod_l+0x486>
 80a58b4:	2400      	movs	r4, #0
 80a58b6:	68c3      	ldr	r3, [r0, #12]
 80a58b8:	9904      	ldr	r1, [sp, #16]
 80a58ba:	60c4      	str	r4, [r0, #12]
 80a58bc:	930d      	str	r3, [sp, #52]	; 0x34
 80a58be:	f001 f87c 	bl	80a69ba <__mcmp>
 80a58c2:	42a0      	cmp	r0, r4
 80a58c4:	da70      	bge.n	80a59a8 <_strtod_l+0x890>
 80a58c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a58c8:	ea53 0308 	orrs.w	r3, r3, r8
 80a58cc:	f040 8096 	bne.w	80a59fc <_strtod_l+0x8e4>
 80a58d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a58d4:	2b00      	cmp	r3, #0
 80a58d6:	f040 8091 	bne.w	80a59fc <_strtod_l+0x8e4>
 80a58da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a58de:	0d1b      	lsrs	r3, r3, #20
 80a58e0:	051b      	lsls	r3, r3, #20
 80a58e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a58e6:	f240 8089 	bls.w	80a59fc <_strtod_l+0x8e4>
 80a58ea:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a58ee:	b923      	cbnz	r3, 80a58fa <_strtod_l+0x7e2>
 80a58f0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a58f4:	2b01      	cmp	r3, #1
 80a58f6:	f340 8081 	ble.w	80a59fc <_strtod_l+0x8e4>
 80a58fa:	4659      	mov	r1, fp
 80a58fc:	2201      	movs	r2, #1
 80a58fe:	4650      	mov	r0, sl
 80a5900:	f000 fffc 	bl	80a68fc <__lshift>
 80a5904:	9904      	ldr	r1, [sp, #16]
 80a5906:	4683      	mov	fp, r0
 80a5908:	f001 f857 	bl	80a69ba <__mcmp>
 80a590c:	2800      	cmp	r0, #0
 80a590e:	dd75      	ble.n	80a59fc <_strtod_l+0x8e4>
 80a5910:	9905      	ldr	r1, [sp, #20]
 80a5912:	464b      	mov	r3, r9
 80a5914:	4a22      	ldr	r2, [pc, #136]	; (80a59a0 <_strtod_l+0x888>)
 80a5916:	2900      	cmp	r1, #0
 80a5918:	f000 8091 	beq.w	80a5a3e <_strtod_l+0x926>
 80a591c:	ea02 0109 	and.w	r1, r2, r9
 80a5920:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80a5924:	f300 808b 	bgt.w	80a5a3e <_strtod_l+0x926>
 80a5928:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80a592c:	f77f aea9 	ble.w	80a5682 <_strtod_l+0x56a>
 80a5930:	2300      	movs	r3, #0
 80a5932:	4a1c      	ldr	r2, [pc, #112]	; (80a59a4 <_strtod_l+0x88c>)
 80a5934:	4640      	mov	r0, r8
 80a5936:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80a593a:	4649      	mov	r1, r9
 80a593c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80a5940:	f7fe ffd8 	bl	80a48f4 <__aeabi_dmul>
 80a5944:	460b      	mov	r3, r1
 80a5946:	4303      	orrs	r3, r0
 80a5948:	bf08      	it	eq
 80a594a:	2322      	moveq	r3, #34	; 0x22
 80a594c:	4680      	mov	r8, r0
 80a594e:	4689      	mov	r9, r1
 80a5950:	bf08      	it	eq
 80a5952:	f8ca 3000 	streq.w	r3, [sl]
 80a5956:	e62d      	b.n	80a55b4 <_strtod_l+0x49c>
 80a5958:	f04f 32ff 	mov.w	r2, #4294967295
 80a595c:	fa02 f303 	lsl.w	r3, r2, r3
 80a5960:	ea03 0808 	and.w	r8, r3, r8
 80a5964:	e6db      	b.n	80a571e <_strtod_l+0x606>
 80a5966:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80a596a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80a596e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80a5972:	35e2      	adds	r5, #226	; 0xe2
 80a5974:	fa07 f505 	lsl.w	r5, r7, r5
 80a5978:	970f      	str	r7, [sp, #60]	; 0x3c
 80a597a:	e742      	b.n	80a5802 <_strtod_l+0x6ea>
 80a597c:	2301      	movs	r3, #1
 80a597e:	2500      	movs	r5, #0
 80a5980:	930f      	str	r3, [sp, #60]	; 0x3c
 80a5982:	e73e      	b.n	80a5802 <_strtod_l+0x6ea>
 80a5984:	463a      	mov	r2, r7
 80a5986:	4650      	mov	r0, sl
 80a5988:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a598a:	f000 ffb7 	bl	80a68fc <__lshift>
 80a598e:	901c      	str	r0, [sp, #112]	; 0x70
 80a5990:	2800      	cmp	r0, #0
 80a5992:	f47f af64 	bne.w	80a585e <_strtod_l+0x746>
 80a5996:	e602      	b.n	80a559e <_strtod_l+0x486>
 80a5998:	080a8110 	.word	0x080a8110
 80a599c:	fffffc02 	.word	0xfffffc02
 80a59a0:	7ff00000 	.word	0x7ff00000
 80a59a4:	39500000 	.word	0x39500000
 80a59a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80a59ac:	d166      	bne.n	80a5a7c <_strtod_l+0x964>
 80a59ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a59b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a59b4:	b35a      	cbz	r2, 80a5a0e <_strtod_l+0x8f6>
 80a59b6:	4a9c      	ldr	r2, [pc, #624]	; (80a5c28 <_strtod_l+0xb10>)
 80a59b8:	4293      	cmp	r3, r2
 80a59ba:	d12c      	bne.n	80a5a16 <_strtod_l+0x8fe>
 80a59bc:	9b05      	ldr	r3, [sp, #20]
 80a59be:	4640      	mov	r0, r8
 80a59c0:	b303      	cbz	r3, 80a5a04 <_strtod_l+0x8ec>
 80a59c2:	464b      	mov	r3, r9
 80a59c4:	4a99      	ldr	r2, [pc, #612]	; (80a5c2c <_strtod_l+0xb14>)
 80a59c6:	f04f 31ff 	mov.w	r1, #4294967295
 80a59ca:	401a      	ands	r2, r3
 80a59cc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80a59d0:	d81b      	bhi.n	80a5a0a <_strtod_l+0x8f2>
 80a59d2:	0d12      	lsrs	r2, r2, #20
 80a59d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80a59d8:	fa01 f303 	lsl.w	r3, r1, r3
 80a59dc:	4298      	cmp	r0, r3
 80a59de:	d11a      	bne.n	80a5a16 <_strtod_l+0x8fe>
 80a59e0:	4b93      	ldr	r3, [pc, #588]	; (80a5c30 <_strtod_l+0xb18>)
 80a59e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a59e4:	429a      	cmp	r2, r3
 80a59e6:	d102      	bne.n	80a59ee <_strtod_l+0x8d6>
 80a59e8:	3001      	adds	r0, #1
 80a59ea:	f43f add8 	beq.w	80a559e <_strtod_l+0x486>
 80a59ee:	f04f 0800 	mov.w	r8, #0
 80a59f2:	4b8e      	ldr	r3, [pc, #568]	; (80a5c2c <_strtod_l+0xb14>)
 80a59f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a59f6:	401a      	ands	r2, r3
 80a59f8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80a59fc:	9b05      	ldr	r3, [sp, #20]
 80a59fe:	2b00      	cmp	r3, #0
 80a5a00:	d196      	bne.n	80a5930 <_strtod_l+0x818>
 80a5a02:	e5d7      	b.n	80a55b4 <_strtod_l+0x49c>
 80a5a04:	f04f 33ff 	mov.w	r3, #4294967295
 80a5a08:	e7e8      	b.n	80a59dc <_strtod_l+0x8c4>
 80a5a0a:	460b      	mov	r3, r1
 80a5a0c:	e7e6      	b.n	80a59dc <_strtod_l+0x8c4>
 80a5a0e:	ea53 0308 	orrs.w	r3, r3, r8
 80a5a12:	f43f af7d 	beq.w	80a5910 <_strtod_l+0x7f8>
 80a5a16:	b1e5      	cbz	r5, 80a5a52 <_strtod_l+0x93a>
 80a5a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5a1a:	421d      	tst	r5, r3
 80a5a1c:	d0ee      	beq.n	80a59fc <_strtod_l+0x8e4>
 80a5a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a5a20:	4640      	mov	r0, r8
 80a5a22:	4649      	mov	r1, r9
 80a5a24:	9a05      	ldr	r2, [sp, #20]
 80a5a26:	b1c3      	cbz	r3, 80a5a5a <_strtod_l+0x942>
 80a5a28:	f7ff fb55 	bl	80a50d6 <sulp>
 80a5a2c:	4602      	mov	r2, r0
 80a5a2e:	460b      	mov	r3, r1
 80a5a30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a5a34:	f7fe fda8 	bl	80a4588 <__adddf3>
 80a5a38:	4680      	mov	r8, r0
 80a5a3a:	4689      	mov	r9, r1
 80a5a3c:	e7de      	b.n	80a59fc <_strtod_l+0x8e4>
 80a5a3e:	4013      	ands	r3, r2
 80a5a40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a5a44:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a5a48:	f04f 38ff 	mov.w	r8, #4294967295
 80a5a4c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a5a50:	e7d4      	b.n	80a59fc <_strtod_l+0x8e4>
 80a5a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a5a54:	ea13 0f08 	tst.w	r3, r8
 80a5a58:	e7e0      	b.n	80a5a1c <_strtod_l+0x904>
 80a5a5a:	f7ff fb3c 	bl	80a50d6 <sulp>
 80a5a5e:	4602      	mov	r2, r0
 80a5a60:	460b      	mov	r3, r1
 80a5a62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a5a66:	f7fe fd8d 	bl	80a4584 <__aeabi_dsub>
 80a5a6a:	2200      	movs	r2, #0
 80a5a6c:	2300      	movs	r3, #0
 80a5a6e:	4680      	mov	r8, r0
 80a5a70:	4689      	mov	r9, r1
 80a5a72:	f7ff f9a7 	bl	80a4dc4 <__aeabi_dcmpeq>
 80a5a76:	2800      	cmp	r0, #0
 80a5a78:	d0c0      	beq.n	80a59fc <_strtod_l+0x8e4>
 80a5a7a:	e602      	b.n	80a5682 <_strtod_l+0x56a>
 80a5a7c:	4658      	mov	r0, fp
 80a5a7e:	9904      	ldr	r1, [sp, #16]
 80a5a80:	f001 f8fb 	bl	80a6c7a <__ratio>
 80a5a84:	2200      	movs	r2, #0
 80a5a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a5a8a:	4606      	mov	r6, r0
 80a5a8c:	460f      	mov	r7, r1
 80a5a8e:	f7ff f9ad 	bl	80a4dec <__aeabi_dcmple>
 80a5a92:	2800      	cmp	r0, #0
 80a5a94:	d075      	beq.n	80a5b82 <_strtod_l+0xa6a>
 80a5a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a5a98:	2b00      	cmp	r3, #0
 80a5a9a:	d047      	beq.n	80a5b2c <_strtod_l+0xa14>
 80a5a9c:	2600      	movs	r6, #0
 80a5a9e:	4f65      	ldr	r7, [pc, #404]	; (80a5c34 <_strtod_l+0xb1c>)
 80a5aa0:	4d64      	ldr	r5, [pc, #400]	; (80a5c34 <_strtod_l+0xb1c>)
 80a5aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5aa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80a5aa8:	0d1b      	lsrs	r3, r3, #20
 80a5aaa:	051b      	lsls	r3, r3, #20
 80a5aac:	930f      	str	r3, [sp, #60]	; 0x3c
 80a5aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a5ab0:	4b61      	ldr	r3, [pc, #388]	; (80a5c38 <_strtod_l+0xb20>)
 80a5ab2:	429a      	cmp	r2, r3
 80a5ab4:	f040 80c8 	bne.w	80a5c48 <_strtod_l+0xb30>
 80a5ab8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a5abc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80a5ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5ac2:	4640      	mov	r0, r8
 80a5ac4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80a5ac8:	4649      	mov	r1, r9
 80a5aca:	f001 f80d 	bl	80a6ae8 <__ulp>
 80a5ace:	4602      	mov	r2, r0
 80a5ad0:	460b      	mov	r3, r1
 80a5ad2:	4630      	mov	r0, r6
 80a5ad4:	4639      	mov	r1, r7
 80a5ad6:	f7fe ff0d 	bl	80a48f4 <__aeabi_dmul>
 80a5ada:	4642      	mov	r2, r8
 80a5adc:	464b      	mov	r3, r9
 80a5ade:	f7fe fd53 	bl	80a4588 <__adddf3>
 80a5ae2:	460b      	mov	r3, r1
 80a5ae4:	4951      	ldr	r1, [pc, #324]	; (80a5c2c <_strtod_l+0xb14>)
 80a5ae6:	4a55      	ldr	r2, [pc, #340]	; (80a5c3c <_strtod_l+0xb24>)
 80a5ae8:	4019      	ands	r1, r3
 80a5aea:	4291      	cmp	r1, r2
 80a5aec:	4680      	mov	r8, r0
 80a5aee:	d95e      	bls.n	80a5bae <_strtod_l+0xa96>
 80a5af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a5af2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80a5af6:	4293      	cmp	r3, r2
 80a5af8:	d103      	bne.n	80a5b02 <_strtod_l+0x9ea>
 80a5afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5afc:	3301      	adds	r3, #1
 80a5afe:	f43f ad4e 	beq.w	80a559e <_strtod_l+0x486>
 80a5b02:	f04f 38ff 	mov.w	r8, #4294967295
 80a5b06:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80a5c30 <_strtod_l+0xb18>
 80a5b0a:	4650      	mov	r0, sl
 80a5b0c:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a5b0e:	f000 fd21 	bl	80a6554 <_Bfree>
 80a5b12:	4650      	mov	r0, sl
 80a5b14:	9906      	ldr	r1, [sp, #24]
 80a5b16:	f000 fd1d 	bl	80a6554 <_Bfree>
 80a5b1a:	4650      	mov	r0, sl
 80a5b1c:	9904      	ldr	r1, [sp, #16]
 80a5b1e:	f000 fd19 	bl	80a6554 <_Bfree>
 80a5b22:	4659      	mov	r1, fp
 80a5b24:	4650      	mov	r0, sl
 80a5b26:	f000 fd15 	bl	80a6554 <_Bfree>
 80a5b2a:	e61c      	b.n	80a5766 <_strtod_l+0x64e>
 80a5b2c:	f1b8 0f00 	cmp.w	r8, #0
 80a5b30:	d119      	bne.n	80a5b66 <_strtod_l+0xa4e>
 80a5b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a5b38:	b9e3      	cbnz	r3, 80a5b74 <_strtod_l+0xa5c>
 80a5b3a:	2200      	movs	r2, #0
 80a5b3c:	4630      	mov	r0, r6
 80a5b3e:	4639      	mov	r1, r7
 80a5b40:	4b3c      	ldr	r3, [pc, #240]	; (80a5c34 <_strtod_l+0xb1c>)
 80a5b42:	f7ff f949 	bl	80a4dd8 <__aeabi_dcmplt>
 80a5b46:	b9c8      	cbnz	r0, 80a5b7c <_strtod_l+0xa64>
 80a5b48:	2200      	movs	r2, #0
 80a5b4a:	4630      	mov	r0, r6
 80a5b4c:	4639      	mov	r1, r7
 80a5b4e:	4b3c      	ldr	r3, [pc, #240]	; (80a5c40 <_strtod_l+0xb28>)
 80a5b50:	f7fe fed0 	bl	80a48f4 <__aeabi_dmul>
 80a5b54:	4604      	mov	r4, r0
 80a5b56:	460d      	mov	r5, r1
 80a5b58:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a5b5c:	9418      	str	r4, [sp, #96]	; 0x60
 80a5b5e:	9319      	str	r3, [sp, #100]	; 0x64
 80a5b60:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80a5b64:	e79d      	b.n	80a5aa2 <_strtod_l+0x98a>
 80a5b66:	f1b8 0f01 	cmp.w	r8, #1
 80a5b6a:	d103      	bne.n	80a5b74 <_strtod_l+0xa5c>
 80a5b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5b6e:	2b00      	cmp	r3, #0
 80a5b70:	f43f ad87 	beq.w	80a5682 <_strtod_l+0x56a>
 80a5b74:	2600      	movs	r6, #0
 80a5b76:	2400      	movs	r4, #0
 80a5b78:	4f32      	ldr	r7, [pc, #200]	; (80a5c44 <_strtod_l+0xb2c>)
 80a5b7a:	e791      	b.n	80a5aa0 <_strtod_l+0x988>
 80a5b7c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a5b7e:	4d30      	ldr	r5, [pc, #192]	; (80a5c40 <_strtod_l+0xb28>)
 80a5b80:	e7ea      	b.n	80a5b58 <_strtod_l+0xa40>
 80a5b82:	4b2f      	ldr	r3, [pc, #188]	; (80a5c40 <_strtod_l+0xb28>)
 80a5b84:	2200      	movs	r2, #0
 80a5b86:	4630      	mov	r0, r6
 80a5b88:	4639      	mov	r1, r7
 80a5b8a:	f7fe feb3 	bl	80a48f4 <__aeabi_dmul>
 80a5b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a5b90:	4604      	mov	r4, r0
 80a5b92:	460d      	mov	r5, r1
 80a5b94:	b933      	cbnz	r3, 80a5ba4 <_strtod_l+0xa8c>
 80a5b96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a5b9a:	9010      	str	r0, [sp, #64]	; 0x40
 80a5b9c:	9311      	str	r3, [sp, #68]	; 0x44
 80a5b9e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a5ba2:	e77e      	b.n	80a5aa2 <_strtod_l+0x98a>
 80a5ba4:	4602      	mov	r2, r0
 80a5ba6:	460b      	mov	r3, r1
 80a5ba8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a5bac:	e7f7      	b.n	80a5b9e <_strtod_l+0xa86>
 80a5bae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80a5bb2:	9b05      	ldr	r3, [sp, #20]
 80a5bb4:	2b00      	cmp	r3, #0
 80a5bb6:	d1a8      	bne.n	80a5b0a <_strtod_l+0x9f2>
 80a5bb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a5bbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a5bbe:	0d1b      	lsrs	r3, r3, #20
 80a5bc0:	051b      	lsls	r3, r3, #20
 80a5bc2:	429a      	cmp	r2, r3
 80a5bc4:	d1a1      	bne.n	80a5b0a <_strtod_l+0x9f2>
 80a5bc6:	4620      	mov	r0, r4
 80a5bc8:	4629      	mov	r1, r5
 80a5bca:	f001 f8eb 	bl	80a6da4 <__aeabi_d2lz>
 80a5bce:	f7fe fe63 	bl	80a4898 <__aeabi_l2d>
 80a5bd2:	4602      	mov	r2, r0
 80a5bd4:	460b      	mov	r3, r1
 80a5bd6:	4620      	mov	r0, r4
 80a5bd8:	4629      	mov	r1, r5
 80a5bda:	f7fe fcd3 	bl	80a4584 <__aeabi_dsub>
 80a5bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a5be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a5be4:	ea43 0308 	orr.w	r3, r3, r8
 80a5be8:	4313      	orrs	r3, r2
 80a5bea:	4604      	mov	r4, r0
 80a5bec:	460d      	mov	r5, r1
 80a5bee:	d066      	beq.n	80a5cbe <_strtod_l+0xba6>
 80a5bf0:	a309      	add	r3, pc, #36	; (adr r3, 80a5c18 <_strtod_l+0xb00>)
 80a5bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5bf6:	f7ff f8ef 	bl	80a4dd8 <__aeabi_dcmplt>
 80a5bfa:	2800      	cmp	r0, #0
 80a5bfc:	f47f acda 	bne.w	80a55b4 <_strtod_l+0x49c>
 80a5c00:	a307      	add	r3, pc, #28	; (adr r3, 80a5c20 <_strtod_l+0xb08>)
 80a5c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5c06:	4620      	mov	r0, r4
 80a5c08:	4629      	mov	r1, r5
 80a5c0a:	f7ff f903 	bl	80a4e14 <__aeabi_dcmpgt>
 80a5c0e:	2800      	cmp	r0, #0
 80a5c10:	f43f af7b 	beq.w	80a5b0a <_strtod_l+0x9f2>
 80a5c14:	e4ce      	b.n	80a55b4 <_strtod_l+0x49c>
 80a5c16:	bf00      	nop
 80a5c18:	94a03595 	.word	0x94a03595
 80a5c1c:	3fdfffff 	.word	0x3fdfffff
 80a5c20:	35afe535 	.word	0x35afe535
 80a5c24:	3fe00000 	.word	0x3fe00000
 80a5c28:	000fffff 	.word	0x000fffff
 80a5c2c:	7ff00000 	.word	0x7ff00000
 80a5c30:	7fefffff 	.word	0x7fefffff
 80a5c34:	3ff00000 	.word	0x3ff00000
 80a5c38:	7fe00000 	.word	0x7fe00000
 80a5c3c:	7c9fffff 	.word	0x7c9fffff
 80a5c40:	3fe00000 	.word	0x3fe00000
 80a5c44:	bff00000 	.word	0xbff00000
 80a5c48:	9b05      	ldr	r3, [sp, #20]
 80a5c4a:	b313      	cbz	r3, 80a5c92 <_strtod_l+0xb7a>
 80a5c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a5c4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a5c52:	d81e      	bhi.n	80a5c92 <_strtod_l+0xb7a>
 80a5c54:	a326      	add	r3, pc, #152	; (adr r3, 80a5cf0 <_strtod_l+0xbd8>)
 80a5c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5c5a:	4620      	mov	r0, r4
 80a5c5c:	4629      	mov	r1, r5
 80a5c5e:	f7ff f8c5 	bl	80a4dec <__aeabi_dcmple>
 80a5c62:	b190      	cbz	r0, 80a5c8a <_strtod_l+0xb72>
 80a5c64:	4629      	mov	r1, r5
 80a5c66:	4620      	mov	r0, r4
 80a5c68:	f7ff f91c 	bl	80a4ea4 <__aeabi_d2uiz>
 80a5c6c:	2801      	cmp	r0, #1
 80a5c6e:	bf38      	it	cc
 80a5c70:	2001      	movcc	r0, #1
 80a5c72:	f7fe fdc5 	bl	80a4800 <__aeabi_ui2d>
 80a5c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a5c78:	4604      	mov	r4, r0
 80a5c7a:	460d      	mov	r5, r1
 80a5c7c:	b9d3      	cbnz	r3, 80a5cb4 <_strtod_l+0xb9c>
 80a5c7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a5c82:	9012      	str	r0, [sp, #72]	; 0x48
 80a5c84:	9313      	str	r3, [sp, #76]	; 0x4c
 80a5c86:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80a5c8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a5c8c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a5c90:	1a9f      	subs	r7, r3, r2
 80a5c92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a5c96:	f000 ff27 	bl	80a6ae8 <__ulp>
 80a5c9a:	4602      	mov	r2, r0
 80a5c9c:	460b      	mov	r3, r1
 80a5c9e:	4630      	mov	r0, r6
 80a5ca0:	4639      	mov	r1, r7
 80a5ca2:	f7fe fe27 	bl	80a48f4 <__aeabi_dmul>
 80a5ca6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a5caa:	f7fe fc6d 	bl	80a4588 <__adddf3>
 80a5cae:	4680      	mov	r8, r0
 80a5cb0:	4689      	mov	r9, r1
 80a5cb2:	e77e      	b.n	80a5bb2 <_strtod_l+0xa9a>
 80a5cb4:	4602      	mov	r2, r0
 80a5cb6:	460b      	mov	r3, r1
 80a5cb8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80a5cbc:	e7e3      	b.n	80a5c86 <_strtod_l+0xb6e>
 80a5cbe:	a30e      	add	r3, pc, #56	; (adr r3, 80a5cf8 <_strtod_l+0xbe0>)
 80a5cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5cc4:	f7ff f888 	bl	80a4dd8 <__aeabi_dcmplt>
 80a5cc8:	e7a1      	b.n	80a5c0e <_strtod_l+0xaf6>
 80a5cca:	2300      	movs	r3, #0
 80a5ccc:	930c      	str	r3, [sp, #48]	; 0x30
 80a5cce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a5cd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a5cd2:	6013      	str	r3, [r2, #0]
 80a5cd4:	f7ff ba65 	b.w	80a51a2 <_strtod_l+0x8a>
 80a5cd8:	2b65      	cmp	r3, #101	; 0x65
 80a5cda:	f43f ab5c 	beq.w	80a5396 <_strtod_l+0x27e>
 80a5cde:	2b45      	cmp	r3, #69	; 0x45
 80a5ce0:	f43f ab59 	beq.w	80a5396 <_strtod_l+0x27e>
 80a5ce4:	2201      	movs	r2, #1
 80a5ce6:	f7ff bb8d 	b.w	80a5404 <_strtod_l+0x2ec>
 80a5cea:	bf00      	nop
 80a5cec:	f3af 8000 	nop.w
 80a5cf0:	ffc00000 	.word	0xffc00000
 80a5cf4:	41dfffff 	.word	0x41dfffff
 80a5cf8:	94a03595 	.word	0x94a03595
 80a5cfc:	3fcfffff 	.word	0x3fcfffff

080a5d00 <strtod>:
 80a5d00:	460a      	mov	r2, r1
 80a5d02:	4601      	mov	r1, r0
 80a5d04:	4802      	ldr	r0, [pc, #8]	; (80a5d10 <strtod+0x10>)
 80a5d06:	4b03      	ldr	r3, [pc, #12]	; (80a5d14 <strtod+0x14>)
 80a5d08:	6800      	ldr	r0, [r0, #0]
 80a5d0a:	f7ff ba05 	b.w	80a5118 <_strtod_l>
 80a5d0e:	bf00      	nop
 80a5d10:	20000004 	.word	0x20000004
 80a5d14:	2000006c 	.word	0x2000006c

080a5d18 <_strtol_l.isra.0>:
 80a5d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5d1c:	468c      	mov	ip, r1
 80a5d1e:	4686      	mov	lr, r0
 80a5d20:	4e39      	ldr	r6, [pc, #228]	; (80a5e08 <_strtol_l.isra.0+0xf0>)
 80a5d22:	4660      	mov	r0, ip
 80a5d24:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a5d28:	5da5      	ldrb	r5, [r4, r6]
 80a5d2a:	f015 0508 	ands.w	r5, r5, #8
 80a5d2e:	d1f8      	bne.n	80a5d22 <_strtol_l.isra.0+0xa>
 80a5d30:	2c2d      	cmp	r4, #45	; 0x2d
 80a5d32:	d133      	bne.n	80a5d9c <_strtol_l.isra.0+0x84>
 80a5d34:	f04f 0801 	mov.w	r8, #1
 80a5d38:	f89c 4000 	ldrb.w	r4, [ip]
 80a5d3c:	f100 0c02 	add.w	ip, r0, #2
 80a5d40:	2b00      	cmp	r3, #0
 80a5d42:	d05c      	beq.n	80a5dfe <_strtol_l.isra.0+0xe6>
 80a5d44:	2b10      	cmp	r3, #16
 80a5d46:	d10c      	bne.n	80a5d62 <_strtol_l.isra.0+0x4a>
 80a5d48:	2c30      	cmp	r4, #48	; 0x30
 80a5d4a:	d10a      	bne.n	80a5d62 <_strtol_l.isra.0+0x4a>
 80a5d4c:	f89c 0000 	ldrb.w	r0, [ip]
 80a5d50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5d54:	2858      	cmp	r0, #88	; 0x58
 80a5d56:	d14d      	bne.n	80a5df4 <_strtol_l.isra.0+0xdc>
 80a5d58:	2310      	movs	r3, #16
 80a5d5a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a5d5e:	f10c 0c02 	add.w	ip, ip, #2
 80a5d62:	2600      	movs	r6, #0
 80a5d64:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a5d68:	3f01      	subs	r7, #1
 80a5d6a:	fbb7 f9f3 	udiv	r9, r7, r3
 80a5d6e:	4630      	mov	r0, r6
 80a5d70:	fb03 7a19 	mls	sl, r3, r9, r7
 80a5d74:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a5d78:	2d09      	cmp	r5, #9
 80a5d7a:	d818      	bhi.n	80a5dae <_strtol_l.isra.0+0x96>
 80a5d7c:	462c      	mov	r4, r5
 80a5d7e:	42a3      	cmp	r3, r4
 80a5d80:	dd24      	ble.n	80a5dcc <_strtol_l.isra.0+0xb4>
 80a5d82:	1c75      	adds	r5, r6, #1
 80a5d84:	d007      	beq.n	80a5d96 <_strtol_l.isra.0+0x7e>
 80a5d86:	4581      	cmp	r9, r0
 80a5d88:	d31d      	bcc.n	80a5dc6 <_strtol_l.isra.0+0xae>
 80a5d8a:	d101      	bne.n	80a5d90 <_strtol_l.isra.0+0x78>
 80a5d8c:	45a2      	cmp	sl, r4
 80a5d8e:	db1a      	blt.n	80a5dc6 <_strtol_l.isra.0+0xae>
 80a5d90:	2601      	movs	r6, #1
 80a5d92:	fb00 4003 	mla	r0, r0, r3, r4
 80a5d96:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a5d9a:	e7eb      	b.n	80a5d74 <_strtol_l.isra.0+0x5c>
 80a5d9c:	2c2b      	cmp	r4, #43	; 0x2b
 80a5d9e:	bf08      	it	eq
 80a5da0:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a5da4:	46a8      	mov	r8, r5
 80a5da6:	bf08      	it	eq
 80a5da8:	f100 0c02 	addeq.w	ip, r0, #2
 80a5dac:	e7c8      	b.n	80a5d40 <_strtol_l.isra.0+0x28>
 80a5dae:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a5db2:	2d19      	cmp	r5, #25
 80a5db4:	d801      	bhi.n	80a5dba <_strtol_l.isra.0+0xa2>
 80a5db6:	3c37      	subs	r4, #55	; 0x37
 80a5db8:	e7e1      	b.n	80a5d7e <_strtol_l.isra.0+0x66>
 80a5dba:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a5dbe:	2d19      	cmp	r5, #25
 80a5dc0:	d804      	bhi.n	80a5dcc <_strtol_l.isra.0+0xb4>
 80a5dc2:	3c57      	subs	r4, #87	; 0x57
 80a5dc4:	e7db      	b.n	80a5d7e <_strtol_l.isra.0+0x66>
 80a5dc6:	f04f 36ff 	mov.w	r6, #4294967295
 80a5dca:	e7e4      	b.n	80a5d96 <_strtol_l.isra.0+0x7e>
 80a5dcc:	1c73      	adds	r3, r6, #1
 80a5dce:	d106      	bne.n	80a5dde <_strtol_l.isra.0+0xc6>
 80a5dd0:	2322      	movs	r3, #34	; 0x22
 80a5dd2:	4638      	mov	r0, r7
 80a5dd4:	f8ce 3000 	str.w	r3, [lr]
 80a5dd8:	b942      	cbnz	r2, 80a5dec <_strtol_l.isra.0+0xd4>
 80a5dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5dde:	f1b8 0f00 	cmp.w	r8, #0
 80a5de2:	d000      	beq.n	80a5de6 <_strtol_l.isra.0+0xce>
 80a5de4:	4240      	negs	r0, r0
 80a5de6:	2a00      	cmp	r2, #0
 80a5de8:	d0f7      	beq.n	80a5dda <_strtol_l.isra.0+0xc2>
 80a5dea:	b10e      	cbz	r6, 80a5df0 <_strtol_l.isra.0+0xd8>
 80a5dec:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a5df0:	6011      	str	r1, [r2, #0]
 80a5df2:	e7f2      	b.n	80a5dda <_strtol_l.isra.0+0xc2>
 80a5df4:	2430      	movs	r4, #48	; 0x30
 80a5df6:	2b00      	cmp	r3, #0
 80a5df8:	d1b3      	bne.n	80a5d62 <_strtol_l.isra.0+0x4a>
 80a5dfa:	2308      	movs	r3, #8
 80a5dfc:	e7b1      	b.n	80a5d62 <_strtol_l.isra.0+0x4a>
 80a5dfe:	2c30      	cmp	r4, #48	; 0x30
 80a5e00:	d0a4      	beq.n	80a5d4c <_strtol_l.isra.0+0x34>
 80a5e02:	230a      	movs	r3, #10
 80a5e04:	e7ad      	b.n	80a5d62 <_strtol_l.isra.0+0x4a>
 80a5e06:	bf00      	nop
 80a5e08:	080a8139 	.word	0x080a8139

080a5e0c <strtol>:
 80a5e0c:	4613      	mov	r3, r2
 80a5e0e:	460a      	mov	r2, r1
 80a5e10:	4601      	mov	r1, r0
 80a5e12:	4802      	ldr	r0, [pc, #8]	; (80a5e1c <strtol+0x10>)
 80a5e14:	6800      	ldr	r0, [r0, #0]
 80a5e16:	f7ff bf7f 	b.w	80a5d18 <_strtol_l.isra.0>
 80a5e1a:	bf00      	nop
 80a5e1c:	20000004 	.word	0x20000004

080a5e20 <rshift>:
 80a5e20:	6903      	ldr	r3, [r0, #16]
 80a5e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a5e26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80a5e2a:	f100 0414 	add.w	r4, r0, #20
 80a5e2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80a5e32:	dd46      	ble.n	80a5ec2 <rshift+0xa2>
 80a5e34:	f011 011f 	ands.w	r1, r1, #31
 80a5e38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80a5e3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80a5e40:	d10c      	bne.n	80a5e5c <rshift+0x3c>
 80a5e42:	4629      	mov	r1, r5
 80a5e44:	f100 0710 	add.w	r7, r0, #16
 80a5e48:	42b1      	cmp	r1, r6
 80a5e4a:	d335      	bcc.n	80a5eb8 <rshift+0x98>
 80a5e4c:	1a9b      	subs	r3, r3, r2
 80a5e4e:	009b      	lsls	r3, r3, #2
 80a5e50:	1eea      	subs	r2, r5, #3
 80a5e52:	4296      	cmp	r6, r2
 80a5e54:	bf38      	it	cc
 80a5e56:	2300      	movcc	r3, #0
 80a5e58:	4423      	add	r3, r4
 80a5e5a:	e015      	b.n	80a5e88 <rshift+0x68>
 80a5e5c:	46a1      	mov	r9, r4
 80a5e5e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80a5e62:	f1c1 0820 	rsb	r8, r1, #32
 80a5e66:	40cf      	lsrs	r7, r1
 80a5e68:	f105 0e04 	add.w	lr, r5, #4
 80a5e6c:	4576      	cmp	r6, lr
 80a5e6e:	46f4      	mov	ip, lr
 80a5e70:	d816      	bhi.n	80a5ea0 <rshift+0x80>
 80a5e72:	1a9b      	subs	r3, r3, r2
 80a5e74:	009a      	lsls	r2, r3, #2
 80a5e76:	3a04      	subs	r2, #4
 80a5e78:	3501      	adds	r5, #1
 80a5e7a:	42ae      	cmp	r6, r5
 80a5e7c:	bf38      	it	cc
 80a5e7e:	2200      	movcc	r2, #0
 80a5e80:	18a3      	adds	r3, r4, r2
 80a5e82:	50a7      	str	r7, [r4, r2]
 80a5e84:	b107      	cbz	r7, 80a5e88 <rshift+0x68>
 80a5e86:	3304      	adds	r3, #4
 80a5e88:	42a3      	cmp	r3, r4
 80a5e8a:	eba3 0204 	sub.w	r2, r3, r4
 80a5e8e:	bf08      	it	eq
 80a5e90:	2300      	moveq	r3, #0
 80a5e92:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80a5e96:	6102      	str	r2, [r0, #16]
 80a5e98:	bf08      	it	eq
 80a5e9a:	6143      	streq	r3, [r0, #20]
 80a5e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a5ea0:	f8dc c000 	ldr.w	ip, [ip]
 80a5ea4:	fa0c fc08 	lsl.w	ip, ip, r8
 80a5ea8:	ea4c 0707 	orr.w	r7, ip, r7
 80a5eac:	f849 7b04 	str.w	r7, [r9], #4
 80a5eb0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80a5eb4:	40cf      	lsrs	r7, r1
 80a5eb6:	e7d9      	b.n	80a5e6c <rshift+0x4c>
 80a5eb8:	f851 cb04 	ldr.w	ip, [r1], #4
 80a5ebc:	f847 cf04 	str.w	ip, [r7, #4]!
 80a5ec0:	e7c2      	b.n	80a5e48 <rshift+0x28>
 80a5ec2:	4623      	mov	r3, r4
 80a5ec4:	e7e0      	b.n	80a5e88 <rshift+0x68>

080a5ec6 <__hexdig_fun>:
 80a5ec6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a5eca:	2b09      	cmp	r3, #9
 80a5ecc:	d802      	bhi.n	80a5ed4 <__hexdig_fun+0xe>
 80a5ece:	3820      	subs	r0, #32
 80a5ed0:	b2c0      	uxtb	r0, r0
 80a5ed2:	4770      	bx	lr
 80a5ed4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a5ed8:	2b05      	cmp	r3, #5
 80a5eda:	d801      	bhi.n	80a5ee0 <__hexdig_fun+0x1a>
 80a5edc:	3847      	subs	r0, #71	; 0x47
 80a5ede:	e7f7      	b.n	80a5ed0 <__hexdig_fun+0xa>
 80a5ee0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a5ee4:	2b05      	cmp	r3, #5
 80a5ee6:	d801      	bhi.n	80a5eec <__hexdig_fun+0x26>
 80a5ee8:	3827      	subs	r0, #39	; 0x27
 80a5eea:	e7f1      	b.n	80a5ed0 <__hexdig_fun+0xa>
 80a5eec:	2000      	movs	r0, #0
 80a5eee:	4770      	bx	lr

080a5ef0 <__gethex>:
 80a5ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5ef4:	b08b      	sub	sp, #44	; 0x2c
 80a5ef6:	9306      	str	r3, [sp, #24]
 80a5ef8:	4bba      	ldr	r3, [pc, #744]	; (80a61e4 <__gethex+0x2f4>)
 80a5efa:	9002      	str	r0, [sp, #8]
 80a5efc:	681b      	ldr	r3, [r3, #0]
 80a5efe:	468b      	mov	fp, r1
 80a5f00:	4618      	mov	r0, r3
 80a5f02:	4690      	mov	r8, r2
 80a5f04:	9303      	str	r3, [sp, #12]
 80a5f06:	f7ff f8b9 	bl	80a507c <strlen>
 80a5f0a:	4682      	mov	sl, r0
 80a5f0c:	9b03      	ldr	r3, [sp, #12]
 80a5f0e:	f8db 2000 	ldr.w	r2, [fp]
 80a5f12:	4403      	add	r3, r0
 80a5f14:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a5f18:	9307      	str	r3, [sp, #28]
 80a5f1a:	1c93      	adds	r3, r2, #2
 80a5f1c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80a5f20:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80a5f24:	32fe      	adds	r2, #254	; 0xfe
 80a5f26:	18d1      	adds	r1, r2, r3
 80a5f28:	461f      	mov	r7, r3
 80a5f2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a5f2e:	9101      	str	r1, [sp, #4]
 80a5f30:	2830      	cmp	r0, #48	; 0x30
 80a5f32:	d0f8      	beq.n	80a5f26 <__gethex+0x36>
 80a5f34:	f7ff ffc7 	bl	80a5ec6 <__hexdig_fun>
 80a5f38:	4604      	mov	r4, r0
 80a5f3a:	2800      	cmp	r0, #0
 80a5f3c:	d13a      	bne.n	80a5fb4 <__gethex+0xc4>
 80a5f3e:	4652      	mov	r2, sl
 80a5f40:	4638      	mov	r0, r7
 80a5f42:	9903      	ldr	r1, [sp, #12]
 80a5f44:	f7ff f8a2 	bl	80a508c <strncmp>
 80a5f48:	4605      	mov	r5, r0
 80a5f4a:	2800      	cmp	r0, #0
 80a5f4c:	d166      	bne.n	80a601c <__gethex+0x12c>
 80a5f4e:	f817 000a 	ldrb.w	r0, [r7, sl]
 80a5f52:	eb07 060a 	add.w	r6, r7, sl
 80a5f56:	f7ff ffb6 	bl	80a5ec6 <__hexdig_fun>
 80a5f5a:	2800      	cmp	r0, #0
 80a5f5c:	d060      	beq.n	80a6020 <__gethex+0x130>
 80a5f5e:	4633      	mov	r3, r6
 80a5f60:	7818      	ldrb	r0, [r3, #0]
 80a5f62:	461f      	mov	r7, r3
 80a5f64:	2830      	cmp	r0, #48	; 0x30
 80a5f66:	f103 0301 	add.w	r3, r3, #1
 80a5f6a:	d0f9      	beq.n	80a5f60 <__gethex+0x70>
 80a5f6c:	f7ff ffab 	bl	80a5ec6 <__hexdig_fun>
 80a5f70:	2301      	movs	r3, #1
 80a5f72:	fab0 f480 	clz	r4, r0
 80a5f76:	4635      	mov	r5, r6
 80a5f78:	0964      	lsrs	r4, r4, #5
 80a5f7a:	9301      	str	r3, [sp, #4]
 80a5f7c:	463a      	mov	r2, r7
 80a5f7e:	4616      	mov	r6, r2
 80a5f80:	7830      	ldrb	r0, [r6, #0]
 80a5f82:	3201      	adds	r2, #1
 80a5f84:	f7ff ff9f 	bl	80a5ec6 <__hexdig_fun>
 80a5f88:	2800      	cmp	r0, #0
 80a5f8a:	d1f8      	bne.n	80a5f7e <__gethex+0x8e>
 80a5f8c:	4652      	mov	r2, sl
 80a5f8e:	4630      	mov	r0, r6
 80a5f90:	9903      	ldr	r1, [sp, #12]
 80a5f92:	f7ff f87b 	bl	80a508c <strncmp>
 80a5f96:	b980      	cbnz	r0, 80a5fba <__gethex+0xca>
 80a5f98:	b94d      	cbnz	r5, 80a5fae <__gethex+0xbe>
 80a5f9a:	eb06 050a 	add.w	r5, r6, sl
 80a5f9e:	462a      	mov	r2, r5
 80a5fa0:	4616      	mov	r6, r2
 80a5fa2:	7830      	ldrb	r0, [r6, #0]
 80a5fa4:	3201      	adds	r2, #1
 80a5fa6:	f7ff ff8e 	bl	80a5ec6 <__hexdig_fun>
 80a5faa:	2800      	cmp	r0, #0
 80a5fac:	d1f8      	bne.n	80a5fa0 <__gethex+0xb0>
 80a5fae:	1bad      	subs	r5, r5, r6
 80a5fb0:	00ad      	lsls	r5, r5, #2
 80a5fb2:	e004      	b.n	80a5fbe <__gethex+0xce>
 80a5fb4:	2400      	movs	r4, #0
 80a5fb6:	4625      	mov	r5, r4
 80a5fb8:	e7e0      	b.n	80a5f7c <__gethex+0x8c>
 80a5fba:	2d00      	cmp	r5, #0
 80a5fbc:	d1f7      	bne.n	80a5fae <__gethex+0xbe>
 80a5fbe:	7833      	ldrb	r3, [r6, #0]
 80a5fc0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a5fc4:	2b50      	cmp	r3, #80	; 0x50
 80a5fc6:	d139      	bne.n	80a603c <__gethex+0x14c>
 80a5fc8:	7873      	ldrb	r3, [r6, #1]
 80a5fca:	2b2b      	cmp	r3, #43	; 0x2b
 80a5fcc:	d02a      	beq.n	80a6024 <__gethex+0x134>
 80a5fce:	2b2d      	cmp	r3, #45	; 0x2d
 80a5fd0:	d02c      	beq.n	80a602c <__gethex+0x13c>
 80a5fd2:	f04f 0900 	mov.w	r9, #0
 80a5fd6:	1c71      	adds	r1, r6, #1
 80a5fd8:	7808      	ldrb	r0, [r1, #0]
 80a5fda:	f7ff ff74 	bl	80a5ec6 <__hexdig_fun>
 80a5fde:	1e43      	subs	r3, r0, #1
 80a5fe0:	b2db      	uxtb	r3, r3
 80a5fe2:	2b18      	cmp	r3, #24
 80a5fe4:	d82a      	bhi.n	80a603c <__gethex+0x14c>
 80a5fe6:	f1a0 0210 	sub.w	r2, r0, #16
 80a5fea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a5fee:	f7ff ff6a 	bl	80a5ec6 <__hexdig_fun>
 80a5ff2:	1e43      	subs	r3, r0, #1
 80a5ff4:	b2db      	uxtb	r3, r3
 80a5ff6:	2b18      	cmp	r3, #24
 80a5ff8:	d91b      	bls.n	80a6032 <__gethex+0x142>
 80a5ffa:	f1b9 0f00 	cmp.w	r9, #0
 80a5ffe:	d000      	beq.n	80a6002 <__gethex+0x112>
 80a6000:	4252      	negs	r2, r2
 80a6002:	4415      	add	r5, r2
 80a6004:	f8cb 1000 	str.w	r1, [fp]
 80a6008:	b1d4      	cbz	r4, 80a6040 <__gethex+0x150>
 80a600a:	9b01      	ldr	r3, [sp, #4]
 80a600c:	2b00      	cmp	r3, #0
 80a600e:	bf14      	ite	ne
 80a6010:	2700      	movne	r7, #0
 80a6012:	2706      	moveq	r7, #6
 80a6014:	4638      	mov	r0, r7
 80a6016:	b00b      	add	sp, #44	; 0x2c
 80a6018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a601c:	463e      	mov	r6, r7
 80a601e:	4625      	mov	r5, r4
 80a6020:	2401      	movs	r4, #1
 80a6022:	e7cc      	b.n	80a5fbe <__gethex+0xce>
 80a6024:	f04f 0900 	mov.w	r9, #0
 80a6028:	1cb1      	adds	r1, r6, #2
 80a602a:	e7d5      	b.n	80a5fd8 <__gethex+0xe8>
 80a602c:	f04f 0901 	mov.w	r9, #1
 80a6030:	e7fa      	b.n	80a6028 <__gethex+0x138>
 80a6032:	230a      	movs	r3, #10
 80a6034:	fb03 0202 	mla	r2, r3, r2, r0
 80a6038:	3a10      	subs	r2, #16
 80a603a:	e7d6      	b.n	80a5fea <__gethex+0xfa>
 80a603c:	4631      	mov	r1, r6
 80a603e:	e7e1      	b.n	80a6004 <__gethex+0x114>
 80a6040:	4621      	mov	r1, r4
 80a6042:	1bf3      	subs	r3, r6, r7
 80a6044:	3b01      	subs	r3, #1
 80a6046:	2b07      	cmp	r3, #7
 80a6048:	dc50      	bgt.n	80a60ec <__gethex+0x1fc>
 80a604a:	9802      	ldr	r0, [sp, #8]
 80a604c:	f000 fa4e 	bl	80a64ec <_Balloc>
 80a6050:	f04f 0b00 	mov.w	fp, #0
 80a6054:	4604      	mov	r4, r0
 80a6056:	f100 0914 	add.w	r9, r0, #20
 80a605a:	f1ca 0301 	rsb	r3, sl, #1
 80a605e:	f8cd 9010 	str.w	r9, [sp, #16]
 80a6062:	f8cd b004 	str.w	fp, [sp, #4]
 80a6066:	9308      	str	r3, [sp, #32]
 80a6068:	42b7      	cmp	r7, r6
 80a606a:	d342      	bcc.n	80a60f2 <__gethex+0x202>
 80a606c:	9f04      	ldr	r7, [sp, #16]
 80a606e:	9b01      	ldr	r3, [sp, #4]
 80a6070:	f847 3b04 	str.w	r3, [r7], #4
 80a6074:	eba7 0709 	sub.w	r7, r7, r9
 80a6078:	10bf      	asrs	r7, r7, #2
 80a607a:	6127      	str	r7, [r4, #16]
 80a607c:	4618      	mov	r0, r3
 80a607e:	f000 fafc 	bl	80a667a <__hi0bits>
 80a6082:	017f      	lsls	r7, r7, #5
 80a6084:	f8d8 6000 	ldr.w	r6, [r8]
 80a6088:	1a3f      	subs	r7, r7, r0
 80a608a:	42b7      	cmp	r7, r6
 80a608c:	dd65      	ble.n	80a615a <__gethex+0x26a>
 80a608e:	1bbf      	subs	r7, r7, r6
 80a6090:	4639      	mov	r1, r7
 80a6092:	4620      	mov	r0, r4
 80a6094:	f000 fe42 	bl	80a6d1c <__any_on>
 80a6098:	4682      	mov	sl, r0
 80a609a:	b1a8      	cbz	r0, 80a60c8 <__gethex+0x1d8>
 80a609c:	f04f 0a01 	mov.w	sl, #1
 80a60a0:	1e7b      	subs	r3, r7, #1
 80a60a2:	1159      	asrs	r1, r3, #5
 80a60a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80a60a8:	f003 021f 	and.w	r2, r3, #31
 80a60ac:	fa0a f202 	lsl.w	r2, sl, r2
 80a60b0:	420a      	tst	r2, r1
 80a60b2:	d009      	beq.n	80a60c8 <__gethex+0x1d8>
 80a60b4:	4553      	cmp	r3, sl
 80a60b6:	dd05      	ble.n	80a60c4 <__gethex+0x1d4>
 80a60b8:	4620      	mov	r0, r4
 80a60ba:	1eb9      	subs	r1, r7, #2
 80a60bc:	f000 fe2e 	bl	80a6d1c <__any_on>
 80a60c0:	2800      	cmp	r0, #0
 80a60c2:	d147      	bne.n	80a6154 <__gethex+0x264>
 80a60c4:	f04f 0a02 	mov.w	sl, #2
 80a60c8:	4639      	mov	r1, r7
 80a60ca:	4620      	mov	r0, r4
 80a60cc:	f7ff fea8 	bl	80a5e20 <rshift>
 80a60d0:	443d      	add	r5, r7
 80a60d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a60d6:	42ab      	cmp	r3, r5
 80a60d8:	da4d      	bge.n	80a6176 <__gethex+0x286>
 80a60da:	4621      	mov	r1, r4
 80a60dc:	9802      	ldr	r0, [sp, #8]
 80a60de:	f000 fa39 	bl	80a6554 <_Bfree>
 80a60e2:	2300      	movs	r3, #0
 80a60e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a60e6:	27a3      	movs	r7, #163	; 0xa3
 80a60e8:	6013      	str	r3, [r2, #0]
 80a60ea:	e793      	b.n	80a6014 <__gethex+0x124>
 80a60ec:	3101      	adds	r1, #1
 80a60ee:	105b      	asrs	r3, r3, #1
 80a60f0:	e7a9      	b.n	80a6046 <__gethex+0x156>
 80a60f2:	1e73      	subs	r3, r6, #1
 80a60f4:	9a07      	ldr	r2, [sp, #28]
 80a60f6:	9305      	str	r3, [sp, #20]
 80a60f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a60fc:	4293      	cmp	r3, r2
 80a60fe:	d019      	beq.n	80a6134 <__gethex+0x244>
 80a6100:	f1bb 0f20 	cmp.w	fp, #32
 80a6104:	d107      	bne.n	80a6116 <__gethex+0x226>
 80a6106:	9b04      	ldr	r3, [sp, #16]
 80a6108:	9a01      	ldr	r2, [sp, #4]
 80a610a:	f843 2b04 	str.w	r2, [r3], #4
 80a610e:	9304      	str	r3, [sp, #16]
 80a6110:	2300      	movs	r3, #0
 80a6112:	469b      	mov	fp, r3
 80a6114:	9301      	str	r3, [sp, #4]
 80a6116:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a611a:	f7ff fed4 	bl	80a5ec6 <__hexdig_fun>
 80a611e:	9b01      	ldr	r3, [sp, #4]
 80a6120:	f000 000f 	and.w	r0, r0, #15
 80a6124:	fa00 f00b 	lsl.w	r0, r0, fp
 80a6128:	4303      	orrs	r3, r0
 80a612a:	9301      	str	r3, [sp, #4]
 80a612c:	f10b 0b04 	add.w	fp, fp, #4
 80a6130:	9b05      	ldr	r3, [sp, #20]
 80a6132:	e00d      	b.n	80a6150 <__gethex+0x260>
 80a6134:	9b05      	ldr	r3, [sp, #20]
 80a6136:	9a08      	ldr	r2, [sp, #32]
 80a6138:	4413      	add	r3, r2
 80a613a:	42bb      	cmp	r3, r7
 80a613c:	d3e0      	bcc.n	80a6100 <__gethex+0x210>
 80a613e:	4618      	mov	r0, r3
 80a6140:	4652      	mov	r2, sl
 80a6142:	9903      	ldr	r1, [sp, #12]
 80a6144:	9309      	str	r3, [sp, #36]	; 0x24
 80a6146:	f7fe ffa1 	bl	80a508c <strncmp>
 80a614a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a614c:	2800      	cmp	r0, #0
 80a614e:	d1d7      	bne.n	80a6100 <__gethex+0x210>
 80a6150:	461e      	mov	r6, r3
 80a6152:	e789      	b.n	80a6068 <__gethex+0x178>
 80a6154:	f04f 0a03 	mov.w	sl, #3
 80a6158:	e7b6      	b.n	80a60c8 <__gethex+0x1d8>
 80a615a:	da09      	bge.n	80a6170 <__gethex+0x280>
 80a615c:	1bf7      	subs	r7, r6, r7
 80a615e:	4621      	mov	r1, r4
 80a6160:	463a      	mov	r2, r7
 80a6162:	9802      	ldr	r0, [sp, #8]
 80a6164:	f000 fbca 	bl	80a68fc <__lshift>
 80a6168:	4604      	mov	r4, r0
 80a616a:	1bed      	subs	r5, r5, r7
 80a616c:	f100 0914 	add.w	r9, r0, #20
 80a6170:	f04f 0a00 	mov.w	sl, #0
 80a6174:	e7ad      	b.n	80a60d2 <__gethex+0x1e2>
 80a6176:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a617a:	42a8      	cmp	r0, r5
 80a617c:	dd6e      	ble.n	80a625c <__gethex+0x36c>
 80a617e:	1b45      	subs	r5, r0, r5
 80a6180:	42ae      	cmp	r6, r5
 80a6182:	dc31      	bgt.n	80a61e8 <__gethex+0x2f8>
 80a6184:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a6188:	2b02      	cmp	r3, #2
 80a618a:	d022      	beq.n	80a61d2 <__gethex+0x2e2>
 80a618c:	2b03      	cmp	r3, #3
 80a618e:	d024      	beq.n	80a61da <__gethex+0x2ea>
 80a6190:	2b01      	cmp	r3, #1
 80a6192:	d115      	bne.n	80a61c0 <__gethex+0x2d0>
 80a6194:	42ae      	cmp	r6, r5
 80a6196:	d113      	bne.n	80a61c0 <__gethex+0x2d0>
 80a6198:	2e01      	cmp	r6, #1
 80a619a:	d10b      	bne.n	80a61b4 <__gethex+0x2c4>
 80a619c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a61a0:	9a06      	ldr	r2, [sp, #24]
 80a61a2:	2762      	movs	r7, #98	; 0x62
 80a61a4:	6013      	str	r3, [r2, #0]
 80a61a6:	2301      	movs	r3, #1
 80a61a8:	6123      	str	r3, [r4, #16]
 80a61aa:	f8c9 3000 	str.w	r3, [r9]
 80a61ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a61b0:	601c      	str	r4, [r3, #0]
 80a61b2:	e72f      	b.n	80a6014 <__gethex+0x124>
 80a61b4:	4620      	mov	r0, r4
 80a61b6:	1e71      	subs	r1, r6, #1
 80a61b8:	f000 fdb0 	bl	80a6d1c <__any_on>
 80a61bc:	2800      	cmp	r0, #0
 80a61be:	d1ed      	bne.n	80a619c <__gethex+0x2ac>
 80a61c0:	4621      	mov	r1, r4
 80a61c2:	9802      	ldr	r0, [sp, #8]
 80a61c4:	f000 f9c6 	bl	80a6554 <_Bfree>
 80a61c8:	2300      	movs	r3, #0
 80a61ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a61cc:	2750      	movs	r7, #80	; 0x50
 80a61ce:	6013      	str	r3, [r2, #0]
 80a61d0:	e720      	b.n	80a6014 <__gethex+0x124>
 80a61d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a61d4:	2b00      	cmp	r3, #0
 80a61d6:	d1f3      	bne.n	80a61c0 <__gethex+0x2d0>
 80a61d8:	e7e0      	b.n	80a619c <__gethex+0x2ac>
 80a61da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a61dc:	2b00      	cmp	r3, #0
 80a61de:	d1dd      	bne.n	80a619c <__gethex+0x2ac>
 80a61e0:	e7ee      	b.n	80a61c0 <__gethex+0x2d0>
 80a61e2:	bf00      	nop
 80a61e4:	080a823c 	.word	0x080a823c
 80a61e8:	1e6f      	subs	r7, r5, #1
 80a61ea:	f1ba 0f00 	cmp.w	sl, #0
 80a61ee:	d132      	bne.n	80a6256 <__gethex+0x366>
 80a61f0:	b127      	cbz	r7, 80a61fc <__gethex+0x30c>
 80a61f2:	4639      	mov	r1, r7
 80a61f4:	4620      	mov	r0, r4
 80a61f6:	f000 fd91 	bl	80a6d1c <__any_on>
 80a61fa:	4682      	mov	sl, r0
 80a61fc:	2101      	movs	r1, #1
 80a61fe:	117b      	asrs	r3, r7, #5
 80a6200:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80a6204:	f007 071f 	and.w	r7, r7, #31
 80a6208:	fa01 f707 	lsl.w	r7, r1, r7
 80a620c:	421f      	tst	r7, r3
 80a620e:	f04f 0702 	mov.w	r7, #2
 80a6212:	4629      	mov	r1, r5
 80a6214:	4620      	mov	r0, r4
 80a6216:	bf18      	it	ne
 80a6218:	f04a 0a02 	orrne.w	sl, sl, #2
 80a621c:	1b76      	subs	r6, r6, r5
 80a621e:	f7ff fdff 	bl	80a5e20 <rshift>
 80a6222:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80a6226:	f1ba 0f00 	cmp.w	sl, #0
 80a622a:	d048      	beq.n	80a62be <__gethex+0x3ce>
 80a622c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a6230:	2b02      	cmp	r3, #2
 80a6232:	d015      	beq.n	80a6260 <__gethex+0x370>
 80a6234:	2b03      	cmp	r3, #3
 80a6236:	d017      	beq.n	80a6268 <__gethex+0x378>
 80a6238:	2b01      	cmp	r3, #1
 80a623a:	d109      	bne.n	80a6250 <__gethex+0x360>
 80a623c:	f01a 0f02 	tst.w	sl, #2
 80a6240:	d006      	beq.n	80a6250 <__gethex+0x360>
 80a6242:	f8d9 0000 	ldr.w	r0, [r9]
 80a6246:	ea4a 0a00 	orr.w	sl, sl, r0
 80a624a:	f01a 0f01 	tst.w	sl, #1
 80a624e:	d10e      	bne.n	80a626e <__gethex+0x37e>
 80a6250:	f047 0710 	orr.w	r7, r7, #16
 80a6254:	e033      	b.n	80a62be <__gethex+0x3ce>
 80a6256:	f04f 0a01 	mov.w	sl, #1
 80a625a:	e7cf      	b.n	80a61fc <__gethex+0x30c>
 80a625c:	2701      	movs	r7, #1
 80a625e:	e7e2      	b.n	80a6226 <__gethex+0x336>
 80a6260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6262:	f1c3 0301 	rsb	r3, r3, #1
 80a6266:	9315      	str	r3, [sp, #84]	; 0x54
 80a6268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a626a:	2b00      	cmp	r3, #0
 80a626c:	d0f0      	beq.n	80a6250 <__gethex+0x360>
 80a626e:	f04f 0c00 	mov.w	ip, #0
 80a6272:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a6276:	f104 0314 	add.w	r3, r4, #20
 80a627a:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80a627e:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 80a6282:	4618      	mov	r0, r3
 80a6284:	f853 2b04 	ldr.w	r2, [r3], #4
 80a6288:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a628c:	d01c      	beq.n	80a62c8 <__gethex+0x3d8>
 80a628e:	3201      	adds	r2, #1
 80a6290:	6002      	str	r2, [r0, #0]
 80a6292:	2f02      	cmp	r7, #2
 80a6294:	f104 0314 	add.w	r3, r4, #20
 80a6298:	d138      	bne.n	80a630c <__gethex+0x41c>
 80a629a:	f8d8 2000 	ldr.w	r2, [r8]
 80a629e:	3a01      	subs	r2, #1
 80a62a0:	42b2      	cmp	r2, r6
 80a62a2:	d10a      	bne.n	80a62ba <__gethex+0x3ca>
 80a62a4:	2201      	movs	r2, #1
 80a62a6:	1171      	asrs	r1, r6, #5
 80a62a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a62ac:	f006 061f 	and.w	r6, r6, #31
 80a62b0:	fa02 f606 	lsl.w	r6, r2, r6
 80a62b4:	421e      	tst	r6, r3
 80a62b6:	bf18      	it	ne
 80a62b8:	4617      	movne	r7, r2
 80a62ba:	f047 0720 	orr.w	r7, r7, #32
 80a62be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a62c0:	601c      	str	r4, [r3, #0]
 80a62c2:	9b06      	ldr	r3, [sp, #24]
 80a62c4:	601d      	str	r5, [r3, #0]
 80a62c6:	e6a5      	b.n	80a6014 <__gethex+0x124>
 80a62c8:	4299      	cmp	r1, r3
 80a62ca:	f843 cc04 	str.w	ip, [r3, #-4]
 80a62ce:	d8d8      	bhi.n	80a6282 <__gethex+0x392>
 80a62d0:	68a3      	ldr	r3, [r4, #8]
 80a62d2:	4599      	cmp	r9, r3
 80a62d4:	db12      	blt.n	80a62fc <__gethex+0x40c>
 80a62d6:	6861      	ldr	r1, [r4, #4]
 80a62d8:	9802      	ldr	r0, [sp, #8]
 80a62da:	3101      	adds	r1, #1
 80a62dc:	f000 f906 	bl	80a64ec <_Balloc>
 80a62e0:	4682      	mov	sl, r0
 80a62e2:	6922      	ldr	r2, [r4, #16]
 80a62e4:	f104 010c 	add.w	r1, r4, #12
 80a62e8:	3202      	adds	r2, #2
 80a62ea:	0092      	lsls	r2, r2, #2
 80a62ec:	300c      	adds	r0, #12
 80a62ee:	f7fe fe81 	bl	80a4ff4 <memcpy>
 80a62f2:	4621      	mov	r1, r4
 80a62f4:	9802      	ldr	r0, [sp, #8]
 80a62f6:	f000 f92d 	bl	80a6554 <_Bfree>
 80a62fa:	4654      	mov	r4, sl
 80a62fc:	6923      	ldr	r3, [r4, #16]
 80a62fe:	1c5a      	adds	r2, r3, #1
 80a6300:	6122      	str	r2, [r4, #16]
 80a6302:	2201      	movs	r2, #1
 80a6304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a6308:	615a      	str	r2, [r3, #20]
 80a630a:	e7c2      	b.n	80a6292 <__gethex+0x3a2>
 80a630c:	6922      	ldr	r2, [r4, #16]
 80a630e:	454a      	cmp	r2, r9
 80a6310:	dd0b      	ble.n	80a632a <__gethex+0x43a>
 80a6312:	2101      	movs	r1, #1
 80a6314:	4620      	mov	r0, r4
 80a6316:	f7ff fd83 	bl	80a5e20 <rshift>
 80a631a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a631e:	3501      	adds	r5, #1
 80a6320:	42ab      	cmp	r3, r5
 80a6322:	f6ff aeda 	blt.w	80a60da <__gethex+0x1ea>
 80a6326:	2701      	movs	r7, #1
 80a6328:	e7c7      	b.n	80a62ba <__gethex+0x3ca>
 80a632a:	f016 061f 	ands.w	r6, r6, #31
 80a632e:	d0fa      	beq.n	80a6326 <__gethex+0x436>
 80a6330:	449b      	add	fp, r3
 80a6332:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 80a6336:	f000 f9a0 	bl	80a667a <__hi0bits>
 80a633a:	f1c6 0620 	rsb	r6, r6, #32
 80a633e:	42b0      	cmp	r0, r6
 80a6340:	dbe7      	blt.n	80a6312 <__gethex+0x422>
 80a6342:	e7f0      	b.n	80a6326 <__gethex+0x436>

080a6344 <L_shift>:
 80a6344:	f1c2 0208 	rsb	r2, r2, #8
 80a6348:	0092      	lsls	r2, r2, #2
 80a634a:	b570      	push	{r4, r5, r6, lr}
 80a634c:	f1c2 0620 	rsb	r6, r2, #32
 80a6350:	6843      	ldr	r3, [r0, #4]
 80a6352:	6804      	ldr	r4, [r0, #0]
 80a6354:	fa03 f506 	lsl.w	r5, r3, r6
 80a6358:	432c      	orrs	r4, r5
 80a635a:	40d3      	lsrs	r3, r2
 80a635c:	6004      	str	r4, [r0, #0]
 80a635e:	f840 3f04 	str.w	r3, [r0, #4]!
 80a6362:	4288      	cmp	r0, r1
 80a6364:	d3f4      	bcc.n	80a6350 <L_shift+0xc>
 80a6366:	bd70      	pop	{r4, r5, r6, pc}

080a6368 <__match>:
 80a6368:	b530      	push	{r4, r5, lr}
 80a636a:	6803      	ldr	r3, [r0, #0]
 80a636c:	3301      	adds	r3, #1
 80a636e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6372:	b914      	cbnz	r4, 80a637a <__match+0x12>
 80a6374:	6003      	str	r3, [r0, #0]
 80a6376:	2001      	movs	r0, #1
 80a6378:	bd30      	pop	{r4, r5, pc}
 80a637a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a637e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a6382:	2d19      	cmp	r5, #25
 80a6384:	bf98      	it	ls
 80a6386:	3220      	addls	r2, #32
 80a6388:	42a2      	cmp	r2, r4
 80a638a:	d0f0      	beq.n	80a636e <__match+0x6>
 80a638c:	2000      	movs	r0, #0
 80a638e:	e7f3      	b.n	80a6378 <__match+0x10>

080a6390 <__hexnan>:
 80a6390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6394:	2500      	movs	r5, #0
 80a6396:	680b      	ldr	r3, [r1, #0]
 80a6398:	4682      	mov	sl, r0
 80a639a:	115e      	asrs	r6, r3, #5
 80a639c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a63a0:	f013 031f 	ands.w	r3, r3, #31
 80a63a4:	bf18      	it	ne
 80a63a6:	3604      	addne	r6, #4
 80a63a8:	1f37      	subs	r7, r6, #4
 80a63aa:	4690      	mov	r8, r2
 80a63ac:	46b9      	mov	r9, r7
 80a63ae:	463c      	mov	r4, r7
 80a63b0:	46ab      	mov	fp, r5
 80a63b2:	b087      	sub	sp, #28
 80a63b4:	6801      	ldr	r1, [r0, #0]
 80a63b6:	9301      	str	r3, [sp, #4]
 80a63b8:	f846 5c04 	str.w	r5, [r6, #-4]
 80a63bc:	9502      	str	r5, [sp, #8]
 80a63be:	784a      	ldrb	r2, [r1, #1]
 80a63c0:	1c4b      	adds	r3, r1, #1
 80a63c2:	9303      	str	r3, [sp, #12]
 80a63c4:	b342      	cbz	r2, 80a6418 <__hexnan+0x88>
 80a63c6:	4610      	mov	r0, r2
 80a63c8:	9105      	str	r1, [sp, #20]
 80a63ca:	9204      	str	r2, [sp, #16]
 80a63cc:	f7ff fd7b 	bl	80a5ec6 <__hexdig_fun>
 80a63d0:	2800      	cmp	r0, #0
 80a63d2:	d14f      	bne.n	80a6474 <__hexnan+0xe4>
 80a63d4:	9a04      	ldr	r2, [sp, #16]
 80a63d6:	9905      	ldr	r1, [sp, #20]
 80a63d8:	2a20      	cmp	r2, #32
 80a63da:	d818      	bhi.n	80a640e <__hexnan+0x7e>
 80a63dc:	9b02      	ldr	r3, [sp, #8]
 80a63de:	459b      	cmp	fp, r3
 80a63e0:	dd13      	ble.n	80a640a <__hexnan+0x7a>
 80a63e2:	454c      	cmp	r4, r9
 80a63e4:	d206      	bcs.n	80a63f4 <__hexnan+0x64>
 80a63e6:	2d07      	cmp	r5, #7
 80a63e8:	dc04      	bgt.n	80a63f4 <__hexnan+0x64>
 80a63ea:	462a      	mov	r2, r5
 80a63ec:	4649      	mov	r1, r9
 80a63ee:	4620      	mov	r0, r4
 80a63f0:	f7ff ffa8 	bl	80a6344 <L_shift>
 80a63f4:	4544      	cmp	r4, r8
 80a63f6:	d950      	bls.n	80a649a <__hexnan+0x10a>
 80a63f8:	2300      	movs	r3, #0
 80a63fa:	f1a4 0904 	sub.w	r9, r4, #4
 80a63fe:	f844 3c04 	str.w	r3, [r4, #-4]
 80a6402:	461d      	mov	r5, r3
 80a6404:	464c      	mov	r4, r9
 80a6406:	f8cd b008 	str.w	fp, [sp, #8]
 80a640a:	9903      	ldr	r1, [sp, #12]
 80a640c:	e7d7      	b.n	80a63be <__hexnan+0x2e>
 80a640e:	2a29      	cmp	r2, #41	; 0x29
 80a6410:	d156      	bne.n	80a64c0 <__hexnan+0x130>
 80a6412:	3102      	adds	r1, #2
 80a6414:	f8ca 1000 	str.w	r1, [sl]
 80a6418:	f1bb 0f00 	cmp.w	fp, #0
 80a641c:	d050      	beq.n	80a64c0 <__hexnan+0x130>
 80a641e:	454c      	cmp	r4, r9
 80a6420:	d206      	bcs.n	80a6430 <__hexnan+0xa0>
 80a6422:	2d07      	cmp	r5, #7
 80a6424:	dc04      	bgt.n	80a6430 <__hexnan+0xa0>
 80a6426:	462a      	mov	r2, r5
 80a6428:	4649      	mov	r1, r9
 80a642a:	4620      	mov	r0, r4
 80a642c:	f7ff ff8a 	bl	80a6344 <L_shift>
 80a6430:	4544      	cmp	r4, r8
 80a6432:	d934      	bls.n	80a649e <__hexnan+0x10e>
 80a6434:	4623      	mov	r3, r4
 80a6436:	f1a8 0204 	sub.w	r2, r8, #4
 80a643a:	f853 1b04 	ldr.w	r1, [r3], #4
 80a643e:	429f      	cmp	r7, r3
 80a6440:	f842 1f04 	str.w	r1, [r2, #4]!
 80a6444:	d2f9      	bcs.n	80a643a <__hexnan+0xaa>
 80a6446:	1b3b      	subs	r3, r7, r4
 80a6448:	f023 0303 	bic.w	r3, r3, #3
 80a644c:	3304      	adds	r3, #4
 80a644e:	3401      	adds	r4, #1
 80a6450:	3e03      	subs	r6, #3
 80a6452:	42b4      	cmp	r4, r6
 80a6454:	bf88      	it	hi
 80a6456:	2304      	movhi	r3, #4
 80a6458:	2200      	movs	r2, #0
 80a645a:	4443      	add	r3, r8
 80a645c:	f843 2b04 	str.w	r2, [r3], #4
 80a6460:	429f      	cmp	r7, r3
 80a6462:	d2fb      	bcs.n	80a645c <__hexnan+0xcc>
 80a6464:	683b      	ldr	r3, [r7, #0]
 80a6466:	b91b      	cbnz	r3, 80a6470 <__hexnan+0xe0>
 80a6468:	4547      	cmp	r7, r8
 80a646a:	d127      	bne.n	80a64bc <__hexnan+0x12c>
 80a646c:	2301      	movs	r3, #1
 80a646e:	603b      	str	r3, [r7, #0]
 80a6470:	2005      	movs	r0, #5
 80a6472:	e026      	b.n	80a64c2 <__hexnan+0x132>
 80a6474:	3501      	adds	r5, #1
 80a6476:	2d08      	cmp	r5, #8
 80a6478:	f10b 0b01 	add.w	fp, fp, #1
 80a647c:	dd06      	ble.n	80a648c <__hexnan+0xfc>
 80a647e:	4544      	cmp	r4, r8
 80a6480:	d9c3      	bls.n	80a640a <__hexnan+0x7a>
 80a6482:	2300      	movs	r3, #0
 80a6484:	2501      	movs	r5, #1
 80a6486:	f844 3c04 	str.w	r3, [r4, #-4]
 80a648a:	3c04      	subs	r4, #4
 80a648c:	6822      	ldr	r2, [r4, #0]
 80a648e:	f000 000f 	and.w	r0, r0, #15
 80a6492:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80a6496:	6022      	str	r2, [r4, #0]
 80a6498:	e7b7      	b.n	80a640a <__hexnan+0x7a>
 80a649a:	2508      	movs	r5, #8
 80a649c:	e7b5      	b.n	80a640a <__hexnan+0x7a>
 80a649e:	9b01      	ldr	r3, [sp, #4]
 80a64a0:	2b00      	cmp	r3, #0
 80a64a2:	d0df      	beq.n	80a6464 <__hexnan+0xd4>
 80a64a4:	f04f 32ff 	mov.w	r2, #4294967295
 80a64a8:	f1c3 0320 	rsb	r3, r3, #32
 80a64ac:	fa22 f303 	lsr.w	r3, r2, r3
 80a64b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a64b4:	401a      	ands	r2, r3
 80a64b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80a64ba:	e7d3      	b.n	80a6464 <__hexnan+0xd4>
 80a64bc:	3f04      	subs	r7, #4
 80a64be:	e7d1      	b.n	80a6464 <__hexnan+0xd4>
 80a64c0:	2004      	movs	r0, #4
 80a64c2:	b007      	add	sp, #28
 80a64c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a64c8 <__ascii_mbtowc>:
 80a64c8:	b082      	sub	sp, #8
 80a64ca:	b901      	cbnz	r1, 80a64ce <__ascii_mbtowc+0x6>
 80a64cc:	a901      	add	r1, sp, #4
 80a64ce:	b142      	cbz	r2, 80a64e2 <__ascii_mbtowc+0x1a>
 80a64d0:	b14b      	cbz	r3, 80a64e6 <__ascii_mbtowc+0x1e>
 80a64d2:	7813      	ldrb	r3, [r2, #0]
 80a64d4:	600b      	str	r3, [r1, #0]
 80a64d6:	7812      	ldrb	r2, [r2, #0]
 80a64d8:	1e10      	subs	r0, r2, #0
 80a64da:	bf18      	it	ne
 80a64dc:	2001      	movne	r0, #1
 80a64de:	b002      	add	sp, #8
 80a64e0:	4770      	bx	lr
 80a64e2:	4610      	mov	r0, r2
 80a64e4:	e7fb      	b.n	80a64de <__ascii_mbtowc+0x16>
 80a64e6:	f06f 0001 	mvn.w	r0, #1
 80a64ea:	e7f8      	b.n	80a64de <__ascii_mbtowc+0x16>

080a64ec <_Balloc>:
 80a64ec:	b570      	push	{r4, r5, r6, lr}
 80a64ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a64f0:	4604      	mov	r4, r0
 80a64f2:	460d      	mov	r5, r1
 80a64f4:	b93e      	cbnz	r6, 80a6506 <_Balloc+0x1a>
 80a64f6:	2010      	movs	r0, #16
 80a64f8:	f7fc fc9e 	bl	80a2e38 <malloc>
 80a64fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a6500:	6260      	str	r0, [r4, #36]	; 0x24
 80a6502:	6006      	str	r6, [r0, #0]
 80a6504:	60c6      	str	r6, [r0, #12]
 80a6506:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80a6508:	68f3      	ldr	r3, [r6, #12]
 80a650a:	b183      	cbz	r3, 80a652e <_Balloc+0x42>
 80a650c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a650e:	68db      	ldr	r3, [r3, #12]
 80a6510:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80a6514:	b9b8      	cbnz	r0, 80a6546 <_Balloc+0x5a>
 80a6516:	2101      	movs	r1, #1
 80a6518:	fa01 f605 	lsl.w	r6, r1, r5
 80a651c:	1d72      	adds	r2, r6, #5
 80a651e:	4620      	mov	r0, r4
 80a6520:	0092      	lsls	r2, r2, #2
 80a6522:	f000 fc1c 	bl	80a6d5e <_calloc_r>
 80a6526:	b160      	cbz	r0, 80a6542 <_Balloc+0x56>
 80a6528:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80a652c:	e00e      	b.n	80a654c <_Balloc+0x60>
 80a652e:	2221      	movs	r2, #33	; 0x21
 80a6530:	2104      	movs	r1, #4
 80a6532:	4620      	mov	r0, r4
 80a6534:	f000 fc13 	bl	80a6d5e <_calloc_r>
 80a6538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a653a:	60f0      	str	r0, [r6, #12]
 80a653c:	68db      	ldr	r3, [r3, #12]
 80a653e:	2b00      	cmp	r3, #0
 80a6540:	d1e4      	bne.n	80a650c <_Balloc+0x20>
 80a6542:	2000      	movs	r0, #0
 80a6544:	bd70      	pop	{r4, r5, r6, pc}
 80a6546:	6802      	ldr	r2, [r0, #0]
 80a6548:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80a654c:	2300      	movs	r3, #0
 80a654e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80a6552:	e7f7      	b.n	80a6544 <_Balloc+0x58>

080a6554 <_Bfree>:
 80a6554:	b570      	push	{r4, r5, r6, lr}
 80a6556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a6558:	4605      	mov	r5, r0
 80a655a:	460c      	mov	r4, r1
 80a655c:	b93e      	cbnz	r6, 80a656e <_Bfree+0x1a>
 80a655e:	2010      	movs	r0, #16
 80a6560:	f7fc fc6a 	bl	80a2e38 <malloc>
 80a6564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a6568:	6268      	str	r0, [r5, #36]	; 0x24
 80a656a:	6006      	str	r6, [r0, #0]
 80a656c:	60c6      	str	r6, [r0, #12]
 80a656e:	b13c      	cbz	r4, 80a6580 <_Bfree+0x2c>
 80a6570:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80a6572:	6862      	ldr	r2, [r4, #4]
 80a6574:	68db      	ldr	r3, [r3, #12]
 80a6576:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a657a:	6021      	str	r1, [r4, #0]
 80a657c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80a6580:	bd70      	pop	{r4, r5, r6, pc}

080a6582 <__multadd>:
 80a6582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6586:	4698      	mov	r8, r3
 80a6588:	460c      	mov	r4, r1
 80a658a:	2300      	movs	r3, #0
 80a658c:	690e      	ldr	r6, [r1, #16]
 80a658e:	4607      	mov	r7, r0
 80a6590:	f101 0014 	add.w	r0, r1, #20
 80a6594:	6805      	ldr	r5, [r0, #0]
 80a6596:	3301      	adds	r3, #1
 80a6598:	b2a9      	uxth	r1, r5
 80a659a:	fb02 8101 	mla	r1, r2, r1, r8
 80a659e:	0c2d      	lsrs	r5, r5, #16
 80a65a0:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80a65a4:	fb02 c505 	mla	r5, r2, r5, ip
 80a65a8:	b289      	uxth	r1, r1
 80a65aa:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80a65ae:	429e      	cmp	r6, r3
 80a65b0:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80a65b4:	f840 1b04 	str.w	r1, [r0], #4
 80a65b8:	dcec      	bgt.n	80a6594 <__multadd+0x12>
 80a65ba:	f1b8 0f00 	cmp.w	r8, #0
 80a65be:	d01b      	beq.n	80a65f8 <__multadd+0x76>
 80a65c0:	68a3      	ldr	r3, [r4, #8]
 80a65c2:	42b3      	cmp	r3, r6
 80a65c4:	dc12      	bgt.n	80a65ec <__multadd+0x6a>
 80a65c6:	6861      	ldr	r1, [r4, #4]
 80a65c8:	4638      	mov	r0, r7
 80a65ca:	3101      	adds	r1, #1
 80a65cc:	f7ff ff8e 	bl	80a64ec <_Balloc>
 80a65d0:	4605      	mov	r5, r0
 80a65d2:	6922      	ldr	r2, [r4, #16]
 80a65d4:	f104 010c 	add.w	r1, r4, #12
 80a65d8:	3202      	adds	r2, #2
 80a65da:	0092      	lsls	r2, r2, #2
 80a65dc:	300c      	adds	r0, #12
 80a65de:	f7fe fd09 	bl	80a4ff4 <memcpy>
 80a65e2:	4621      	mov	r1, r4
 80a65e4:	4638      	mov	r0, r7
 80a65e6:	f7ff ffb5 	bl	80a6554 <_Bfree>
 80a65ea:	462c      	mov	r4, r5
 80a65ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80a65f0:	3601      	adds	r6, #1
 80a65f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80a65f6:	6126      	str	r6, [r4, #16]
 80a65f8:	4620      	mov	r0, r4
 80a65fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a65fe <__s2b>:
 80a65fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a6602:	4615      	mov	r5, r2
 80a6604:	2209      	movs	r2, #9
 80a6606:	461f      	mov	r7, r3
 80a6608:	3308      	adds	r3, #8
 80a660a:	460c      	mov	r4, r1
 80a660c:	fb93 f3f2 	sdiv	r3, r3, r2
 80a6610:	4606      	mov	r6, r0
 80a6612:	2201      	movs	r2, #1
 80a6614:	2100      	movs	r1, #0
 80a6616:	429a      	cmp	r2, r3
 80a6618:	db20      	blt.n	80a665c <__s2b+0x5e>
 80a661a:	4630      	mov	r0, r6
 80a661c:	f7ff ff66 	bl	80a64ec <_Balloc>
 80a6620:	9b08      	ldr	r3, [sp, #32]
 80a6622:	2d09      	cmp	r5, #9
 80a6624:	6143      	str	r3, [r0, #20]
 80a6626:	f04f 0301 	mov.w	r3, #1
 80a662a:	6103      	str	r3, [r0, #16]
 80a662c:	dd19      	ble.n	80a6662 <__s2b+0x64>
 80a662e:	f104 0909 	add.w	r9, r4, #9
 80a6632:	46c8      	mov	r8, r9
 80a6634:	442c      	add	r4, r5
 80a6636:	f818 3b01 	ldrb.w	r3, [r8], #1
 80a663a:	4601      	mov	r1, r0
 80a663c:	220a      	movs	r2, #10
 80a663e:	4630      	mov	r0, r6
 80a6640:	3b30      	subs	r3, #48	; 0x30
 80a6642:	f7ff ff9e 	bl	80a6582 <__multadd>
 80a6646:	45a0      	cmp	r8, r4
 80a6648:	d1f5      	bne.n	80a6636 <__s2b+0x38>
 80a664a:	f1a5 0408 	sub.w	r4, r5, #8
 80a664e:	444c      	add	r4, r9
 80a6650:	1b2d      	subs	r5, r5, r4
 80a6652:	1963      	adds	r3, r4, r5
 80a6654:	42bb      	cmp	r3, r7
 80a6656:	db07      	blt.n	80a6668 <__s2b+0x6a>
 80a6658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a665c:	0052      	lsls	r2, r2, #1
 80a665e:	3101      	adds	r1, #1
 80a6660:	e7d9      	b.n	80a6616 <__s2b+0x18>
 80a6662:	2509      	movs	r5, #9
 80a6664:	340a      	adds	r4, #10
 80a6666:	e7f3      	b.n	80a6650 <__s2b+0x52>
 80a6668:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a666c:	4601      	mov	r1, r0
 80a666e:	220a      	movs	r2, #10
 80a6670:	4630      	mov	r0, r6
 80a6672:	3b30      	subs	r3, #48	; 0x30
 80a6674:	f7ff ff85 	bl	80a6582 <__multadd>
 80a6678:	e7eb      	b.n	80a6652 <__s2b+0x54>

080a667a <__hi0bits>:
 80a667a:	0c02      	lsrs	r2, r0, #16
 80a667c:	0412      	lsls	r2, r2, #16
 80a667e:	4603      	mov	r3, r0
 80a6680:	b9ca      	cbnz	r2, 80a66b6 <__hi0bits+0x3c>
 80a6682:	0403      	lsls	r3, r0, #16
 80a6684:	2010      	movs	r0, #16
 80a6686:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80a668a:	bf04      	itt	eq
 80a668c:	021b      	lsleq	r3, r3, #8
 80a668e:	3008      	addeq	r0, #8
 80a6690:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80a6694:	bf04      	itt	eq
 80a6696:	011b      	lsleq	r3, r3, #4
 80a6698:	3004      	addeq	r0, #4
 80a669a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80a669e:	bf04      	itt	eq
 80a66a0:	009b      	lsleq	r3, r3, #2
 80a66a2:	3002      	addeq	r0, #2
 80a66a4:	2b00      	cmp	r3, #0
 80a66a6:	db05      	blt.n	80a66b4 <__hi0bits+0x3a>
 80a66a8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80a66ac:	f100 0001 	add.w	r0, r0, #1
 80a66b0:	bf08      	it	eq
 80a66b2:	2020      	moveq	r0, #32
 80a66b4:	4770      	bx	lr
 80a66b6:	2000      	movs	r0, #0
 80a66b8:	e7e5      	b.n	80a6686 <__hi0bits+0xc>

080a66ba <__lo0bits>:
 80a66ba:	6803      	ldr	r3, [r0, #0]
 80a66bc:	4602      	mov	r2, r0
 80a66be:	f013 0007 	ands.w	r0, r3, #7
 80a66c2:	d00b      	beq.n	80a66dc <__lo0bits+0x22>
 80a66c4:	07d9      	lsls	r1, r3, #31
 80a66c6:	d422      	bmi.n	80a670e <__lo0bits+0x54>
 80a66c8:	0798      	lsls	r0, r3, #30
 80a66ca:	bf49      	itett	mi
 80a66cc:	085b      	lsrmi	r3, r3, #1
 80a66ce:	089b      	lsrpl	r3, r3, #2
 80a66d0:	2001      	movmi	r0, #1
 80a66d2:	6013      	strmi	r3, [r2, #0]
 80a66d4:	bf5c      	itt	pl
 80a66d6:	2002      	movpl	r0, #2
 80a66d8:	6013      	strpl	r3, [r2, #0]
 80a66da:	4770      	bx	lr
 80a66dc:	b299      	uxth	r1, r3
 80a66de:	b909      	cbnz	r1, 80a66e4 <__lo0bits+0x2a>
 80a66e0:	2010      	movs	r0, #16
 80a66e2:	0c1b      	lsrs	r3, r3, #16
 80a66e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a66e8:	bf04      	itt	eq
 80a66ea:	0a1b      	lsreq	r3, r3, #8
 80a66ec:	3008      	addeq	r0, #8
 80a66ee:	0719      	lsls	r1, r3, #28
 80a66f0:	bf04      	itt	eq
 80a66f2:	091b      	lsreq	r3, r3, #4
 80a66f4:	3004      	addeq	r0, #4
 80a66f6:	0799      	lsls	r1, r3, #30
 80a66f8:	bf04      	itt	eq
 80a66fa:	089b      	lsreq	r3, r3, #2
 80a66fc:	3002      	addeq	r0, #2
 80a66fe:	07d9      	lsls	r1, r3, #31
 80a6700:	d403      	bmi.n	80a670a <__lo0bits+0x50>
 80a6702:	085b      	lsrs	r3, r3, #1
 80a6704:	f100 0001 	add.w	r0, r0, #1
 80a6708:	d003      	beq.n	80a6712 <__lo0bits+0x58>
 80a670a:	6013      	str	r3, [r2, #0]
 80a670c:	4770      	bx	lr
 80a670e:	2000      	movs	r0, #0
 80a6710:	4770      	bx	lr
 80a6712:	2020      	movs	r0, #32
 80a6714:	4770      	bx	lr

080a6716 <__i2b>:
 80a6716:	b510      	push	{r4, lr}
 80a6718:	460c      	mov	r4, r1
 80a671a:	2101      	movs	r1, #1
 80a671c:	f7ff fee6 	bl	80a64ec <_Balloc>
 80a6720:	2201      	movs	r2, #1
 80a6722:	6144      	str	r4, [r0, #20]
 80a6724:	6102      	str	r2, [r0, #16]
 80a6726:	bd10      	pop	{r4, pc}

080a6728 <__multiply>:
 80a6728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a672c:	4615      	mov	r5, r2
 80a672e:	690a      	ldr	r2, [r1, #16]
 80a6730:	692b      	ldr	r3, [r5, #16]
 80a6732:	460c      	mov	r4, r1
 80a6734:	429a      	cmp	r2, r3
 80a6736:	bfbe      	ittt	lt
 80a6738:	460b      	movlt	r3, r1
 80a673a:	462c      	movlt	r4, r5
 80a673c:	461d      	movlt	r5, r3
 80a673e:	6927      	ldr	r7, [r4, #16]
 80a6740:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80a6744:	68a3      	ldr	r3, [r4, #8]
 80a6746:	6861      	ldr	r1, [r4, #4]
 80a6748:	eb07 0609 	add.w	r6, r7, r9
 80a674c:	42b3      	cmp	r3, r6
 80a674e:	bfb8      	it	lt
 80a6750:	3101      	addlt	r1, #1
 80a6752:	b085      	sub	sp, #20
 80a6754:	f7ff feca 	bl	80a64ec <_Balloc>
 80a6758:	f100 0114 	add.w	r1, r0, #20
 80a675c:	460b      	mov	r3, r1
 80a675e:	2200      	movs	r2, #0
 80a6760:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 80a6764:	4543      	cmp	r3, r8
 80a6766:	d31d      	bcc.n	80a67a4 <__multiply+0x7c>
 80a6768:	f104 0314 	add.w	r3, r4, #20
 80a676c:	f105 0214 	add.w	r2, r5, #20
 80a6770:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80a6774:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a6778:	9302      	str	r3, [sp, #8]
 80a677a:	1b3b      	subs	r3, r7, r4
 80a677c:	3b15      	subs	r3, #21
 80a677e:	f023 0303 	bic.w	r3, r3, #3
 80a6782:	3304      	adds	r3, #4
 80a6784:	f104 0515 	add.w	r5, r4, #21
 80a6788:	42af      	cmp	r7, r5
 80a678a:	bf38      	it	cc
 80a678c:	2304      	movcc	r3, #4
 80a678e:	9301      	str	r3, [sp, #4]
 80a6790:	9b02      	ldr	r3, [sp, #8]
 80a6792:	9203      	str	r2, [sp, #12]
 80a6794:	4293      	cmp	r3, r2
 80a6796:	d808      	bhi.n	80a67aa <__multiply+0x82>
 80a6798:	2e00      	cmp	r6, #0
 80a679a:	dc5a      	bgt.n	80a6852 <__multiply+0x12a>
 80a679c:	6106      	str	r6, [r0, #16]
 80a679e:	b005      	add	sp, #20
 80a67a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a67a4:	f843 2b04 	str.w	r2, [r3], #4
 80a67a8:	e7dc      	b.n	80a6764 <__multiply+0x3c>
 80a67aa:	f8b2 a000 	ldrh.w	sl, [r2]
 80a67ae:	f1ba 0f00 	cmp.w	sl, #0
 80a67b2:	d024      	beq.n	80a67fe <__multiply+0xd6>
 80a67b4:	4689      	mov	r9, r1
 80a67b6:	f04f 0c00 	mov.w	ip, #0
 80a67ba:	f104 0e14 	add.w	lr, r4, #20
 80a67be:	f85e 5b04 	ldr.w	r5, [lr], #4
 80a67c2:	f8d9 b000 	ldr.w	fp, [r9]
 80a67c6:	b2ab      	uxth	r3, r5
 80a67c8:	fa1f fb8b 	uxth.w	fp, fp
 80a67cc:	fb0a b303 	mla	r3, sl, r3, fp
 80a67d0:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 80a67d4:	f8d9 5000 	ldr.w	r5, [r9]
 80a67d8:	4463      	add	r3, ip
 80a67da:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a67de:	fb0a c50b 	mla	r5, sl, fp, ip
 80a67e2:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 80a67e6:	b29b      	uxth	r3, r3
 80a67e8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80a67ec:	4577      	cmp	r7, lr
 80a67ee:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a67f2:	f849 3b04 	str.w	r3, [r9], #4
 80a67f6:	d8e2      	bhi.n	80a67be <__multiply+0x96>
 80a67f8:	9b01      	ldr	r3, [sp, #4]
 80a67fa:	f841 c003 	str.w	ip, [r1, r3]
 80a67fe:	9b03      	ldr	r3, [sp, #12]
 80a6800:	3204      	adds	r2, #4
 80a6802:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80a6806:	f1b9 0f00 	cmp.w	r9, #0
 80a680a:	d020      	beq.n	80a684e <__multiply+0x126>
 80a680c:	468e      	mov	lr, r1
 80a680e:	f04f 0a00 	mov.w	sl, #0
 80a6812:	680b      	ldr	r3, [r1, #0]
 80a6814:	f104 0c14 	add.w	ip, r4, #20
 80a6818:	f8bc 5000 	ldrh.w	r5, [ip]
 80a681c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80a6820:	b29b      	uxth	r3, r3
 80a6822:	fb09 b505 	mla	r5, r9, r5, fp
 80a6826:	44aa      	add	sl, r5
 80a6828:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80a682c:	f84e 3b04 	str.w	r3, [lr], #4
 80a6830:	f85c 3b04 	ldr.w	r3, [ip], #4
 80a6834:	f8be 5000 	ldrh.w	r5, [lr]
 80a6838:	0c1b      	lsrs	r3, r3, #16
 80a683a:	fb09 5303 	mla	r3, r9, r3, r5
 80a683e:	4567      	cmp	r7, ip
 80a6840:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80a6844:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80a6848:	d8e6      	bhi.n	80a6818 <__multiply+0xf0>
 80a684a:	9d01      	ldr	r5, [sp, #4]
 80a684c:	514b      	str	r3, [r1, r5]
 80a684e:	3104      	adds	r1, #4
 80a6850:	e79e      	b.n	80a6790 <__multiply+0x68>
 80a6852:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80a6856:	2b00      	cmp	r3, #0
 80a6858:	d1a0      	bne.n	80a679c <__multiply+0x74>
 80a685a:	3e01      	subs	r6, #1
 80a685c:	e79c      	b.n	80a6798 <__multiply+0x70>
	...

080a6860 <__pow5mult>:
 80a6860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a6864:	4615      	mov	r5, r2
 80a6866:	f012 0203 	ands.w	r2, r2, #3
 80a686a:	4606      	mov	r6, r0
 80a686c:	460f      	mov	r7, r1
 80a686e:	d007      	beq.n	80a6880 <__pow5mult+0x20>
 80a6870:	4c21      	ldr	r4, [pc, #132]	; (80a68f8 <__pow5mult+0x98>)
 80a6872:	3a01      	subs	r2, #1
 80a6874:	2300      	movs	r3, #0
 80a6876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a687a:	f7ff fe82 	bl	80a6582 <__multadd>
 80a687e:	4607      	mov	r7, r0
 80a6880:	10ad      	asrs	r5, r5, #2
 80a6882:	d035      	beq.n	80a68f0 <__pow5mult+0x90>
 80a6884:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a6886:	b93c      	cbnz	r4, 80a6898 <__pow5mult+0x38>
 80a6888:	2010      	movs	r0, #16
 80a688a:	f7fc fad5 	bl	80a2e38 <malloc>
 80a688e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80a6892:	6270      	str	r0, [r6, #36]	; 0x24
 80a6894:	6004      	str	r4, [r0, #0]
 80a6896:	60c4      	str	r4, [r0, #12]
 80a6898:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a689c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a68a0:	b94c      	cbnz	r4, 80a68b6 <__pow5mult+0x56>
 80a68a2:	f240 2171 	movw	r1, #625	; 0x271
 80a68a6:	4630      	mov	r0, r6
 80a68a8:	f7ff ff35 	bl	80a6716 <__i2b>
 80a68ac:	2300      	movs	r3, #0
 80a68ae:	4604      	mov	r4, r0
 80a68b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80a68b4:	6003      	str	r3, [r0, #0]
 80a68b6:	f04f 0900 	mov.w	r9, #0
 80a68ba:	07eb      	lsls	r3, r5, #31
 80a68bc:	d50a      	bpl.n	80a68d4 <__pow5mult+0x74>
 80a68be:	4639      	mov	r1, r7
 80a68c0:	4622      	mov	r2, r4
 80a68c2:	4630      	mov	r0, r6
 80a68c4:	f7ff ff30 	bl	80a6728 <__multiply>
 80a68c8:	4680      	mov	r8, r0
 80a68ca:	4639      	mov	r1, r7
 80a68cc:	4630      	mov	r0, r6
 80a68ce:	f7ff fe41 	bl	80a6554 <_Bfree>
 80a68d2:	4647      	mov	r7, r8
 80a68d4:	106d      	asrs	r5, r5, #1
 80a68d6:	d00b      	beq.n	80a68f0 <__pow5mult+0x90>
 80a68d8:	6820      	ldr	r0, [r4, #0]
 80a68da:	b938      	cbnz	r0, 80a68ec <__pow5mult+0x8c>
 80a68dc:	4622      	mov	r2, r4
 80a68de:	4621      	mov	r1, r4
 80a68e0:	4630      	mov	r0, r6
 80a68e2:	f7ff ff21 	bl	80a6728 <__multiply>
 80a68e6:	6020      	str	r0, [r4, #0]
 80a68e8:	f8c0 9000 	str.w	r9, [r0]
 80a68ec:	4604      	mov	r4, r0
 80a68ee:	e7e4      	b.n	80a68ba <__pow5mult+0x5a>
 80a68f0:	4638      	mov	r0, r7
 80a68f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a68f6:	bf00      	nop
 80a68f8:	080a8340 	.word	0x080a8340

080a68fc <__lshift>:
 80a68fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6900:	460c      	mov	r4, r1
 80a6902:	4607      	mov	r7, r0
 80a6904:	4691      	mov	r9, r2
 80a6906:	6923      	ldr	r3, [r4, #16]
 80a6908:	6849      	ldr	r1, [r1, #4]
 80a690a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80a690e:	68a3      	ldr	r3, [r4, #8]
 80a6910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a6914:	f108 0601 	add.w	r6, r8, #1
 80a6918:	42b3      	cmp	r3, r6
 80a691a:	db3f      	blt.n	80a699c <__lshift+0xa0>
 80a691c:	4638      	mov	r0, r7
 80a691e:	f7ff fde5 	bl	80a64ec <_Balloc>
 80a6922:	2300      	movs	r3, #0
 80a6924:	4605      	mov	r5, r0
 80a6926:	f100 0114 	add.w	r1, r0, #20
 80a692a:	f100 0210 	add.w	r2, r0, #16
 80a692e:	4618      	mov	r0, r3
 80a6930:	4553      	cmp	r3, sl
 80a6932:	db36      	blt.n	80a69a2 <__lshift+0xa6>
 80a6934:	6920      	ldr	r0, [r4, #16]
 80a6936:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80a693a:	f104 0314 	add.w	r3, r4, #20
 80a693e:	f019 091f 	ands.w	r9, r9, #31
 80a6942:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80a6946:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80a694a:	d02e      	beq.n	80a69aa <__lshift+0xae>
 80a694c:	468a      	mov	sl, r1
 80a694e:	2200      	movs	r2, #0
 80a6950:	f1c9 0e20 	rsb	lr, r9, #32
 80a6954:	6818      	ldr	r0, [r3, #0]
 80a6956:	fa00 f009 	lsl.w	r0, r0, r9
 80a695a:	4302      	orrs	r2, r0
 80a695c:	f84a 2b04 	str.w	r2, [sl], #4
 80a6960:	f853 2b04 	ldr.w	r2, [r3], #4
 80a6964:	459c      	cmp	ip, r3
 80a6966:	fa22 f20e 	lsr.w	r2, r2, lr
 80a696a:	d8f3      	bhi.n	80a6954 <__lshift+0x58>
 80a696c:	ebac 0304 	sub.w	r3, ip, r4
 80a6970:	3b15      	subs	r3, #21
 80a6972:	f023 0303 	bic.w	r3, r3, #3
 80a6976:	3304      	adds	r3, #4
 80a6978:	f104 0015 	add.w	r0, r4, #21
 80a697c:	4560      	cmp	r0, ip
 80a697e:	bf88      	it	hi
 80a6980:	2304      	movhi	r3, #4
 80a6982:	50ca      	str	r2, [r1, r3]
 80a6984:	b10a      	cbz	r2, 80a698a <__lshift+0x8e>
 80a6986:	f108 0602 	add.w	r6, r8, #2
 80a698a:	3e01      	subs	r6, #1
 80a698c:	4638      	mov	r0, r7
 80a698e:	4621      	mov	r1, r4
 80a6990:	612e      	str	r6, [r5, #16]
 80a6992:	f7ff fddf 	bl	80a6554 <_Bfree>
 80a6996:	4628      	mov	r0, r5
 80a6998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a699c:	3101      	adds	r1, #1
 80a699e:	005b      	lsls	r3, r3, #1
 80a69a0:	e7ba      	b.n	80a6918 <__lshift+0x1c>
 80a69a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80a69a6:	3301      	adds	r3, #1
 80a69a8:	e7c2      	b.n	80a6930 <__lshift+0x34>
 80a69aa:	3904      	subs	r1, #4
 80a69ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80a69b0:	459c      	cmp	ip, r3
 80a69b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80a69b6:	d8f9      	bhi.n	80a69ac <__lshift+0xb0>
 80a69b8:	e7e7      	b.n	80a698a <__lshift+0x8e>

080a69ba <__mcmp>:
 80a69ba:	4603      	mov	r3, r0
 80a69bc:	690a      	ldr	r2, [r1, #16]
 80a69be:	6900      	ldr	r0, [r0, #16]
 80a69c0:	b530      	push	{r4, r5, lr}
 80a69c2:	1a80      	subs	r0, r0, r2
 80a69c4:	d10d      	bne.n	80a69e2 <__mcmp+0x28>
 80a69c6:	3314      	adds	r3, #20
 80a69c8:	3114      	adds	r1, #20
 80a69ca:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80a69ce:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a69d2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80a69d6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80a69da:	4295      	cmp	r5, r2
 80a69dc:	d002      	beq.n	80a69e4 <__mcmp+0x2a>
 80a69de:	d304      	bcc.n	80a69ea <__mcmp+0x30>
 80a69e0:	2001      	movs	r0, #1
 80a69e2:	bd30      	pop	{r4, r5, pc}
 80a69e4:	42a3      	cmp	r3, r4
 80a69e6:	d3f4      	bcc.n	80a69d2 <__mcmp+0x18>
 80a69e8:	e7fb      	b.n	80a69e2 <__mcmp+0x28>
 80a69ea:	f04f 30ff 	mov.w	r0, #4294967295
 80a69ee:	e7f8      	b.n	80a69e2 <__mcmp+0x28>

080a69f0 <__mdiff>:
 80a69f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a69f4:	460c      	mov	r4, r1
 80a69f6:	4606      	mov	r6, r0
 80a69f8:	4611      	mov	r1, r2
 80a69fa:	4620      	mov	r0, r4
 80a69fc:	4692      	mov	sl, r2
 80a69fe:	f7ff ffdc 	bl	80a69ba <__mcmp>
 80a6a02:	1e05      	subs	r5, r0, #0
 80a6a04:	d108      	bne.n	80a6a18 <__mdiff+0x28>
 80a6a06:	4629      	mov	r1, r5
 80a6a08:	4630      	mov	r0, r6
 80a6a0a:	f7ff fd6f 	bl	80a64ec <_Balloc>
 80a6a0e:	2301      	movs	r3, #1
 80a6a10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80a6a14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6a18:	bfa4      	itt	ge
 80a6a1a:	4653      	movge	r3, sl
 80a6a1c:	46a2      	movge	sl, r4
 80a6a1e:	4630      	mov	r0, r6
 80a6a20:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a6a24:	bfa6      	itte	ge
 80a6a26:	461c      	movge	r4, r3
 80a6a28:	2500      	movge	r5, #0
 80a6a2a:	2501      	movlt	r5, #1
 80a6a2c:	f7ff fd5e 	bl	80a64ec <_Balloc>
 80a6a30:	f100 0814 	add.w	r8, r0, #20
 80a6a34:	f8da 7010 	ldr.w	r7, [sl, #16]
 80a6a38:	60c5      	str	r5, [r0, #12]
 80a6a3a:	f10a 0210 	add.w	r2, sl, #16
 80a6a3e:	f10a 0514 	add.w	r5, sl, #20
 80a6a42:	f04f 0c00 	mov.w	ip, #0
 80a6a46:	46c2      	mov	sl, r8
 80a6a48:	6926      	ldr	r6, [r4, #16]
 80a6a4a:	f104 0914 	add.w	r9, r4, #20
 80a6a4e:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80a6a52:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80a6a56:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80a6a5a:	f859 3b04 	ldr.w	r3, [r9], #4
 80a6a5e:	fa1f f18b 	uxth.w	r1, fp
 80a6a62:	4461      	add	r1, ip
 80a6a64:	fa1f fc83 	uxth.w	ip, r3
 80a6a68:	0c1b      	lsrs	r3, r3, #16
 80a6a6a:	eba1 010c 	sub.w	r1, r1, ip
 80a6a6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80a6a72:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80a6a76:	b289      	uxth	r1, r1
 80a6a78:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a6a7c:	454e      	cmp	r6, r9
 80a6a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80a6a82:	f84a 3b04 	str.w	r3, [sl], #4
 80a6a86:	d8e6      	bhi.n	80a6a56 <__mdiff+0x66>
 80a6a88:	1b33      	subs	r3, r6, r4
 80a6a8a:	3b15      	subs	r3, #21
 80a6a8c:	f023 0303 	bic.w	r3, r3, #3
 80a6a90:	3415      	adds	r4, #21
 80a6a92:	3304      	adds	r3, #4
 80a6a94:	42a6      	cmp	r6, r4
 80a6a96:	bf38      	it	cc
 80a6a98:	2304      	movcc	r3, #4
 80a6a9a:	441d      	add	r5, r3
 80a6a9c:	4443      	add	r3, r8
 80a6a9e:	461e      	mov	r6, r3
 80a6aa0:	462c      	mov	r4, r5
 80a6aa2:	4574      	cmp	r4, lr
 80a6aa4:	d30e      	bcc.n	80a6ac4 <__mdiff+0xd4>
 80a6aa6:	f10e 0203 	add.w	r2, lr, #3
 80a6aaa:	1b52      	subs	r2, r2, r5
 80a6aac:	f022 0203 	bic.w	r2, r2, #3
 80a6ab0:	3d03      	subs	r5, #3
 80a6ab2:	45ae      	cmp	lr, r5
 80a6ab4:	bf38      	it	cc
 80a6ab6:	2200      	movcc	r2, #0
 80a6ab8:	441a      	add	r2, r3
 80a6aba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80a6abe:	b18b      	cbz	r3, 80a6ae4 <__mdiff+0xf4>
 80a6ac0:	6107      	str	r7, [r0, #16]
 80a6ac2:	e7a7      	b.n	80a6a14 <__mdiff+0x24>
 80a6ac4:	f854 8b04 	ldr.w	r8, [r4], #4
 80a6ac8:	fa1f f288 	uxth.w	r2, r8
 80a6acc:	4462      	add	r2, ip
 80a6ace:	1411      	asrs	r1, r2, #16
 80a6ad0:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 80a6ad4:	b292      	uxth	r2, r2
 80a6ad6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80a6ada:	ea4f 4c21 	mov.w	ip, r1, asr #16
 80a6ade:	f846 2b04 	str.w	r2, [r6], #4
 80a6ae2:	e7de      	b.n	80a6aa2 <__mdiff+0xb2>
 80a6ae4:	3f01      	subs	r7, #1
 80a6ae6:	e7e8      	b.n	80a6aba <__mdiff+0xca>

080a6ae8 <__ulp>:
 80a6ae8:	4b11      	ldr	r3, [pc, #68]	; (80a6b30 <__ulp+0x48>)
 80a6aea:	400b      	ands	r3, r1
 80a6aec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a6af0:	2b00      	cmp	r3, #0
 80a6af2:	dd02      	ble.n	80a6afa <__ulp+0x12>
 80a6af4:	2000      	movs	r0, #0
 80a6af6:	4619      	mov	r1, r3
 80a6af8:	4770      	bx	lr
 80a6afa:	425b      	negs	r3, r3
 80a6afc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80a6b00:	f04f 0000 	mov.w	r0, #0
 80a6b04:	f04f 0100 	mov.w	r1, #0
 80a6b08:	ea4f 5223 	mov.w	r2, r3, asr #20
 80a6b0c:	da04      	bge.n	80a6b18 <__ulp+0x30>
 80a6b0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80a6b12:	fa43 f102 	asr.w	r1, r3, r2
 80a6b16:	4770      	bx	lr
 80a6b18:	f1a2 0314 	sub.w	r3, r2, #20
 80a6b1c:	2b1e      	cmp	r3, #30
 80a6b1e:	bfd6      	itet	le
 80a6b20:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80a6b24:	2301      	movgt	r3, #1
 80a6b26:	fa22 f303 	lsrle.w	r3, r2, r3
 80a6b2a:	4618      	mov	r0, r3
 80a6b2c:	4770      	bx	lr
 80a6b2e:	bf00      	nop
 80a6b30:	7ff00000 	.word	0x7ff00000

080a6b34 <__b2d>:
 80a6b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a6b38:	6907      	ldr	r7, [r0, #16]
 80a6b3a:	f100 0914 	add.w	r9, r0, #20
 80a6b3e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80a6b42:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80a6b46:	f1a7 0804 	sub.w	r8, r7, #4
 80a6b4a:	4630      	mov	r0, r6
 80a6b4c:	f7ff fd95 	bl	80a667a <__hi0bits>
 80a6b50:	f1c0 0320 	rsb	r3, r0, #32
 80a6b54:	280a      	cmp	r0, #10
 80a6b56:	600b      	str	r3, [r1, #0]
 80a6b58:	491f      	ldr	r1, [pc, #124]	; (80a6bd8 <__b2d+0xa4>)
 80a6b5a:	dc17      	bgt.n	80a6b8c <__b2d+0x58>
 80a6b5c:	45c1      	cmp	r9, r8
 80a6b5e:	bf28      	it	cs
 80a6b60:	2200      	movcs	r2, #0
 80a6b62:	f1c0 0c0b 	rsb	ip, r0, #11
 80a6b66:	fa26 f30c 	lsr.w	r3, r6, ip
 80a6b6a:	bf38      	it	cc
 80a6b6c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a6b70:	ea43 0501 	orr.w	r5, r3, r1
 80a6b74:	f100 0315 	add.w	r3, r0, #21
 80a6b78:	fa06 f303 	lsl.w	r3, r6, r3
 80a6b7c:	fa22 f20c 	lsr.w	r2, r2, ip
 80a6b80:	ea43 0402 	orr.w	r4, r3, r2
 80a6b84:	4620      	mov	r0, r4
 80a6b86:	4629      	mov	r1, r5
 80a6b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a6b8c:	45c1      	cmp	r9, r8
 80a6b8e:	bf2e      	itee	cs
 80a6b90:	2200      	movcs	r2, #0
 80a6b92:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a6b96:	f1a7 0808 	subcc.w	r8, r7, #8
 80a6b9a:	f1b0 030b 	subs.w	r3, r0, #11
 80a6b9e:	d016      	beq.n	80a6bce <__b2d+0x9a>
 80a6ba0:	f1c3 0720 	rsb	r7, r3, #32
 80a6ba4:	fa22 f107 	lsr.w	r1, r2, r7
 80a6ba8:	45c8      	cmp	r8, r9
 80a6baa:	fa06 f603 	lsl.w	r6, r6, r3
 80a6bae:	ea46 0601 	orr.w	r6, r6, r1
 80a6bb2:	bf94      	ite	ls
 80a6bb4:	2100      	movls	r1, #0
 80a6bb6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80a6bba:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80a6bbe:	fa02 f003 	lsl.w	r0, r2, r3
 80a6bc2:	40f9      	lsrs	r1, r7
 80a6bc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a6bc8:	ea40 0401 	orr.w	r4, r0, r1
 80a6bcc:	e7da      	b.n	80a6b84 <__b2d+0x50>
 80a6bce:	4614      	mov	r4, r2
 80a6bd0:	ea46 0501 	orr.w	r5, r6, r1
 80a6bd4:	e7d6      	b.n	80a6b84 <__b2d+0x50>
 80a6bd6:	bf00      	nop
 80a6bd8:	3ff00000 	.word	0x3ff00000

080a6bdc <__d2b>:
 80a6bdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a6be0:	461c      	mov	r4, r3
 80a6be2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80a6be6:	2101      	movs	r1, #1
 80a6be8:	4690      	mov	r8, r2
 80a6bea:	f7ff fc7f 	bl	80a64ec <_Balloc>
 80a6bee:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80a6bf2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a6bf6:	4607      	mov	r7, r0
 80a6bf8:	bb2c      	cbnz	r4, 80a6c46 <__d2b+0x6a>
 80a6bfa:	9301      	str	r3, [sp, #4]
 80a6bfc:	f1b8 0300 	subs.w	r3, r8, #0
 80a6c00:	d026      	beq.n	80a6c50 <__d2b+0x74>
 80a6c02:	4668      	mov	r0, sp
 80a6c04:	9300      	str	r3, [sp, #0]
 80a6c06:	f7ff fd58 	bl	80a66ba <__lo0bits>
 80a6c0a:	9900      	ldr	r1, [sp, #0]
 80a6c0c:	b1f0      	cbz	r0, 80a6c4c <__d2b+0x70>
 80a6c0e:	9a01      	ldr	r2, [sp, #4]
 80a6c10:	f1c0 0320 	rsb	r3, r0, #32
 80a6c14:	fa02 f303 	lsl.w	r3, r2, r3
 80a6c18:	430b      	orrs	r3, r1
 80a6c1a:	40c2      	lsrs	r2, r0
 80a6c1c:	617b      	str	r3, [r7, #20]
 80a6c1e:	9201      	str	r2, [sp, #4]
 80a6c20:	9b01      	ldr	r3, [sp, #4]
 80a6c22:	2b00      	cmp	r3, #0
 80a6c24:	bf14      	ite	ne
 80a6c26:	2102      	movne	r1, #2
 80a6c28:	2101      	moveq	r1, #1
 80a6c2a:	61bb      	str	r3, [r7, #24]
 80a6c2c:	6139      	str	r1, [r7, #16]
 80a6c2e:	b1c4      	cbz	r4, 80a6c62 <__d2b+0x86>
 80a6c30:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a6c34:	4404      	add	r4, r0
 80a6c36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a6c3a:	6034      	str	r4, [r6, #0]
 80a6c3c:	6028      	str	r0, [r5, #0]
 80a6c3e:	4638      	mov	r0, r7
 80a6c40:	b002      	add	sp, #8
 80a6c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a6c4a:	e7d6      	b.n	80a6bfa <__d2b+0x1e>
 80a6c4c:	6179      	str	r1, [r7, #20]
 80a6c4e:	e7e7      	b.n	80a6c20 <__d2b+0x44>
 80a6c50:	a801      	add	r0, sp, #4
 80a6c52:	f7ff fd32 	bl	80a66ba <__lo0bits>
 80a6c56:	2101      	movs	r1, #1
 80a6c58:	9b01      	ldr	r3, [sp, #4]
 80a6c5a:	6139      	str	r1, [r7, #16]
 80a6c5c:	617b      	str	r3, [r7, #20]
 80a6c5e:	3020      	adds	r0, #32
 80a6c60:	e7e5      	b.n	80a6c2e <__d2b+0x52>
 80a6c62:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a6c66:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a6c6a:	6030      	str	r0, [r6, #0]
 80a6c6c:	6918      	ldr	r0, [r3, #16]
 80a6c6e:	f7ff fd04 	bl	80a667a <__hi0bits>
 80a6c72:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80a6c76:	6029      	str	r1, [r5, #0]
 80a6c78:	e7e1      	b.n	80a6c3e <__d2b+0x62>

080a6c7a <__ratio>:
 80a6c7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6c7e:	4688      	mov	r8, r1
 80a6c80:	4669      	mov	r1, sp
 80a6c82:	4681      	mov	r9, r0
 80a6c84:	f7ff ff56 	bl	80a6b34 <__b2d>
 80a6c88:	460f      	mov	r7, r1
 80a6c8a:	4604      	mov	r4, r0
 80a6c8c:	460d      	mov	r5, r1
 80a6c8e:	4640      	mov	r0, r8
 80a6c90:	a901      	add	r1, sp, #4
 80a6c92:	f7ff ff4f 	bl	80a6b34 <__b2d>
 80a6c96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a6c9a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a6c9e:	468b      	mov	fp, r1
 80a6ca0:	eba3 0c02 	sub.w	ip, r3, r2
 80a6ca4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80a6ca8:	1a9b      	subs	r3, r3, r2
 80a6caa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80a6cae:	2b00      	cmp	r3, #0
 80a6cb0:	bfd5      	itete	le
 80a6cb2:	460a      	movle	r2, r1
 80a6cb4:	462a      	movgt	r2, r5
 80a6cb6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80a6cba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80a6cbe:	bfd8      	it	le
 80a6cc0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80a6cc4:	465b      	mov	r3, fp
 80a6cc6:	4602      	mov	r2, r0
 80a6cc8:	4639      	mov	r1, r7
 80a6cca:	4620      	mov	r0, r4
 80a6ccc:	f7fd ff3c 	bl	80a4b48 <__aeabi_ddiv>
 80a6cd0:	b003      	add	sp, #12
 80a6cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a6cd6 <__copybits>:
 80a6cd6:	3901      	subs	r1, #1
 80a6cd8:	b570      	push	{r4, r5, r6, lr}
 80a6cda:	1149      	asrs	r1, r1, #5
 80a6cdc:	6914      	ldr	r4, [r2, #16]
 80a6cde:	3101      	adds	r1, #1
 80a6ce0:	f102 0314 	add.w	r3, r2, #20
 80a6ce4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a6ce8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a6cec:	1f05      	subs	r5, r0, #4
 80a6cee:	42a3      	cmp	r3, r4
 80a6cf0:	d30c      	bcc.n	80a6d0c <__copybits+0x36>
 80a6cf2:	1aa3      	subs	r3, r4, r2
 80a6cf4:	3b11      	subs	r3, #17
 80a6cf6:	f023 0303 	bic.w	r3, r3, #3
 80a6cfa:	3211      	adds	r2, #17
 80a6cfc:	42a2      	cmp	r2, r4
 80a6cfe:	bf88      	it	hi
 80a6d00:	2300      	movhi	r3, #0
 80a6d02:	4418      	add	r0, r3
 80a6d04:	2300      	movs	r3, #0
 80a6d06:	4288      	cmp	r0, r1
 80a6d08:	d305      	bcc.n	80a6d16 <__copybits+0x40>
 80a6d0a:	bd70      	pop	{r4, r5, r6, pc}
 80a6d0c:	f853 6b04 	ldr.w	r6, [r3], #4
 80a6d10:	f845 6f04 	str.w	r6, [r5, #4]!
 80a6d14:	e7eb      	b.n	80a6cee <__copybits+0x18>
 80a6d16:	f840 3b04 	str.w	r3, [r0], #4
 80a6d1a:	e7f4      	b.n	80a6d06 <__copybits+0x30>

080a6d1c <__any_on>:
 80a6d1c:	f100 0214 	add.w	r2, r0, #20
 80a6d20:	6900      	ldr	r0, [r0, #16]
 80a6d22:	114b      	asrs	r3, r1, #5
 80a6d24:	4298      	cmp	r0, r3
 80a6d26:	b510      	push	{r4, lr}
 80a6d28:	db11      	blt.n	80a6d4e <__any_on+0x32>
 80a6d2a:	dd0a      	ble.n	80a6d42 <__any_on+0x26>
 80a6d2c:	f011 011f 	ands.w	r1, r1, #31
 80a6d30:	d007      	beq.n	80a6d42 <__any_on+0x26>
 80a6d32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a6d36:	fa24 f001 	lsr.w	r0, r4, r1
 80a6d3a:	fa00 f101 	lsl.w	r1, r0, r1
 80a6d3e:	428c      	cmp	r4, r1
 80a6d40:	d10b      	bne.n	80a6d5a <__any_on+0x3e>
 80a6d42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a6d46:	4293      	cmp	r3, r2
 80a6d48:	d803      	bhi.n	80a6d52 <__any_on+0x36>
 80a6d4a:	2000      	movs	r0, #0
 80a6d4c:	bd10      	pop	{r4, pc}
 80a6d4e:	4603      	mov	r3, r0
 80a6d50:	e7f7      	b.n	80a6d42 <__any_on+0x26>
 80a6d52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a6d56:	2900      	cmp	r1, #0
 80a6d58:	d0f5      	beq.n	80a6d46 <__any_on+0x2a>
 80a6d5a:	2001      	movs	r0, #1
 80a6d5c:	e7f6      	b.n	80a6d4c <__any_on+0x30>

080a6d5e <_calloc_r>:
 80a6d5e:	b538      	push	{r3, r4, r5, lr}
 80a6d60:	fb02 f501 	mul.w	r5, r2, r1
 80a6d64:	4629      	mov	r1, r5
 80a6d66:	f7fc f88f 	bl	80a2e88 <_malloc_r>
 80a6d6a:	4604      	mov	r4, r0
 80a6d6c:	b118      	cbz	r0, 80a6d76 <_calloc_r+0x18>
 80a6d6e:	462a      	mov	r2, r5
 80a6d70:	2100      	movs	r1, #0
 80a6d72:	f7fe f94d 	bl	80a5010 <memset>
 80a6d76:	4620      	mov	r0, r4
 80a6d78:	bd38      	pop	{r3, r4, r5, pc}
	...

080a6d7c <nan>:
 80a6d7c:	2000      	movs	r0, #0
 80a6d7e:	4901      	ldr	r1, [pc, #4]	; (80a6d84 <nan+0x8>)
 80a6d80:	4770      	bx	lr
 80a6d82:	bf00      	nop
 80a6d84:	7ff80000 	.word	0x7ff80000

080a6d88 <__ascii_wctomb>:
 80a6d88:	4603      	mov	r3, r0
 80a6d8a:	4608      	mov	r0, r1
 80a6d8c:	b141      	cbz	r1, 80a6da0 <__ascii_wctomb+0x18>
 80a6d8e:	2aff      	cmp	r2, #255	; 0xff
 80a6d90:	d904      	bls.n	80a6d9c <__ascii_wctomb+0x14>
 80a6d92:	228a      	movs	r2, #138	; 0x8a
 80a6d94:	f04f 30ff 	mov.w	r0, #4294967295
 80a6d98:	601a      	str	r2, [r3, #0]
 80a6d9a:	4770      	bx	lr
 80a6d9c:	2001      	movs	r0, #1
 80a6d9e:	700a      	strb	r2, [r1, #0]
 80a6da0:	4770      	bx	lr
	...

080a6da4 <__aeabi_d2lz>:
 80a6da4:	b538      	push	{r3, r4, r5, lr}
 80a6da6:	460c      	mov	r4, r1
 80a6da8:	4605      	mov	r5, r0
 80a6daa:	4621      	mov	r1, r4
 80a6dac:	4628      	mov	r0, r5
 80a6dae:	2200      	movs	r2, #0
 80a6db0:	2300      	movs	r3, #0
 80a6db2:	f7fe f811 	bl	80a4dd8 <__aeabi_dcmplt>
 80a6db6:	b928      	cbnz	r0, 80a6dc4 <__aeabi_d2lz+0x20>
 80a6db8:	4628      	mov	r0, r5
 80a6dba:	4621      	mov	r1, r4
 80a6dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a6dc0:	f7fe b8e0 	b.w	80a4f84 <__aeabi_d2ulz>
 80a6dc4:	4628      	mov	r0, r5
 80a6dc6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a6dca:	f7fe f8db 	bl	80a4f84 <__aeabi_d2ulz>
 80a6dce:	4240      	negs	r0, r0
 80a6dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6dd4:	bd38      	pop	{r3, r4, r5, pc}
 80a6dd6:	bf00      	nop

080a6dd8 <dynalib_user>:
 80a6dd8:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a6de8:	0000 0000 6f6e 6564 6572 6c64 6e6f 0067     ....noderedlong.
 80a6df8:	7325 6e00 646f 7265 6465 616c 0074 6925     %s.noderedlat.%i
 80a6e08:	2500 696c 2500 2e32 6637 6900 006e 756f     .%li.%2.7f.in.ou
 80a6e18:	0074 7770 006d 7764 6100 0077 7550 646c     t.pwm.dw.aw.Puld
 80a6e28:	6f38 3559 5130 5879 3542 5739 3344 4930     8oY50QyXB59WD30I
 80a6e38:	4e68 5961 635a 3474 7849 7459 7600 0077     hNaYZct4IxYt.vw.
 80a6e48:	6f4c 676e 7469 6475 3a65 0020 614c 6974     Longitude: .Lati
 80a6e58:	7574 6564 203a 7600 6c61 6575 6c00 6261     tude: .value.lab
 80a6e68:	742e 6568 6377 2e6c 6f63 006d               .thewcl.com.

080a6e74 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
 80a6e74:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e30     blnkinf.ver.1.0.
 80a6e84:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
 80a6e94:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
 80a6ea4:	6974 6c63 2065 6850 746f 6e6f 6200 6975     ticle Photon.bui
 80a6eb4:	646c 4a00 6c75 3120 2035 3032 3132 3120     ld.Jul 15 2021 1
 80a6ec4:	3a32 3734 343a 0037 0000 6564 6166 6c75     2:47:47...defaul
 80a6ed4:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
 80a6ee4:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
 80a6ef4:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
 80a6f04:	7525 2520 2073 4f4d 4544 7525 003e          %u %s MODE%u>.

080a6f12 <_ZL4font>:
 80a6f12:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a6f22:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a6f32:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a6f42:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a6f52:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a6f62:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a6f72:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a6f82:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a6f92:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a6fa2:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a6fb2:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a6fc2:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a6fd2:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a6fe2:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a6ff2:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a7002:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a7012:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a7022:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a7032:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a7042:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a7052:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a7062:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a7072:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a7082:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a7092:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a70a2:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a70b2:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a70c2:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a70d2:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a70e2:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a70f2:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a7102:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a7112:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a7122:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a7132:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a7142:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a7152:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a7162:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a7172:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a7182:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a7192:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a71a2:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 80a71b2:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a71c2:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a71d2:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 80a71e2:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a71f2:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 80a7202:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 80a7212:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 80a7222:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a7232:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a7242:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a7252:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a7262:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a7272:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a7282:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 80a7292:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 80a72a2:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 80a72b2:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 80a72c2:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 80a72d2:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 80a72e2:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 80a72f2:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 80a7302:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 80a7312:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 80a7322:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 80a7332:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 80a7342:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 80a7352:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 80a7362:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 80a7372:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 80a7382:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 80a7392:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 80a73a2:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 80a73b2:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 80a73c2:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 80a73d2:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 80a73e2:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 80a73f2:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 80a7402:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

080a7414 <_ZTV12Adafruit_GFX>:
	...
 80a7424:	14f1 080a 3671 080a 00ad 080a 0f25 080a     ....q6......%...
 80a7434:	0f27 080a 0f57 080a 0f33 080a 0f45 080a     '...W...3...E...
 80a7444:	0e69 080a 0f25 080a 114d 080a 10c9 080a     i...%...M.......
 80a7454:	0f6f 080a 0fad 080a 0fe7 080a 102d 080a     o...........-...
 80a7464:	10cb 080a 1049 080a                         ....I...

080a746c <_ZTV16OledWingAdafruit>:
	...
 80a7474:	1601 080a 1621 080a 14f1 080a 3671 080a     ....!.......q6..
 80a7484:	1fe1 080a 0f25 080a 0f27 080a 0f57 080a     ....%...'...W...
 80a7494:	0f33 080a 0f45 080a 0e69 080a 0f25 080a     3...E...i...%...
 80a74a4:	114d 080a 21ab 080a 2743 080a 26f5 080a     M....!..C'...&..
 80a74b4:	0fe7 080a 102d 080a 10cb 080a 1049 080a     ....-.......I...
 80a74c4:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.

080a74d4 <_ZTVN8particle11SPISettingsE>:
	...
 80a74dc:	0e15 080a 0df5 080a 0df7 080a               ............

080a74e8 <_ZL12splash1_data>:
 80a74e8:	0000 0000 0100 0080 0000 0000 0000 0000     ................
 80a74f8:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
 80a7508:	0000 0000 0000 c007 0000 0000 0000 0000     ................
 80a7518:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
 80a7528:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
 80a7538:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
 80a7550:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
 80a7560:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
 80a7570:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
 80a7580:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
 80a7590:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
 80a75a0:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
 80a75b0:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
 80a75c0:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
 80a75d0:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
 80a75e0:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
 80a75f0:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
 80a7600:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
 80a7610:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
 80a7620:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
 80a7630:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
 80a7640:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
 80a7650:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
 80a7660:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
 80a7678:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
 80a7690:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
 80a76a0:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
 80a76b0:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
 80a76c0:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
 80a76d0:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
 80a76e0:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
 80a76f0:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
 80a7700:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
 80a7710:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
 80a7720:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
 80a7730:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
 80a7740:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
 80a7750:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
 80a7760:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
 80a7770:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
 80a7780:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
 80a7790:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
 80a77a0:	fdff 5b6b 6adb c0fd                         ..k[.j..

080a77a8 <_ZL12splash2_data>:
 80a77a8:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
 80a77b8:	e000 0000 0000 0000 0000 0000 0000 0100     ................
 80a77c8:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
 80a77e4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
 80a77f4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
 80a7804:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
 80a7814:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
 80a7824:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
 80a7834:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
 80a7844:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
 80a7854:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
 80a7864:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
 80a7874:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
 80a7884:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
 80a7894:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
 80a78a4:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
 80a78b4:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
 80a78c4:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
 80a78d4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
 80a78e4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
 80a78f4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
 80a7904:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
 80a7914:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
 80a7924:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
 80a793c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
 80a794c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
 80a795c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
 80a796c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
 80a797c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

080a7988 <_ZTV16Adafruit_SSD1306>:
	...
 80a7990:	1fb5 080a 1fcd 080a 14f1 080a 3671 080a     ............q6..
 80a79a0:	1fe1 080a 0f25 080a 0f27 080a 0f57 080a     ....%...'...W...
 80a79b0:	0f33 080a 0f45 080a 0e69 080a 0f25 080a     3...E...i...%...
 80a79c0:	114d 080a 21ab 080a 2743 080a 26f5 080a     M....!..C'...&..
 80a79d0:	0fe7 080a 102d 080a 10cb 080a 1049 080a     ....-.......I...

080a79e0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
 80a79e0:	8000 e0c0 f8f0 fefc                         ........

080a79e8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
 80a79e8:	0100 0703 1f0f 7f3f                         ......?.

080a79f0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
 80a79f0:	d5ae a880                                   ....

080a79f4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
 80a79f4:	00d3 8d40                                   ..@.

080a79f8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
 80a79f8:	0020 c8a1                                    ...

080a79fc <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
 80a79fc:	40db a6a4 af2e                              .@....

080a7a02 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
 80a7a02:	02da 8f81                                   ....

080a7a06 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
 80a7a06:	12da                                         ...

080a7a09 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
 80a7a09:	02da                                         ...

080a7a0c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
 80a7a0c:	0022 21ff 0000 0000                         "..!....

080a7a14 <_ZL22BlynkReadHandlerVector>:
 80a7a14:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7a24:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7a34:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7a44:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7a54:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7a64:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7a74:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7a84:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7a94:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7aa4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7ab4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7ac4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7ad4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7ae4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7af4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7b04:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7b14:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7b24:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7b34:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7b44:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7b54:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7b64:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7b74:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7b84:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7b94:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7ba4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7bb4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7bc4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7bd4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7be4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7bf4:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..
 80a7c04:	28cd 080a 28cd 080a 28cd 080a 28cd 080a     .(...(...(...(..

080a7c14 <_ZL23BlynkWriteHandlerVector>:
 80a7c14:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7c24:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7c34:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7c44:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7c54:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7c64:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7c74:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7c84:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7c94:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7ca4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7cb4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7cc4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7cd4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7ce4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7cf4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7d04:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7d14:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7d24:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7d34:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7d44:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7d54:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7d64:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7d74:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7d84:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7d94:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7da4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7db4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7dc4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7dd4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7de4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7df4:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..
 80a7e04:	28cf 080a 28cf 080a 28cf 080a 28cf 080a     .(...(...(...(..

080a7e14 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a7e14:	0800 1810 2820 3830 6977 6972 676e 5400     .... (08wiring.T
 80a7e24:	5043 6c43 6569 746e 7320 636f 656b 3d74     CPClient socket=
 80a7e34:	7825 0000                                   %x..

080a7e38 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a7e40:	30a1 080a 30c9 080a 34eb 080a 30d7 080a     .0...0...4...0..
 80a7e50:	30a5 080a                                   .0..

080a7e54 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a7e5c <_ZTV9TCPClient>:
	...
 80a7e64:	30dd 080a 3111 080a 305d 080a 3077 080a     .0...1..]0..w0..
 80a7e74:	32ed 080a 3173 080a 3145 080a 309f 080a     .2..s1..E1...0..
 80a7e84:	320d 080a 34f1 080a 31a7 080a 3361 080a     .2...4...1..a3..
 80a7e94:	340f 080a 33c7 080a 3087 080a 33d5 080a     .4...3...0...3..
 80a7ea4:	3125 080a 616e 006e 6e69 0066 766f 0066     %1..nan.inf.ovf.
 80a7eb4:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
 80a7ec4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a7ed4:	0065 0000                                   e...

080a7ed8 <_ZTV9IPAddress>:
	...
 80a7ee0:	3b49 080a 3b39 080a 3b3b 080a               I;..9;..;;..

080a7eec <_ZTV9USBSerial>:
	...
 80a7ef4:	3c2d 080a 3c93 080a 3c6b 080a 3671 080a     -<...<..k<..q6..
 80a7f04:	3c5d 080a 3c2f 080a 3c3f 080a 3c8d 080a     ]<../<..?<...<..
 80a7f14:	3c4f 080a 3c29 080a                         O<..)<..

080a7f1c <_ZTV11USARTSerial>:
	...
 80a7f24:	3dc9 080a 3e31 080a 3e0d 080a 3671 080a     .=..1>...>..q6..
 80a7f34:	3ddd 080a 3df9 080a 3deb 080a 3e07 080a     .=...=...=...>..
 80a7f44:	3dcb 080a 3dcf 080a                         .=...=..

080a7f4c <_ZTV7TwoWire>:
	...
 80a7f54:	3ebd 080a 3f07 080a 3edf 080a 3ebf 080a     .>...?...>...>..
 80a7f64:	3ee7 080a 3eef 080a 3ef7 080a 3eff 080a     .>...>...>...>..

080a7f74 <_ZTVN5spark9WiFiClassE>:
	...
 80a7f7c:	3fff 080a 3ff5 080a 3feb 080a 3f69 080a     .?...?...?..i?..
 80a7f8c:	397b 080a 3fdf 080a 405d 080a 4065 080a     {9...?..]@..e@..
 80a7f9c:	3fd3 080a 3fcb 080a 3fc1 080a 3fb7 080a     .?...?...?...?..
 80a7fac:	3f73 080a                                   s?..

080a7fb0 <_ZTVN5spark12NetworkClassE>:
	...
 80a7fb8:	401d 080a 4027 080a 4031 080a 403b 080a     .@..'@..1@..;@..
 80a7fc8:	4045 080a 4051 080a 405d 080a 4065 080a     E@..Q@..]@..e@..
 80a7fd8:	406d 080a 4079 080a 4081 080a 408b 080a     m@..y@...@...@..
 80a7fe8:	4095 080a                                   .@..

080a7fec <_ZSt7nothrow>:
	...

080a7fed <_ZTSSt19_Sp_make_shared_tag>:
 80a7fed:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a7ffd:	6572 5f64 6174 0067 0000                     red_tag....

080a8008 <_ZTISt19_Sp_make_shared_tag>:
 80a8008:	8048 080a 7fed 080a                         H.......

080a8010 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a8010:	80a8 080a 801c 080a 80cc 080a               ............

080a801c <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a801c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a802c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a803c:	0045 0000                                   E...

080a8040 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a8040:	0000 0000 8010 080a 43a1 080a 43b5 080a     .........C...C..
 80a8050:	454d 080a 454d 080a 441f 080a 4361 080a     ME..ME...D..aC..
 80a8060:	4407 080a 43c9 080a 4395 080a               .D...C...C..

080a806c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a806c:	80a8 080a 8078 080a 8010 080a               ....x.......

080a8078 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a8078:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a8088:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a8098:	666e 456f 0000 0000                         nfoE....

080a80a0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a80a0:	0000 0000 806c 080a 4449 080a 445d 080a     ....l...ID..]D..
 80a80b0:	454d 080a 454d 080a 441f 080a 4361 080a     ME..ME...D..aC..
 80a80c0:	4521 080a 44ad 080a 4471 080a               !E...D..qD..

080a80cc <_ZTISt9type_info>:
 80a80cc:	8048 080a 80d4 080a                         H.......

080a80d4 <_ZTSSt9type_info>:
 80a80d4:	7453 7439 7079 5f65 6e69 6f66 6900 696e     St9type_info.ini
 80a80e4:	7974 0000                                   ty..

080a80e8 <fpi.6203>:
 80a80e8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a80f8:	0000 0000                                   ....

080a80fc <fpinan.6239>:
 80a80fc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80a810c:	0000 0000                                   ....

080a8110 <tinytens>:
 80a8110:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a8120:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a8130:	6f43 64ac 0628 1168                         Co.d(.h.

080a8138 <_ctype_>:
 80a8138:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a8148:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a8158:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a8168:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a8178:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a8188:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a8198:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a81a8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a81b8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a823c <_C_numeric_locale>:
 80a823c:	7eb4 080a 6e53 080a 0068 2000 0043 4f50     .~..Sn..h.. C.PO
 80a824c:	4953 0058                                   SIX.

080a8250 <__mprec_bigtens>:
 80a8250:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a8260:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a8270:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a8278 <__mprec_tens>:
 80a8278:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a8288:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a8298:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a82a8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a82b8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a82c8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a82d8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a82e8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a82f8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a8308:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a8318:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a8328:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a8338:	9db4 79d9 7843 44ea                         ...yCx.D

080a8340 <p05.6127>:
 80a8340:	0005 0000 0019 0000 007d 0000               ........}...

080a834c <link_const_variable_data_end>:
 80a834c:	080a0d51 	.word	0x080a0d51
 80a8350:	080a3021 	.word	0x080a3021
 80a8354:	080a3989 	.word	0x080a3989
 80a8358:	080a3999 	.word	0x080a3999
 80a835c:	080a39d1 	.word	0x080a39d1
 80a8360:	080a4009 	.word	0x080a4009
 80a8364:	080a40fd 	.word	0x080a40fd
 80a8368:	080a4291 	.word	0x080a4291

080a836c <link_constructors_end>:
 80a836c:	00000000 	.word	0x00000000
